(()=>{var __webpack_modules__={6525:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1667);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);\n// Imports\n\n\n\nvar ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(1340), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(4000), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(8385), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(5331), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(8198), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ __webpack_require__(6096), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(8752), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_7___ = new URL(/* asset import */ __webpack_require__(7769), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_8___ = new URL(/* asset import */ __webpack_require__(1733), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_9___ = new URL(/* asset import */ __webpack_require__(7193), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_10___ = new URL(/* asset import */ __webpack_require__(5680), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_11___ = new URL(/* asset import */ __webpack_require__(2182), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_12___ = new URL(/* asset import */ __webpack_require__(4902), __webpack_require__.b);\nvar ___CSS_LOADER_URL_IMPORT_13___ = new URL(/* asset import */ __webpack_require__(7933), __webpack_require__.b);\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,500;0,600;0,700;0,800;1,400;1,500&family=Open+Sans:ital,wght@0,400;0,700;1,400&display=swap);"]);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);\nvar ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);\nvar ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);\nvar ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);\nvar ___CSS_LOADER_URL_REPLACEMENT_7___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_7___);\nvar ___CSS_LOADER_URL_REPLACEMENT_8___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_8___);\nvar ___CSS_LOADER_URL_REPLACEMENT_9___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_9___);\nvar ___CSS_LOADER_URL_REPLACEMENT_10___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_10___);\nvar ___CSS_LOADER_URL_REPLACEMENT_11___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_11___);\nvar ___CSS_LOADER_URL_REPLACEMENT_12___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_12___);\nvar ___CSS_LOADER_URL_REPLACEMENT_13___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_13___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "a{text-decoration:none;color:#333}.btn,.btn-secondary{display:flex;justify-content:center;align-items:center;color:#fff;background-color:#191a15;border:none;border-radius:2rem;font-family:\\"Montserrat\\",sans-serif;font-size:1rem;padding:.5rem 1.2rem;cursor:pointer;transition:.5s all ease-in-out}.btn__disabled{background-color:rgba(0,0,0,0);border:1px solid #a1a1a1;color:#a1a1a1;pointer-events:none}.btn:disabled,.btn-secondary:disabled{background-color:rgba(0,0,0,0);border:1px solid #a1a1a1;color:#a1a1a1;pointer-events:none}.btn-secondary{background-color:#fff;border:2px solid #332a7c;color:#332a7c}.video-btn{padding:0 1rem 0 .2rem;border-color:#fff;box-shadow:rgba(0,0,0,.2) 0px 12px 28px 0px,rgba(0,0,0,.1) 0px 2px 4px 0px,rgba(255,255,255,.05) 0px 0px 0px 1px inset}.video-btn:hover{box-shadow:0px 1px 4px 1px rgba(50,50,71,.15)}.video-btn .video-icon{font-size:3rem;padding-right:.5rem}.btn-play{width:3.5rem;height:3.5rem;padding:0;background-color:#fff;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15)}.btn-level{box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border:2px solid rgba(0,0,0,0)}.btn-level:hover{background-color:#ffddb0}.btn-level.btn-active{border-color:#332a7c;color:#191a15}.btn-level{box-shadow:0px 1px 4px 1px rgba(50,50,71,.15)}.btn-level-1{background-color:#fcfcff}.btn-level-2{background-color:#f4f4ff}.btn-level-3{background-color:#f0f0ff}.btn-level-4{background-color:#eaeaff}.btn-level-5{background-color:#e4e4ff}.btn-level-6{background-color:#dedeff}.user-words-btn{background-color:#332a7c;color:#ffddb0;position:relative}.user-words-btn.btn-active{background-color:#ffddb0;color:#332a7c}.user-words-btn::after{content:\\"\\";position:absolute;font-family:Material Icons Outlined;font-size:1.3rem;font-weight:300;font-style:normal;background:#ffddb0;color:#332a7c;padding:.5rem;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border-radius:30px;right:-15px;top:-6px}.user-words-btn:hover{color:#332a7c}.btn:disabled,.btn-secondary:disabled{background-color:rgba(0,0,0,0);border:1px solid #a1a1a1;color:#a1a1a1}.btn-add,.btn-learn{padding:.5rem;width:3rem;height:3rem}h1,h2,h3,h4{font-family:\\"Montserrat\\",sans-serif}h1{font-size:4.7rem}@media(max-width: 768px){h1{font-size:3.5rem}}h2{font-size:2.4rem}.user-icon{background-color:rgba(0,0,0,0);font-size:45px;border-radius:50%;transition:all .5s}.user-icon:hover{background-color:#ffddb0}.modal-overlay{font-family:\\"Montserrat\\",sans-serif;position:fixed;left:0;top:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;background-color:rgba(41,41,41,.6);cursor:pointer;z-index:5}.modal-overlay:hover .modal-close-btn{background-color:#191a15}.modal-wrapper{position:absolute;width:50%;height:auto;z-index:6;cursor:default;background-color:#fff;padding:3rem;border-radius:1rem}.modal-close-btn{display:flex;justify-content:center;align-items:center;width:52px;height:52px;position:absolute;right:-52px;top:-52px;border-radius:50px;cursor:pointer;transition:.3s ease-in-out;z-index:6}.modal-close-btn:hover{background-color:#fff}.modal_wrapper:hover .modal-close-btn{background-color:rgba(0,0,0,0)}.modal-err-message{text-align:center;padding-bottom:1.2rem;color:red}.modal-message{color:#332a7c;text-align:center;font-size:1.2rem;font-weight:600}.form-wrapper form{display:flex;flex-direction:column;flex-wrap:nowrap;align-content:center;align-items:center;justify-content:center;row-gap:1.5rem}.form-wrapper .input-wrapper{width:90%;text-align:center}.form-wrapper input{height:3rem;width:100%;border-bottom:1px solid;padding:0 .5rem;font-size:1.2rem;font-family:\\"Montserrat\\",sans-serif}.form-wrapper input:focus-visible{outline:none}.form-wrapper .btn-submit{margin-top:1rem}.error-message,.error-in-form{color:red}*,*:before,*:after{padding:0;margin:0;border:0;box-sizing:border-box}.body{font-family:\\"Open Sans\\",sans-serif;font-size:16px;color:#333;margin:0 auto;padding:0 2.5rem;display:flex;flex-direction:column;align-content:stretch;flex-wrap:nowrap;max-width:1440px;min-height:100vh}@media(max-width: 768px){.body{padding:0 1rem}}.header{display:flex;justify-content:space-between;align-items:center;font-family:\\"Montserrat\\",sans-serif;font-weight:400;font-size:1rem;line-height:1.2;height:75px;margin:auto;width:100%;z-index:1;padding:0 2rem}.logo{font-size:1.5rem;line-height:1.4;font-weight:800}@media(max-width: 768px){.logo{line-height:1.1}}@media(max-width: 425px){.logo{font-size:1.2rem;line-height:1.1}}@media(max-width: 600px){.header-menu{position:fixed;display:flex;align-items:center;justify-content:center;width:320px;height:100vh;top:0;background-color:#fff;right:-320px;z-index:2;font-size:32px;line-height:51.2px;overflow-x:hidden;transition:all .8s ease-in-out}}.menu-items{display:flex;justify-content:center;align-items:center;list-style:none}@media(max-width: 600px){.menu-items{flex-direction:column;justify-content:center;align-items:center;line-height:48px;gap:43px}}.menu-item-link{cursor:pointer;font-weight:600;padding:29px}.menu-item-link:hover{border-bottom:2px solid #191a15;padding-bottom:27px}.auth{display:flex;justify-content:center;align-items:center;gap:1rem}.burger-icon{display:none}@media(max-width: 600px){.burger-icon{display:inline-block;position:relative;width:30px;height:22px;margin:0 1rem;z-index:9;cursor:pointer;transition:.5s}}@media(max-width: 600px){.burger-line{display:inline-block;position:absolute;background-color:#191a15;height:2px;width:100%;top:50%;transform:translateY(-50%)}.burger-line::before{display:inline-block;position:absolute;background-color:#191a15;height:2px;width:100%;top:50%;transform:translateY(-50%);content:\\"\\";margin-top:10px;background-color:#191a15}.burger-line::after{display:inline-block;position:absolute;background-color:#191a15;height:2px;width:100%;top:50%;transform:translateY(-50%);content:\\"\\";margin-top:-10px;background-color:#191a15}}.clicked{transform:rotate(90deg);z-index:99}.opened{right:0}.footer{display:flex;justify-content:space-between;align-items:center;font-family:\\"Montserrat\\",sans-serif;font-weight:400;font-size:.9rem;line-height:1.1;min-height:90px;margin:auto;width:100%;background-color:#191a15;color:#fff;padding:0 20px;flex-wrap:wrap}@media(max-width: 600px){.footer{flex-direction:column;gap:1rem;padding:.5rem 0}}.team-github{display:flex;justify-content:center;align-items:center;flex-wrap:wrap;gap:1rem}.team-github a{color:#fff}.rs-logo img{width:7rem}.main{flex-grow:1}.audio-call{position:absolute;width:100%;height:100vh;top:0;left:0;right:0;background:linear-gradient(180deg, #7d5db0, #b06d9a 72%, #c584a4);color:rgba(255,255,255,.7);display:flex;align-items:center;margin:0 auto;flex-direction:column;padding:80px 10px 0 10px}.audio-call .container{margin:0 auto;width:100%;max-width:1250px}.audio-call .level-select{display:flex;flex-direction:column;align-items:center;justify-content:center;row-gap:2rem}.audio-call .select-block{text-align:center}@media screen and (max-width: 1030px){.audio-call .select-block{max-width:500px}}.audio-call .select-block .select-block__title{padding:1rem}.audio-call .selected{color:#fff;border:1px solid #fff}.audio-call a,.audio-call button{margin:.2rem;border:1px solid rgba(255,255,255,.2);border-radius:3px;cursor:pointer;display:inline-block;line-height:1;color:inherit;min-width:162px;padding:19px 15px 21px;transition:all .15s ease;background-color:rgba(0,0,0,0)}.audio-call a:hover,.audio-call button:hover{color:#fff;border:1px solid #fff}.audio-call .stage{text-align:center}.audio-call .stage__img{border-radius:50%;height:13rem;width:13rem;margin:1rem auto;display:block}.audio-call .answers{margin:3rem 0;display:flex;align-items:center;flex-wrap:wrap;justify-content:center;gap:2rem}.audio-call .answer{font-size:1.5rem;display:flex;gap:.5rem;cursor:pointer}.audio-call .answer :hover{color:#fff}.audio-call .answer .checked{color:green;border:1px solid;border-radius:50%;height:2rem;width:2rem;line-height:2rem;font-size:1.5rem;background-color:#b7d693}.audio-call .word{display:flex;align-items:center;justify-content:center;font-size:2.5rem}.audio-call .speaker-button{border:none;border-radius:50%;padding:0;margin:0;min-width:0px;border-color:rgba(0,0,0,0)}.audio-call .speaker-button:hover{border:none}.audio-call .speaker-button svg{padding:.2rem}.audio-call .speaker-button svg:hover path{fill:#3c3e3d !important}.audio-call .speaker-button_min{padding:0 1rem}.audio-call .speaker-button_min svg{width:3rem;height:3rem}.audio-call .game__result{display:flex;flex-direction:column;align-items:center;background-color:#fff;border:1px solid #e6e9ee;border-radius:8px;box-sizing:border-box;max-width:500px;min-height:646px;padding:42px 16px;text-align:center;width:100%}.audio-call .result__score{color:#37383c;font-size:34px;font-weight:300;align-self:center}.audio-call .game__lists{margin-top:30px}.audio-call .result__true,.audio-call .result__false{display:flex;flex-direction:column;align-items:flex-start;font-size:12px;font-weight:700;line-height:1.33;text-transform:uppercase;list-style:none}.audio-call .result__true{color:#28c38a;margin:1rem 0}.audio-call .result__false{color:#ed593b}.audio-call .result__word{display:flex;gap:10px;align-items:center;color:#37383c;font-size:16px;line-height:1.25;text-transform:lowercase;font-weight:500;margin-top:5px}.audio-call .result__word-en{font-weight:700}.audio-call .result__voice{width:33px;height:33px;cursor:pointer}.audio-call .result__voice svg{width:2rem;height:2rem}.audio-call .close-button{border-radius:50%;width:4rem;height:4rem;text-align:center;line-height:22px;font-size:2rem;min-width:min-content}.audio-call .mute-button{margin:4px;font-size:3rem}.audio-call .result__button{margin-top:1rem;border:2px solid #28c38a;color:#3c3e3d;font-size:1.2rem}.audio-call .result__button:hover{background-color:#28c38a;border:2px solid #28c38a}.audio-call .buttons-wrapper{width:100%;display:flex;align-items:center;justify-content:space-between}.body--sprint{position:relative;max-width:100%;min-height:100vh;padding:0;background-color:#0d3848;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + "),url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + "),url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ");background-repeat:no-repeat,no-repeat,no-repeat;background-size:100%,auto,auto;background-position:bottom,0 0,100% 0}.body--sprint h2{font-size:24px}.body--sprint .header{position:absolute;top:0;max-width:1360px;padding:0 2rem;background-color:rgba(0,0,0,0);z-index:10;align-self:center;color:#fff;border:none}.body--sprint .logo a{color:#fff}.body--sprint .menu-item-link{color:#fff}.body--sprint .menu-item-link:hover{border-bottom:2px solid #fff}.body--sprint .btn-secondary{color:#000}.body--sprint .enter-cabinet-link{color:#fff}.body--sprint .main{padding:75px 0;display:flex;min-height:100vh}.body--sprint .footer{display:none}.body--sprint .burger-line{background-color:#fff}.body--sprint .burger-line::after{background-color:#fff}.body--sprint .burger-line::before{background-color:#fff}.body--sprint .opened{background-color:#0d3848}.sprint{position:relative;display:flex;align-items:center;justify-content:center;padding:20px 0;color:#fff;width:100%}.sprint .sprint__select-title{font-size:2.4rem}.sprint__select{display:flex;flex-direction:column;align-items:center;min-width:50%}.sprint__select-descr{margin-top:2rem}.sprint__select-text{margin-top:2rem}.sprint__levels{margin-top:20px;display:flex;justify-content:space-between;width:100%;gap:.4rem}.sprint__level{display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:162px;height:55px;border-radius:3px;border:1px solid #fff;cursor:pointer}.sprint__close{position:absolute;top:10px;right:20px;width:40px;height:40px;border-radius:40px;z-index:1;margin:20px auto;cursor:pointer}.sprint__close::before{content:\\"+\\";color:#fff;position:absolute;z-index:2;transform:rotate(45deg);font-size:50px;line-height:1;top:-5px;left:6px;transition:all .3s cubic-bezier(0.77, 0, 0.2, 0.85)}.sprint__close::after{content:\\"\\";position:absolute;top:0;left:0;width:100%;height:100%;border-radius:100%;background:#fff;z-index:1;transition:all .3s cubic-bezier(0.77, 0, 0.2, 0.85);transform:scale(0.01)}.sprint__close:hover:after{transform:scale(1)}.sprint__close:hover:before{transform:scale(0.8) rotate(45deg);color:#0d3848}.timer{display:flex;justify-content:center;align-items:center;position:relative}.timer__time{font-size:30px;font-weight:lighter;width:160px;position:absolute;display:flex;align-items:center;justify-content:center}.timer__svg{transform:rotate(90deg) scaleX(-1)}.circle_animation{stroke-dasharray:440;stroke-dashoffset:0;transition:all 1s linear}.sprint__ready{display:flex;flex-direction:column}.timer--control{position:absolute;top:20px;left:20px}.sprint__control{display:flex;flex-direction:column;align-items:center;position:relative}.control__sound{position:absolute;right:0;width:23px;height:24px;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ");background-repeat:no-repeat;cursor:pointer}.control__sound--off{background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ")}.control__container{position:relative;display:flex;flex-direction:column;align-items:center;width:500px;padding:30px;margin-top:10px;border:1px solid #fff;border-radius:10px;background-color:rgba(255,255,255,.06)}.control__voice{position:absolute;right:20px;top:20px;width:33px;height:33px;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ");background-repeat:no-repeat;background-position:center;cursor:pointer}.control__voice:hover{background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_6___ + ")}.control__series-list{display:flex;justify-content:center;gap:20px}.control__series{width:26px;height:26px;border-radius:50%;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_7___ + ");background-position:50%;background-repeat:no-repeat;background-size:contain}.control__series--active{background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_8___ + ")}.control__multiply{margin-top:10px}.control__parrots{display:flex;width:204px;height:57px;margin-top:30px;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_9___ + ");background-repeat:no-repeat;background-position:bottom}.control__parrot{position:relative;top:6px}.control__word-en{font-size:36px;margin-top:20px}.control__word-ru{font-size:24px;color:rgba(255,255,255,.6)}.control__buttons{display:flex;gap:20px;margin-top:40px;padding-bottom:40px}.control__button{position:relative;border-radius:4px;color:#fff;font-size:20px;font-weight:400;height:50px;text-align:center;width:183px;cursor:pointer}.control__button::before{bottom:-45px;color:#7e919f;display:block;font-size:28px;position:absolute}.control__button--false{background-color:#ed593b}.control__button--false::before{content:\\"←\\";left:40%}.control__button--true{background-color:#28c38a}.control__button--true::before{content:\\"→\\";right:40%}.sprint__result{display:flex;flex-direction:column;align-items:center;background-color:#fff;border:1px solid #e6e9ee;border-radius:8px;box-sizing:border-box;max-width:500px;max-height:500px;padding:42px 16px;text-align:center;width:100%;overflow-y:auto}.result__score{color:#37383c;font-size:34px;font-weight:300;align-self:center}.sprint__lists{margin-top:30px}.result__true,.result__false{display:flex;flex-direction:column;align-items:flex-start;font-size:12px;font-weight:700;line-height:1.33;text-transform:uppercase;list-style:none}.result__true{color:#28c38a;margin-top:20px}.result__false{color:#ed593b}.result__word{display:flex;gap:10px;align-items:center;color:#37383c;font-size:16px;line-height:1.25;text-transform:lowercase;font-weight:500;margin-top:5px}.result__word-en{font-weight:700}.result__voice{width:33px;height:33px;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_10___ + ");background-repeat:no-repeat;background-position:center;cursor:pointer}.result__voice:hover{background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_6___ + ")}.result__restart-btn{background-color:rgba(37,130,231,.08);border-radius:4px;color:#2582e7;cursor:pointer;font-size:14px;font-weight:600;line-height:1.43;margin-top:24px;padding:10px 42px;text-align:center}.result__restart-btn:hover{background-color:rgba(37,130,231,.12)}.sprint__restart-message{font-size:14px;width:60%;color:#ed593b;margin-top:10px}.textbook{display:flex;position:relative;align-items:stretch;width:100%;margin-top:-2px}@media(max-width: 600px){.textbook{flex-direction:column}}.aside{padding:2rem 1rem;width:15%;flex-shrink:0;font-family:\\"Montserrat\\",sans-serif}@media(max-width: 600px){.aside{width:100%}}@media(max-width: 425px){.aside{padding:1rem .2rem}}.sidebar-content{position:-webkit-sticky;position:sticky;top:0;display:flex;flex-direction:column;justify-content:center;align-items:center;padding-right:1.5rem;gap:.7rem}@media(max-width: 600px){.sidebar-content{flex-direction:row;flex-wrap:wrap;justify-content:flex-start}}@media(max-width: 425px){.sidebar-content{gap:.3rem;padding:0;justify-content:center;row-gap:1.8rem}}.sidebar-text{font-size:1.2rem;font-weight:600;text-align:center}@media(max-width: 600px){.sidebar-text{font-size:1rem}}@media(max-width: 425px){.sidebar-text{display:none}}.btn-level{display:flex;justify-content:center;align-items:center;height:5.6rem;width:5.6rem;border-radius:50%;padding:2.5rem;font-size:2.5rem;font-weight:700;cursor:pointer;transition:.3s ease-in-out}@media(max-width: 600px){.btn-level{height:3.2rem;width:3.2rem;padding:0;font-size:1.5rem}}.userbook-mark{display:flex;position:absolute;bottom:3.8rem;right:2.4rem;background:#ffddb0;color:#332a7c;border-radius:30px;padding:.5rem;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15)}.userbook-mark .material-icons-outlined{font-size:1.3rem}@media(max-width: 600px){.userbook-mark{bottom:2rem;right:1rem}}@media(max-width: 425px){.userbook-mark{right:9.1rem}}.text-book-page{background-color:#ffddb0;box-shadow:inset -1px -1px 3px rgba(255,255,255,.75),inset 1px 1px 2px rgba(7,7,69,.15);border-radius:30px;display:flex;flex-direction:column;padding:0 2.5rem 1.5rem;width:85%;border:3px solid #fff;margin-bottom:1.5rem}@media(max-width: 600px){.text-book-page{width:100%}}@media(max-width: 425px){.text-book-page{padding:1rem}}.text-book-page-head{display:flex;padding:2.5rem;align-items:center;gap:1.5rem;margin-right:auto}@media(max-width: 600px){.text-book-page-head{padding:2.5rem 1.2rem}}@media(max-width: 425px){.text-book-page-head{flex-direction:column;gap:.5rem;padding:1.5rem;margin:0}}.cards-wrapper{display:flex;flex-direction:row;justify-content:space-around;flex-wrap:wrap;row-gap:1rem}.card{padding:1.2rem;background:#fff;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border-radius:30px;display:flex;flex-direction:column;width:32rem;height:25rem}@media(max-width: 425px){.card{width:100%;height:auto}}.card-main-info-wrapper{display:flex;align-items:center;font-family:\\"Montserrat\\",sans-serif;padding-bottom:1.5rem}@media(max-width: 425px){.card-main-info-wrapper{flex-direction:column;padding-bottom:1rem}}.btn-play{margin-left:-2rem}.btn-play:hover{background-color:#ffddb0}.btn-play svg{width:25px;height:25px}.btn-play svg path{fill:#191a15;stroke:#191a15}.btn-play svg:hover{fill:#332a7c}.btn-play svg:hover path{fill:#332a7c;stroke:#332a7c}@media(max-width: 425px){.btn-play{margin-left:0;margin-top:-2rem}}.card-img{width:10rem;height:8rem;border-radius:30px}@media(max-width: 425px){.card-img{width:100%;height:10rem}}.card-word-info{padding-left:.8rem}@media(max-width: 425px){.card-word-info{text-align:center}}.word{font-size:1.8rem;font-weight:700}.word-transcription{font-size:1rem;color:#a1a1a1;padding-bottom:.8rem}.word-translate{font-size:1.3rem}.user-btns{margin-left:auto;display:flex;flex-direction:column;gap:.5rem;align-items:center}@media(max-width: 425px){.user-btns{flex-direction:row;margin:auto;padding-top:1rem}}.answers{font-size:.8rem}.hard-word-btn{border-color:#332a7c;background-color:#332a7c}.hard-word-btn .btn-icon{color:#ffddb0}.learn-word-btn{border-color:#ffddb0;background-color:#ffddb0}.learn-word-btn .btn-icon{color:#332a7c}.word-mean-translate,.word-ex-translate{color:#a1a1a1;line-height:1.6;font-style:italic}.word-mean-translate{padding-bottom:1rem}.pagination{display:flex;justify-content:center;align-items:center;padding:2.5rem 1rem 0}.page-input{margin:0 3rem;width:2rem;font-size:1.5rem;font-weight:600;font-family:\\"Montserrat\\",sans-serif;border-bottom:1px solid;text-align:center}.page-input:focus-visible{outline:none}@media(max-width: 425px){.page-input{margin:0 .5rem}}.page-input::-webkit-outer-spin-button,.page-input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.page-input{-moz-appearance:textfield}.user-page{background-color:#ffddb0;box-shadow:inset -1px -1px 3px rgba(255,255,255,.75),inset 1px 1px 2px rgba(7,7,69,.15);border-radius:30px;background-color:#f4f4ff;display:flex;flex-direction:column;padding:2rem 1rem 1rem;gap:1.5rem}.user-sidebar{display:flex;gap:1.5rem;flex-direction:column;width:36%;padding:2.5rem 1.5rem 1.5rem}@media(max-width: 425px){.user-sidebar{width:100%;padding:0 1rem 1.5rem;align-items:center}}.user-section{display:flex;padding-bottom:1rem;gap:2.5rem}@media(max-width: 768px){.user-section{gap:0}}@media(max-width: 425px){.user-section{flex-direction:column}}.enter-cabinet-link{color:#191a15;font-weight:600}.exit-cabinet-btn{width:10rem}.hero-section{display:flex;justify-content:center;align-items:center;flex-direction:column;padding:3rem;background:center/cover no-repeat url(" + ___CSS_LOADER_URL_REPLACEMENT_11___ + ");border-radius:30px;box-shadow:inset -1px -1px 3px rgba(255,255,255,.75),inset 1px 1px 2px rgba(7,7,69,.15)}@media(max-width: 1025px){.hero-section{padding:1.5rem;padding-top:2.5rem}}@media(max-width: 768px){.hero-section{padding:3.5rem 2rem}}@media(max-width: 425px){.hero-section{padding:2.5rem 1.5rem}}.hero-section-header{width:50%;text-align:center;line-height:1;padding-bottom:2rem}@media(max-width: 1025px){.hero-section-header{width:60%}}@media(max-width: 768px){.hero-section-header{width:100%}}@media(max-width: 425px){.hero-section-header{width:100%}}.hero-section-text{text-align:center;width:60%;padding-bottom:1.5rem}@media(max-width: 425px){.hero-section-text{width:100%}}.advantages-section{display:flex;padding:0;margin-top:4.5rem;gap:1rem;flex-wrap:wrap;justify-content:center}.advantage_wrapper{padding:1.2rem;background:#fff;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border-radius:30px;text-align:center;padding:1rem;width:23%}@media(max-width: 1025px){.advantage_wrapper{width:48%}}@media(max-width: 600px){.advantage_wrapper{width:100%}}.advantage-header{position:relative;font-size:2rem;padding-bottom:1rem;padding-top:1rem}.advantage-header::after{position:absolute;content:\\"\\";height:2px;background-color:#191a15;width:30%;bottom:0;left:34.5%}.advantage-image{width:100%;border-radius:30px}.advantage-text{padding-top:1rem;padding-bottom:1rem}.info-section{display:flex;justify-content:space-between;align-items:center;padding:4.5rem 0}.info-text-wrapper{width:40%;padding:0 4.5rem}.info-header{font-size:1.5rem;padding-bottom:2rem}.info-text{list-style:none;padding-bottom:.7rem;display:flex;align-items:center}.info-text-icon{padding-right:.5rem}.info-image{background-color:#ffddb0;box-shadow:inset -1px -1px 3px rgba(255,255,255,.75),inset 1px 1px 2px rgba(7,7,69,.15);border-radius:30px;background:center/cover no-repeat url(" + ___CSS_LOADER_URL_REPLACEMENT_12___ + ");width:50%;height:25rem}.team-section{padding:4.5rem 0;display:flex;align-items:center;flex-direction:column;margin-bottom:2.5rem}.team-section-header{text-align:center}.team-members{display:flex;gap:1.5rem;padding-top:2.5rem;flex-wrap:wrap;justify-content:center}@media(max-width: 1025px){.team-members{width:100%}}.team-member{padding:1.2rem;background:#fff;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border-radius:30px;padding:1rem;width:30%;display:flex;justify-content:flex-start;flex-direction:column;align-items:center}@media(max-width: 600px){.team-member{width:100%}}.team-member-name{font-size:1.6rem;padding:1rem 0 0}.team-member-img{width:100%;border-radius:30px}.member-duty{font-size:.9rem;line-height:2;padding-bottom:1rem;color:#a1a1a1}.member-actions{text-align:center;padding-bottom:1rem;flex-grow:1}.member-actions ul{text-align:left;display:flex;flex-direction:column;align-items:center;justify-content:space-between;height:100%}.member-actions li{list-style:none;padding-bottom:.3rem;text-align:center}.git-icon{width:50px;height:50px;margin-top:auto;background-image:url(" + ___CSS_LOADER_URL_REPLACEMENT_13___ + ");filter:none;transition:all .5s;border-radius:50%;background-color:#fff}.git-icon:hover{filter:invert(1)}.charts{display:flex;align-items:center;justify-content:space-around;flex-wrap:wrap;width:100%;padding:20px}@media(max-width: 1025px){.charts{gap:1.5rem}}@media(max-width: 425px){.charts{width:100%}}.chart{width:35%;height:300px}@media(max-width: 425px){.chart{width:100%;height:max-content}}.todaystat-wrapper{padding:1.2rem;background:#fff;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border-radius:30px;padding:1.6rem;font-family:\\"Montserrat\\",sans-serif;width:62%;display:flex;justify-content:space-around}.todaystat-wrapper .word-wrapper{width:100%}@media(max-width: 425px){.todaystat-wrapper{width:100%;padding:.5rem}}.wrapper_daily-stat{display:flex;justify-content:center;align-items:center;flex-direction:column;width:100%;font-size:1.3rem;color:#191a15;font-family:\\"Montserrat\\",sans-serif;gap:1rem}.daystat-wrapper{padding:1.2rem;background:#fff;box-shadow:0px 1px 4px 1px rgba(50,50,71,.15);border-radius:30px;font-family:\\"Montserrat\\",sans-serif;display:flex;justify-content:space-around;align-items:center;width:100%;padding-bottom:1.5rem}@media(max-width: 768px){.daystat-wrapper{flex-wrap:wrap;gap:1rem}.daystat-wrapper .word-wrapper{width:48%}}@media(max-width: 425px){.daystat-wrapper{flex-wrap:nowrap;flex-direction:column;gap:1rem}.daystat-wrapper .word-wrapper{width:100%}}.data-wrapper-row1,.data-wrapper-row2{display:flex;padding:1rem;gap:1rem;flex-direction:column;width:50%;justify-content:space-between}@media(max-width: 425px){.data-wrapper-row1,.data-wrapper-row2{padding:5px}}.data-wrapper-row1{align-items:center}.stat-data-item{display:flex;justify-content:space-between;align-items:center;padding-bottom:.5rem}.date-row{padding-right:6.5rem;padding-top:1.6rem;padding-left:2rem;text-align:center}@media(max-width: 425px){.date-row{padding-right:2.8rem}}@media(max-width: 425px){.date-row{padding-top:2.8rem}}.first-day-text{line-height:1.2}.first-day-date{font-size:1.6rem;font-weight:700;line-height:1.6}@media(max-width: 425px){.first-day-date{font-size:1rem}}.word-text{font-size:1.2rem;font-weight:700;padding-bottom:.5rem}.stat-data-param{padding-right:1rem;font-family:\\"Open Sans\\",sans-serif;font-size:.9rem}.stat-data-value{font-weight:600;font-size:.9rem}.date-text{font-size:1.2rem;font-weight:700}@media(max-width: 768px){.date-text{width:48%}}@media(max-width: 425px){.date-text{width:100%}}", "",{"version":3,"sources":["webpack://./src/styles/fonts.scss","webpack://./src/styles/components.scss","webpack://./src/styles/variables.scss","webpack://./src/styles/mixins.scss","webpack://./src/styles/modal.scss","webpack://./src/styles/form.scss","webpack://./src/styles/body.scss","webpack://./src/styles/header.scss","webpack://./src/styles/footer.scss","webpack://./src/styles/main.scss","webpack://./src/styles/audio-call.scss","webpack://./src/styles/sprint.scss","webpack://./src/styles/textBook.scss","webpack://./src/styles/userPage.scss","webpack://./src/styles/mainPage.scss","webpack://./src/styles/charts.scss","webpack://./src/styles/statPage.scss"],"names":[],"mappings":"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","sourcesContent":["@import url(\'https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,400;0,500;0,600;0,700;0,800;1,400;1,500&family=Open+Sans:ital,wght@0,400;0,700;1,400&display=swap\');\\r\\n","a {\\r\\n  text-decoration: none;\\r\\n  color: $text-color;\\r\\n}\\r\\n\\r\\n.btn {\\r\\n  @include display-flex-center;\\r\\n  color: $white-color;\\r\\n  background-color: $dark-color;\\r\\n  border: none;\\r\\n  border-radius: 2rem;\\r\\n  font-family: $headers-font;\\r\\n  font-size: 1rem;\\r\\n  padding: 0.5rem 1.2rem;\\r\\n  cursor: pointer;\\r\\n  transition: 0.5s all ease-in-out;\\r\\n  &__disabled {\\r\\n    background-color: transparent;\\r\\n    border: 1px solid $mid-grey;\\r\\n    color: $mid-grey;\\r\\n    pointer-events: none;\\r\\n  }\\r\\n  &:disabled {\\r\\n    background-color: transparent;\\r\\n    border: 1px solid $mid-grey;\\r\\n    color: $mid-grey;\\r\\n    pointer-events: none;\\r\\n  }\\r\\n}\\r\\n\\r\\n.btn-secondary {\\r\\n  @extend .btn;\\r\\n  background-color: $white-color;\\r\\n  border: 2px solid $accent-color;\\r\\n  color: $accent-color;\\r\\n}\\r\\n\\r\\n.video-btn {\\r\\n  padding: 0 1rem 0 0.2rem;\\r\\n  border-color: $white-color;\\r\\n  box-shadow: rgba(0, 0, 0, 0.2) 0px 12px 28px 0px,\\r\\n    rgba(0, 0, 0, 0.1) 0px 2px 4px 0px,\\r\\n    rgba(255, 255, 255, 0.05) 0px 0px 0px 1px inset;\\r\\n  &:hover {\\r\\n    box-shadow: $box-shadow;\\r\\n  }\\r\\n  .video-icon {\\r\\n    font-size: 3rem;\\r\\n    padding-right: 0.5rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.btn-play {\\r\\n  width: 3.5rem;\\r\\n  height: 3.5rem;\\r\\n  padding: 0;\\r\\n  background-color: $white-color;\\r\\n  box-shadow: $box-shadow;\\r\\n}\\r\\n\\r\\n//level buttons\\r\\n.btn-level {\\r\\n  box-shadow: $box-shadow;\\r\\n  border: 2px solid transparent;\\r\\n  &:hover {\\r\\n    background-color: $secondary-color;\\r\\n  }\\r\\n  &.btn-active {\\r\\n    border-color: $accent-color;\\r\\n    color: $dark-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n//level buttons\\r\\n.btn-level {\\r\\n  box-shadow: $box-shadow;\\r\\n}\\r\\n\\r\\n.btn-level-1 {\\r\\n  background-color: $l1;\\r\\n}\\r\\n\\r\\n.btn-level-2 {\\r\\n  background-color: $l2;\\r\\n}\\r\\n\\r\\n.btn-level-3 {\\r\\n  background-color: $l3;\\r\\n}\\r\\n\\r\\n.btn-level-4 {\\r\\n  background-color: $l4;\\r\\n}\\r\\n\\r\\n.btn-level-5 {\\r\\n  background-color: $l5;\\r\\n}\\r\\n\\r\\n.btn-level-6 {\\r\\n  background-color: $l6;\\r\\n}\\r\\n\\r\\n.user-words-btn {\\r\\n  background-color: $accent-color;\\r\\n  color: $secondary-color;\\r\\n  position: relative;\\r\\n  &.btn-active {\\r\\n    background-color: $secondary-color;\\r\\n    color: $accent-color;\\r\\n  }\\r\\n  &::after {\\r\\n    content: \'\\\\ea19\';\\r\\n    position: absolute;\\r\\n    font-family: Material Icons Outlined;\\r\\n    font-size: 1.3rem;\\r\\n    font-weight: 300;\\r\\n    font-style: normal;\\r\\n    background: #ffddb0;\\r\\n    color: #332A7C;\\r\\n    padding: 0.5rem;\\r\\n    box-shadow: 0px 1px 4px 1px rgb(50 50 71 / 15%);\\r\\n    border-radius: 30px;\\r\\n    right: -15px;\\r\\n    top: -6px;\\r\\n  }\\r\\n  &:hover {\\r\\n    color: $accent-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n.btn:disabled {\\r\\n  background-color: transparent;\\r\\n  border: 1px solid $mid-grey;\\r\\n  color: $mid-grey;\\r\\n}\\r\\n\\r\\n.btn-add,\\r\\n.btn-learn {\\r\\n  padding: 0.5rem;\\r\\n  width: 3rem;\\r\\n  height: 3rem;\\r\\n}\\r\\n\\r\\nh1,\\r\\nh2,\\r\\nh3,\\r\\nh4 {\\r\\n  font-family: $headers-font;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n  font-size: 4.7rem;\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    font-size: 3.5rem;\\r\\n  }\\r\\n}\\r\\n\\r\\nh2 {\\r\\n  font-size: 2.4rem;\\r\\n}\\r\\n\\r\\n.user-icon {\\r\\n  background-color: transparent;\\r\\n  font-size: 45px;\\r\\n  border-radius: 50%;\\r\\n  transition: all 0.5s;\\r\\n  &:hover {\\r\\n    background-color: $secondary-color;\\r\\n  }\\r\\n}\\r\\n","$headers-font: \'Montserrat\', sans-serif;\\r\\n$text-font: \'Open Sans\', sans-serif;\\r\\n\\r\\n$dark-color: #191a15;\\r\\n$accent-color: #332A7C;\\r\\n$secondary-color: #ffddb0;\\r\\n$white-color: #ffffff;\\r\\n$mid-grey: #a1a1a1;\\r\\n$light-grey: #d8d8d8;\\r\\n$text-color: #333333;\\r\\n$overlay-color: rgba(41, 41, 41, 0.6);\\r\\n\\r\\n$section-padding: 4.5rem 0;\\r\\n\\r\\n// media\\r\\n$breakpoint-laptop: 1025px;\\r\\n$breakpoint-tablet: 768px;\\r\\n$breakpoint-mobile: 425px;\\r\\n$breakpoint-tablet-vertical: 600px;\\r\\n\\r\\n$learned-word-btn-color: $secondary-color;\\r\\n$hard-word-btn-color: $accent-color;\\r\\n\\r\\n$box-shadow: 0px 1px 4px 1px rgba(50, 50, 71, 0.15);\\r\\n// level colors\\r\\n\\r\\n$l1: #FCFCFF;\\r\\n$l2: #F4F4FF;\\r\\n$l3: #F0F0FF;\\r\\n$l4: #EAEAFF;\\r\\n$l5: #E4E4FF;\\r\\n$l6: #DEDEFF;\\r\\n\\r\\n/*\\r\\n$l1: #ECDCA3;\\r\\n$l2: #CCDFAF;\\r\\n$l3: #ABD8D3;\\r\\n$l4: #96D7E0;\\r\\n$l5: #76ADDA;\\r\\n$l6: #5A78CA;\\r\\n*/","@mixin display-flex-space-between {\\r\\n display: flex;\\r\\n justify-content: space-between;\\r\\n align-items: center;\\r\\n}\\r\\n\\r\\n@mixin display-flex-center {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n@mixin card-style {\\r\\n  padding: 1.2rem;\\r\\n  background: $white-color;\\r\\n  box-shadow: $box-shadow;\\r\\n  border-radius: 30px;\\r\\n}\\r\\n\\r\\n@mixin section-bg-colored {\\r\\n  // background: #FCFCFF;\\r\\n  background-color: $secondary-color;\\r\\n  box-shadow: inset -1px -1px 3px rgba(255, 255, 255, 0.75), inset 1px 1px 2px rgba(7, 7, 69, 0.15);\\r\\n  border-radius: 30px;\\r\\n}",".modal-overlay {\\r\\n  font-family: $headers-font;\\r\\n  position: fixed;\\r\\n  left: 0;\\r\\n  top: 0;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  background-color: $overlay-color;\\r\\n  cursor: pointer;\\r\\n  z-index: 5;\\r\\n  &:hover .modal-close-btn {\\r\\n    background-color: $dark-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n.modal-wrapper {\\r\\n  position: absolute;\\r\\n  width: 50%;\\r\\n  height: auto;\\r\\n  z-index: 6;\\r\\n  cursor: default;\\r\\n  background-color: $white-color;\\r\\n  padding: 3rem;\\r\\n  border-radius: 1rem;\\r\\n}\\r\\n\\r\\n.modal-close-btn {\\r\\n  @include display-flex-center;\\r\\n  width: 52px;\\r\\n  height: 52px;\\r\\n  position: absolute;\\r\\n  right: -52px;\\r\\n  top: -52px;\\r\\n  border-radius: 50px;\\r\\n  cursor: pointer;\\r\\n  transition: 0.3s ease-in-out;\\r\\n  z-index: 6;\\r\\n  &:hover {\\r\\n    background-color: $white-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n.modal_wrapper:hover .modal-close-btn {\\r\\n  background-color: transparent;\\r\\n}\\r\\n\\r\\n.modal-err-message {\\r\\n  text-align: center;\\r\\n  padding-bottom: 1.2rem;\\r\\n  color: red;\\r\\n}\\r\\n\\r\\n.modal-message {\\r\\n  color: $accent-color;\\r\\n  text-align: center;\\r\\n  font-size: 1.2rem;\\r\\n  font-weight: 600;\\r\\n}",".form-wrapper {\\r\\n  form {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    flex-wrap: nowrap;\\r\\n    align-content: center;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    row-gap: 1.5rem;\\r\\n  }\\r\\n  .input-wrapper {\\r\\n    width: 90%;\\r\\n    text-align: center;\\r\\n  }\\r\\n  input {\\r\\n  height: 3rem;\\r\\n  width: 100%;\\r\\n  border-bottom: 1px solid;\\r\\n  padding: 0 0.5rem;\\r\\n  font-size: 1.2rem;\\r\\n  font-family: $headers-font;\\r\\n  &:focus-visible {\\r\\n    outline: none;\\r\\n    }\\r\\n  }\\r\\n  .btn-submit {\\r\\n    margin-top: 1rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.error-message, .error-in-form {\\r\\n  color: red;\\r\\n}\\r\\n","*,\\r\\n*:before,\\r\\n*:after {\\r\\n  padding: 0;\\r\\n  margin: 0;\\r\\n  border: 0;\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.body {\\r\\n  font-family: $text-font;\\r\\n  font-size: 16px;\\r\\n  color: $text-color;\\r\\n  margin: 0 auto;\\r\\n  padding: 0 2.5rem;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-content: stretch;\\r\\n  flex-wrap: nowrap;\\r\\n  max-width: 1440px;\\r\\n  min-height: 100vh;\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    padding: 0 1rem;\\r\\n  }\\r\\n}\\r\\n",".header {\\r\\n  @include display-flex-space-between;\\r\\n  font-family: $headers-font;\\r\\n  font-weight: 400;\\r\\n  font-size: 1rem;\\r\\n  line-height: 1.2;\\r\\n  height: 75px;\\r\\n  margin: auto;\\r\\n  width: 100%;\\r\\n  // border-bottom: 1px solid $light-grey;\\r\\n  z-index: 1;\\r\\n  padding: 0 2rem;\\r\\n}\\r\\n\\r\\n.logo {\\r\\n  font-size: 1.5rem;\\r\\n  line-height: 1.4;\\r\\n  font-weight: 800;\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    line-height: 1.1;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    font-size: 1.2rem;\\r\\n    line-height: 1.1;\\r\\n  }\\r\\n}\\r\\n\\r\\n.header-menu {\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    position: fixed;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    width: 320px;\\r\\n    height: 100vh;\\r\\n    top: 0;\\r\\n    background-color: $white-color;\\r\\n    right: -320px;\\r\\n    z-index: 2;\\r\\n    font-size: 32px;\\r\\n    line-height: 51.2px;\\r\\n    overflow-x: hidden;\\r\\n    transition: all 0.8s ease-in-out;\\r\\n  }\\r\\n}\\r\\n\\r\\n.menu-items {\\r\\n  @include display-flex-center;\\r\\n  list-style: none;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n    line-height: 48px;\\r\\n    gap: 43px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.menu-item-link {\\r\\n  cursor: pointer;\\r\\n  font-weight: 600;\\r\\n  padding: 29px;\\r\\n  &:hover {\\r\\n    border-bottom: 2px solid $dark-color;\\r\\n    padding-bottom: 27px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.auth {\\r\\n  @include display-flex-center;\\r\\n  gap: 1rem;\\r\\n}\\r\\n\\r\\n.burger-icon {\\r\\n  display: none;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    display: inline-block;\\r\\n    position: relative;\\r\\n    width: 30px;\\r\\n    height: 22px;\\r\\n    margin: 0 1rem;\\r\\n    z-index: 9;\\r\\n    cursor: pointer;\\r\\n    transition: 0.5s;\\r\\n  }\\r\\n}\\r\\n\\r\\n.burger-line {\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    display: inline-block;\\r\\n    position: absolute;\\r\\n    background-color: $dark-color;\\r\\n    height: 2px;\\r\\n    width: 100%;\\r\\n    top: 50%;\\r\\n    transform: translateY(-50%);\\r\\n    &::before {\\r\\n      display: inline-block;\\r\\n      position: absolute;\\r\\n      background-color: $dark-color;\\r\\n      height: 2px;\\r\\n      width: 100%;\\r\\n      top: 50%;\\r\\n      transform: translateY(-50%);\\r\\n      content: \\"\\";\\r\\n      margin-top: 10px;\\r\\n      background-color: $dark-color;\\r\\n    }\\r\\n    &::after {\\r\\n      display: inline-block;\\r\\n      position: absolute;\\r\\n      background-color: $dark-color;\\r\\n      height: 2px;\\r\\n      width: 100%;\\r\\n      top: 50%;\\r\\n      transform: translateY(-50%);\\r\\n      content: \\"\\";\\r\\n      margin-top: -10px;\\r\\n      background-color: $dark-color;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.clicked {\\r\\n  transform: rotate(90deg);\\r\\n  z-index: 99;\\r\\n}\\r\\n\\r\\n.opened {\\r\\n  right: 0;\\r\\n}\\r\\n",".footer {\\r\\n  @include display-flex-space-between;\\r\\n  font-family: $headers-font;\\r\\n  font-weight: 400;\\r\\n  font-size: 0.9rem;\\r\\n  line-height: 1.1;\\r\\n  min-height: 90px;\\r\\n  margin: auto;\\r\\n  width: 100%;\\r\\n  background-color: $dark-color;\\r\\n  color: $white-color;\\r\\n  padding: 0 20px;\\r\\n  flex-wrap: wrap;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    flex-direction: column;\\r\\n    gap: 1rem;\\r\\n    padding: 0.5rem 0;\\r\\n  }\\r\\n}\\r\\n\\r\\n.team-github {\\r\\n  @include display-flex-center;\\r\\n  flex-wrap: wrap;\\r\\n  gap: 1rem;\\r\\n  a {\\r\\n    color: $white-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n.rs-logo img {\\r\\n  width: 7rem;\\r\\n}\\r\\n",".main {\\r\\n  flex-grow: 1;\\r\\n}\\r\\n",".audio-call {\\r\\n  position: absolute;\\r\\n  width: 100%;\\r\\n  height: 100vh;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  right: 0;\\r\\n  /* height: calc(100vh - 75px); */\\r\\n  background: linear-gradient(180deg, #7d5db0, #b06d9a 72%, #c584a4);\\r\\n  color: hsla(0deg, 0%, 100%, 0.7);\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  // justify-content: center;\\r\\n  /* max-width: 1440px; */\\r\\n  margin: 0 auto;\\r\\n  flex-direction: column;\\r\\n  padding: 80px 10px 0 10px;\\r\\n  .container {\\r\\n    margin: 0 auto;\\r\\n    width: 100%;\\r\\n    max-width: 1250px;\\r\\n  }\\r\\n\\r\\n  .level-select {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    row-gap: 2rem;\\r\\n  }\\r\\n  .select-block {\\r\\n    text-align: center;\\r\\n    @media screen and (max-width: 1030px) {\\r\\n      max-width: 500px;\\r\\n    }\\r\\n    .select-block__title {\\r\\n      padding: 1rem;\\r\\n    }\\r\\n  }\\r\\n  .selected {\\r\\n    color: hsla(0deg, 0%, 100%);\\r\\n    border: 1px solid hsla(0deg, 0%, 100%);\\r\\n  }\\r\\n\\r\\n  a,\\r\\n  button {\\r\\n    margin: 0.2rem;\\r\\n    border: 1px solid hsla(0deg, 0%, 100%, 0.2);\\r\\n    border-radius: 3px;\\r\\n    cursor: pointer;\\r\\n    display: inline-block;\\r\\n    line-height: 1;\\r\\n    color: inherit;\\r\\n    min-width: 162px;\\r\\n    padding: 19px 15px 21px;\\r\\n    transition: all 0.15s ease;\\r\\n    background-color: transparent;\\r\\n    &:hover {\\r\\n      color: hsla(0deg, 0%, 100%);\\r\\n      border: 1px solid hsla(0deg, 0%, 100%);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .stage {\\r\\n    text-align: center;\\r\\n  }\\r\\n\\r\\n  .stage__img {\\r\\n    border-radius: 50%;\\r\\n    height: 13rem;\\r\\n    width: 13rem;\\r\\n    margin: 1rem auto;\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .answers {\\r\\n    margin: 3rem 0;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    flex-wrap: wrap;\\r\\n    justify-content: center;\\r\\n    gap: 2rem;\\r\\n  }\\r\\n\\r\\n  .answer {\\r\\n    font-size: 1.5rem;\\r\\n    display: flex;\\r\\n    gap: 0.5rem;\\r\\n    cursor: pointer;\\r\\n    & :hover {\\r\\n      color: hsla(0deg, 0%, 100%);\\r\\n    }\\r\\n    .checked {\\r\\n      color: green;\\r\\n      border: 1px solid;\\r\\n      border-radius: 50%;\\r\\n      height: 2rem;\\r\\n      width: 2rem;\\r\\n      line-height: 2rem;\\r\\n      font-size: 1.5rem;\\r\\n      background-color: #b7d693;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .word {\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    font-size: 2.5rem;\\r\\n  }\\r\\n\\r\\n  .speaker-button {\\r\\n    border: none;\\r\\n    border-radius: 50%;\\r\\n    &:hover {\\r\\n      border: none;\\r\\n    }\\r\\n    svg {\\r\\n      padding: 0.2rem;\\r\\n      &:hover {\\r\\n        path {\\r\\n          fill: #3c3e3d !important;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    padding: 0;\\r\\n    margin: 0;\\r\\n    min-width: 0px;\\r\\n    border-color: transparent;\\r\\n  }\\r\\n\\r\\n  .speaker-button_min {\\r\\n    padding: 0 1rem;\\r\\n    svg {\\r\\n      width: 3rem;\\r\\n      height: 3rem;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .game__result {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    background-color: #ffffff;\\r\\n    border: 1px solid #e6e9ee;\\r\\n    border-radius: 8px;\\r\\n    box-sizing: border-box;\\r\\n    max-width: 500px;\\r\\n    min-height: 646px;\\r\\n    padding: 42px 16px;\\r\\n    text-align: center;\\r\\n    width: 100%;\\r\\n  }\\r\\n\\r\\n  .result__score {\\r\\n    color: #37383c;\\r\\n    font-size: 34px;\\r\\n    font-weight: 300;\\r\\n    align-self: center;\\r\\n  }\\r\\n\\r\\n  .game__lists {\\r\\n    margin-top: 30px;\\r\\n  }\\r\\n\\r\\n  .result__true,\\r\\n  .result__false {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: flex-start;\\r\\n    font-size: 12px;\\r\\n    font-weight: 700;\\r\\n    line-height: 1.33;\\r\\n    text-transform: uppercase;\\r\\n    list-style: none;\\r\\n  }\\r\\n\\r\\n  .result__true {\\r\\n    color: #28c38a;\\r\\n    margin: 1rem 0;\\r\\n  }\\r\\n\\r\\n  .result__false {\\r\\n    color: #ed593b;\\r\\n  }\\r\\n\\r\\n  .result__word {\\r\\n    display: flex;\\r\\n    gap: 10px;\\r\\n    align-items: center;\\r\\n    color: #37383c;\\r\\n    font-size: 16px;\\r\\n    line-height: 1.25;\\r\\n    text-transform: lowercase;\\r\\n    font-weight: 500;\\r\\n    margin-top: 5px;\\r\\n  }\\r\\n\\r\\n  .result__word-en {\\r\\n    font-weight: 700;\\r\\n  }\\r\\n\\r\\n  .result__voice {\\r\\n    width: 33px;\\r\\n    height: 33px;\\r\\n    cursor: pointer;\\r\\n    svg {\\r\\n      width: 2rem;\\r\\n      height: 2rem;\\r\\n    }\\r\\n  }\\r\\n  .close-button {\\r\\n    border-radius: 50%;\\r\\n    width: 4rem;\\r\\n    height: 4rem;\\r\\n    text-align: center;\\r\\n    line-height: 22px;\\r\\n    font-size: 2rem;\\r\\n    min-width: min-content;\\r\\n  }\\r\\n\\r\\n  .mute-button {\\r\\n    margin: 4px;\\r\\n    font-size: 3rem;\\r\\n  }\\r\\n\\r\\n  .result__button {\\r\\n    margin-top: 1rem;\\r\\n    border: 2px solid #28c38a;\\r\\n    color: #3c3e3d;\\r\\n    font-size: 1.2rem;\\r\\n    &:hover {\\r\\n      background-color: #28c38a;\\r\\n      border: 2px solid #28c38a;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  .buttons-wrapper {\\r\\n    width: 100%;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: space-between;\\r\\n  }\\r\\n}\\r\\n",".body {\\r\\n  &--sprint {\\r\\n    position: relative;\\r\\n    max-width: 100%;\\r\\n    min-height: 100vh;\\r\\n    padding: 0;\\r\\n    background-color: #0d3848;\\r\\n    background-image: url(\\"./assets/sprint/sprint-bg-bottom.svg\\"),\\r\\n      url(\\"./assets/sprint/sprint-bg-left.svg\\"),\\r\\n      url(\\"./assets/sprint/sprint-bg-right.svg\\");\\r\\n    background-repeat: no-repeat, no-repeat, no-repeat;\\r\\n    background-size: 100%, auto, auto;\\r\\n    background-position: bottom, 0 0, 100% 0;\\r\\n\\r\\n    h2 {\\r\\n      font-size: 24px;\\r\\n    }\\r\\n\\r\\n    .header {\\r\\n      position: absolute;\\r\\n      top: 0;\\r\\n      max-width: 1360px;\\r\\n      padding: 0 2rem;\\r\\n      background-color: transparent;\\r\\n      z-index: 10;\\r\\n      align-self: center;\\r\\n      color: #ffffff;\\r\\n      border: none;\\r\\n    }\\r\\n\\r\\n    .logo {\\r\\n      a {\\r\\n        color: #ffffff;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .menu-item-link {\\r\\n      color: #ffffff;\\r\\n\\r\\n      &:hover {\\r\\n        border-bottom: 2px solid #ffffff;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .btn-secondary {\\r\\n      color: #000000;\\r\\n    }\\r\\n\\r\\n    .enter-cabinet-link {\\r\\n      color: #ffffff;\\r\\n    }\\r\\n\\r\\n    .main {\\r\\n      padding: 75px 0;\\r\\n      display: flex;\\r\\n      min-height: 100vh;\\r\\n    }\\r\\n\\r\\n    .footer {\\r\\n      display: none;\\r\\n    }\\r\\n\\r\\n    .burger-line {\\r\\n      background-color: #ffffff;\\r\\n      &::after {\\r\\n        background-color: #ffffff;\\r\\n      }\\r\\n      &::before {\\r\\n        background-color: #ffffff;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    .opened {\\r\\n      background-color: #0d3848;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.sprint {\\r\\n  position: relative;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  padding: 20px 0;\\r\\n  color: #ffffff;\\r\\n  width: 100%;\\r\\n\\r\\n  .sprint__select-title {\\r\\n    font-size: 2.4rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.sprint__select {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  min-width: 50%;\\r\\n}\\r\\n\\r\\n.sprint__select-descr {\\r\\n  margin-top: 2rem;\\r\\n}\\r\\n\\r\\n.sprint__select-text {\\r\\n  margin-top: 2rem;\\r\\n}\\r\\n\\r\\n.sprint__levels {\\r\\n  margin-top: 20px;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  width: 100%;\\r\\n  gap: 0.4rem;\\r\\n}\\r\\n\\r\\n.sprint__level {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  box-sizing: border-box;\\r\\n  width: 162px;\\r\\n  height: 55px;\\r\\n  border-radius: 3px;\\r\\n  border: 1px solid #ffffff;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.sprint__close {\\r\\n  position: absolute;\\r\\n  top: 10px;\\r\\n  right: 20px;\\r\\n  width: 40px;\\r\\n  height: 40px;\\r\\n  border-radius: 40px;\\r\\n  z-index: 1;\\r\\n  margin: 20px auto;\\r\\n  cursor: pointer;\\r\\n\\r\\n  &::before {\\r\\n    content: \\"+\\";\\r\\n    color: #ffffff;\\r\\n    position: absolute;\\r\\n    z-index: 2;\\r\\n    transform: rotate(45deg);\\r\\n    font-size: 50px;\\r\\n    line-height: 1;\\r\\n    top: -5px;\\r\\n    left: 6px;\\r\\n    transition: all 0.3s cubic-bezier(0.77, 0, 0.2, 0.85);\\r\\n  }\\r\\n\\r\\n  &::after {\\r\\n    content: \\"\\";\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    left: 0;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    border-radius: 100%;\\r\\n    background: #ffffff;\\r\\n    z-index: 1;\\r\\n    transition: all 0.3s cubic-bezier(0.77, 0, 0.2, 0.85);\\r\\n    transform: scale(0.01);\\r\\n  }\\r\\n}\\r\\n\\r\\n.sprint__close:hover:after {\\r\\n  transform: scale(1);\\r\\n}\\r\\n\\r\\n.sprint__close:hover:before {\\r\\n  transform: scale(0.8) rotate(45deg);\\r\\n  color: #0d3848;\\r\\n}\\r\\n\\r\\n.timer {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.timer__time {\\r\\n  font-size: 30px;\\r\\n  font-weight: lighter;\\r\\n  width: 160px;\\r\\n  position: absolute;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n.timer__svg {\\r\\n  transform: rotate(90deg) scaleX(-1);\\r\\n}\\r\\n\\r\\n.circle_animation {\\r\\n  stroke-dasharray: 440;\\r\\n  stroke-dashoffset: 0;\\r\\n  transition: all 1s linear;\\r\\n}\\r\\n\\r\\n.sprint__ready {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n}\\r\\n\\r\\n.timer--control {\\r\\n  position: absolute;\\r\\n  top: 20px;\\r\\n  left: 20px;\\r\\n}\\r\\n\\r\\n.sprint__control {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.control__sound {\\r\\n  position: absolute;\\r\\n  right: 0;\\r\\n  width: 23px;\\r\\n  height: 24px;\\r\\n  background-image: url(\\"./assets/sprint/sound-default.svg\\");\\r\\n  background-repeat: no-repeat;\\r\\n  cursor: pointer;\\r\\n\\r\\n  &--off {\\r\\n    background-image: url(\\"./assets/sprint/sound-mute.svg\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n.control__container {\\r\\n  position: relative;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  width: 500px;\\r\\n  padding: 30px;\\r\\n  margin-top: 10px;\\r\\n  border: 1px solid #ffffff;\\r\\n  border-radius: 10px;\\r\\n  background-color: hsla(0, 0%, 100%, 0.06);\\r\\n}\\r\\n\\r\\n.control__voice {\\r\\n  position: absolute;\\r\\n  right: 20px;\\r\\n  top: 20px;\\r\\n  width: 33px;\\r\\n  height: 33px;\\r\\n  background-image: url(\\"./assets/sprint/voice.svg\\");\\r\\n  background-repeat: no-repeat;\\r\\n  background-position: center;\\r\\n  cursor: pointer;\\r\\n\\r\\n  &:hover {\\r\\n    background-image: url(\\"./assets/sprint/voice-hover.svg\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n.control__series-list {\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  gap: 20px;\\r\\n}\\r\\n\\r\\n.control__series {\\r\\n  width: 26px;\\r\\n  height: 26px;\\r\\n  border-radius: 50%;\\r\\n  background-image: url(\\"./assets/sprint/circle-empty.svg\\");\\r\\n  background-position: 50%;\\r\\n  background-repeat: no-repeat;\\r\\n  background-size: contain;\\r\\n\\r\\n  &--active {\\r\\n    background-image: url(\\"./assets/sprint/true-series.svg\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n.control__multiply {\\r\\n  margin-top: 10px;\\r\\n}\\r\\n\\r\\n.control__parrots {\\r\\n  display: flex;\\r\\n  width: 204px;\\r\\n  height: 57px;\\r\\n  margin-top: 30px;\\r\\n  background-image: url(\\"./assets/sprint/branch.svg\\");\\r\\n  background-repeat: no-repeat;\\r\\n  background-position: bottom;\\r\\n}\\r\\n\\r\\n.control__parrot {\\r\\n  position: relative;\\r\\n  top: 6px;\\r\\n}\\r\\n\\r\\n.control__word-en {\\r\\n  font-size: 36px;\\r\\n  margin-top: 20px;\\r\\n}\\r\\n\\r\\n.control__word-ru {\\r\\n  font-size: 24px;\\r\\n  color: hsla(0, 0%, 100%, 0.6);\\r\\n}\\r\\n\\r\\n.control__buttons {\\r\\n  display: flex;\\r\\n  gap: 20px;\\r\\n  margin-top: 40px;\\r\\n  padding-bottom: 40px;\\r\\n}\\r\\n\\r\\n.control__button {\\r\\n  position: relative;\\r\\n  border-radius: 4px;\\r\\n  color: #fff;\\r\\n  font-size: 20px;\\r\\n  font-weight: 400;\\r\\n  height: 50px;\\r\\n  text-align: center;\\r\\n  width: 183px;\\r\\n  cursor: pointer;\\r\\n\\r\\n  &::before {\\r\\n    bottom: -45px;\\r\\n    color: #7e919f;\\r\\n    display: block;\\r\\n    font-size: 28px;\\r\\n    position: absolute;\\r\\n  }\\r\\n\\r\\n  &--false {\\r\\n    background-color: #ed593b;\\r\\n\\r\\n    &::before {\\r\\n      content: \\"←\\";\\r\\n      left: 40%;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  &--true {\\r\\n    background-color: #28c38a;\\r\\n\\r\\n    &::before {\\r\\n      content: \\"→\\";\\r\\n      right: 40%;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n.sprint__result {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  background-color: #ffffff;\\r\\n  border: 1px solid #e6e9ee;\\r\\n  border-radius: 8px;\\r\\n  box-sizing: border-box;\\r\\n  max-width: 500px;\\r\\n  max-height: 500px;\\r\\n  padding: 42px 16px;\\r\\n  text-align: center;\\r\\n  width: 100%;\\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n.result__score {\\r\\n  color: #37383c;\\r\\n  font-size: 34px;\\r\\n  font-weight: 300;\\r\\n  align-self: center;\\r\\n}\\r\\n\\r\\n.sprint__lists {\\r\\n  margin-top: 30px;\\r\\n}\\r\\n\\r\\n.result__true,\\r\\n.result__false {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: flex-start;\\r\\n  font-size: 12px;\\r\\n  font-weight: 700;\\r\\n  line-height: 1.33;\\r\\n  text-transform: uppercase;\\r\\n  list-style: none;\\r\\n}\\r\\n\\r\\n.result__true {\\r\\n  color: #28c38a;\\r\\n  margin-top: 20px;\\r\\n}\\r\\n\\r\\n.result__false {\\r\\n  color: #ed593b;\\r\\n}\\r\\n\\r\\n.result__word {\\r\\n  display: flex;\\r\\n  gap: 10px;\\r\\n  align-items: center;\\r\\n  color: #37383c;\\r\\n  font-size: 16px;\\r\\n  line-height: 1.25;\\r\\n  text-transform: lowercase;\\r\\n  font-weight: 500;\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.result__word-en {\\r\\n  font-weight: 700;\\r\\n}\\r\\n\\r\\n.result__voice {\\r\\n  width: 33px;\\r\\n  height: 33px;\\r\\n  background-image: url(\\"./assets/sprint/voice-grey.svg\\");\\r\\n  background-repeat: no-repeat;\\r\\n  background-position: center;\\r\\n  cursor: pointer;\\r\\n\\r\\n  &:hover {\\r\\n    background-image: url(\\"./assets/sprint/voice-hover.svg\\");\\r\\n  }\\r\\n}\\r\\n\\r\\n.result__restart-btn {\\r\\n  background-color: rgba(37, 130, 231, 0.08);\\r\\n  border-radius: 4px;\\r\\n  color: #2582e7;\\r\\n  cursor: pointer;\\r\\n  font-size: 14px;\\r\\n  font-weight: 600;\\r\\n  line-height: 1.43;\\r\\n  margin-top: 24px;\\r\\n  padding: 10px 42px;\\r\\n  text-align: center;\\r\\n\\r\\n  &:hover {\\r\\n    background-color: rgba(37, 130, 231, 0.12);\\r\\n  }\\r\\n}\\r\\n\\r\\n.sprint__restart-message {\\r\\n  font-size: 14px;\\r\\n  width: 60%;\\r\\n  color: #ed593b;\\r\\n  margin-top: 10px;\\r\\n}\\r\\n",".textbook {\\r\\n  display: flex;\\r\\n  position: relative;\\r\\n  align-items: stretch;\\r\\n  width: 100%;\\r\\n  margin-top: -2px;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    flex-direction: column;\\r\\n  }\\r\\n}\\r\\n\\r\\n.aside {\\r\\n  padding: 2rem 1rem;\\r\\n  width: 15%;\\r\\n  flex-shrink: 0;\\r\\n  font-family: $headers-font;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    width: 100%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    padding: 1rem 0.2rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.sidebar-content {\\r\\n  position: -webkit-sticky;\\r\\n  position: sticky;\\r\\n  top: 0;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  padding-right: 1.5rem;\\r\\n  // border-right: 1px solid $light-grey;\\r\\n  gap: 0.7rem;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    flex-direction: row;\\r\\n    flex-wrap: wrap;\\r\\n    justify-content: flex-start;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    gap: 0.3rem;\\r\\n    padding: 0;\\r\\n    justify-content: center;\\r\\n    row-gap: 1.8rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.sidebar-text {\\r\\n  font-size: 1.2rem;\\r\\n  font-weight: 600;\\r\\n  text-align: center;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    font-size: 1rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    display: none;\\r\\n  }\\r\\n}\\r\\n\\r\\n.btn-level {\\r\\n  @include display-flex-center;\\r\\n  height: 5.6rem;\\r\\n  width: 5.6rem;\\r\\n  border-radius: 50%;\\r\\n  padding: 2.5rem;\\r\\n  font-size: 2.5rem;\\r\\n  font-weight: 700;\\r\\n  cursor: pointer;\\r\\n  transition: 0.3s ease-in-out;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    height: 3.2rem;\\r\\n    width: 3.2rem;\\r\\n    padding: 0;\\r\\n    font-size: 1.5rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.userbook-mark {\\r\\n  display: flex;\\r\\n  position: absolute;\\r\\n  bottom: 3.8rem;\\r\\n  right: 2.4rem;\\r\\n  background: $secondary-color;\\r\\n  color: $accent-color;\\r\\n  border-radius: 30px;\\r\\n  padding: 0.5rem;\\r\\n  box-shadow: $box-shadow;\\r\\n  .material-icons-outlined {\\r\\n    font-size: 1.3rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    bottom: 2rem;\\r\\n    right: 1rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    right: 9.1rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.text-book-page {\\r\\n  @include section-bg-colored;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  padding: 0 2.5rem 1.5rem;\\r\\n  width: 85%;\\r\\n  border: 3px solid #ffffff;\\r\\n  margin-bottom: 1.5rem;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n   width: 100%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    padding: 1rem;\\r\\n   }\\r\\n}\\r\\n\\r\\n.text-book-page-head {\\r\\n  display: flex;\\r\\n  padding: 2.5rem;\\r\\n  align-items: center;\\r\\n  gap: 1.5rem;\\r\\n  margin-right: auto;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    padding: 2.5rem 1.2rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    flex-direction: column;\\r\\n    gap: 0.5rem;\\r\\n    padding: 1.5rem;\\r\\n    margin: 0;\\r\\n  }\\r\\n}\\r\\n\\r\\n.cards-wrapper {\\r\\n  display: flex;\\r\\n  flex-direction: row;\\r\\n  justify-content: space-around;\\r\\n  flex-wrap: wrap;\\r\\n  row-gap: 1rem;\\r\\n}\\r\\n\\r\\n.card {\\r\\n  @include card-style;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  width: 32rem;\\r\\n  height: 25rem;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n  }\\r\\n}\\r\\n\\r\\n.card-main-info-wrapper {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  font-family: $headers-font;\\r\\n  padding-bottom: 1.5rem;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    flex-direction: column;\\r\\n    padding-bottom: 1rem;\\r\\n   }\\r\\n}\\r\\n\\r\\n.btn-play {\\r\\n  margin-left: -2rem;\\r\\n  &:hover {\\r\\n    background-color: $secondary-color;\\r\\n  }\\r\\n  svg {\\r\\n    width: 25px;\\r\\n    height: 25px;\\r\\n    path {\\r\\n      fill: $dark-color;\\r\\n      stroke: $dark-color;\\r\\n    }\\r\\n    &:hover {\\r\\n      fill: $accent-color;\\r\\n      path {\\r\\n        fill: $accent-color;\\r\\n        stroke: $accent-color;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    margin-left: 0;\\r\\n    margin-top: -2rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.card-img {\\r\\n  width: 10rem;\\r\\n  height: 8rem;\\r\\n  border-radius: 30px;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n    height: 10rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.card-word-info {\\r\\n  padding-left: 0.8rem;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    text-align: center;\\r\\n  }\\r\\n}\\r\\n\\r\\n.word {\\r\\n  font-size: 1.8rem;\\r\\n  font-weight: 700;\\r\\n}\\r\\n\\r\\n.word-transcription {\\r\\n  font-size: 1rem;\\r\\n  color: $mid-grey;\\r\\n  padding-bottom: 0.8rem;\\r\\n}\\r\\n\\r\\n.word-translate {\\r\\n  font-size: 1.3rem;\\r\\n}\\r\\n\\r\\n.user-btns {\\r\\n  margin-left: auto;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  gap: 0.5rem;\\r\\n  align-items: center;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    flex-direction: row;\\r\\n    margin: auto;\\r\\n    padding-top: 1rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.answers {\\r\\n  font-size: 0.8rem;\\r\\n}\\r\\n\\r\\n.hard-word-btn {\\r\\n  border-color: $accent-color;\\r\\n  background-color: $accent-color;\\r\\n  .btn-icon {\\r\\n    color: $secondary-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n.learn-word-btn {\\r\\n  border-color: $secondary-color;\\r\\n  background-color: $secondary-color;\\r\\n  .btn-icon {\\r\\n    color: $accent-color;\\r\\n  }\\r\\n}\\r\\n\\r\\n.word-mean-translate, .word-ex-translate {\\r\\n  color: $mid-grey;\\r\\n  line-height: 1.6;\\r\\n  font-style: italic;\\r\\n}\\r\\n\\r\\n.word-mean-translate {\\r\\n  padding-bottom: 1rem;\\r\\n}\\r\\n\\r\\n.pagination {\\r\\n  @include display-flex-center;\\r\\n  padding: 2.5rem 1rem 0;\\r\\n}\\r\\n\\r\\n.page-input {\\r\\n  margin: 0 3rem;\\r\\n  width: 2rem;\\r\\n  font-size: 1.5rem;\\r\\n  font-weight: 600;\\r\\n  font-family: $headers-font;\\r\\n  border-bottom: 1px solid;\\r\\n  text-align: center;\\r\\n  &:focus-visible {\\r\\n    outline: none;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    margin: 0 0.5rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n/* Chrome, Safari, Edge, Opera */\\r\\n.page-input::-webkit-outer-spin-button,\\r\\n.page-input::-webkit-inner-spin-button {\\r\\n  -webkit-appearance: none;\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n/* Firefox */\\r\\n.page-input {\\r\\n  -moz-appearance: textfield;\\r\\n}",".user-page {\\r\\n  @include section-bg-colored;\\r\\n  background-color: $l2;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  padding: 2rem 1rem 1rem;\\r\\n  gap: 1.5rem;\\r\\n  \\r\\n}\\r\\n\\r\\n.user-sidebar {\\r\\n  display: flex;\\r\\n  gap: 1.5rem;\\r\\n  flex-direction: column;\\r\\n  width: 36%;\\r\\n  padding: 2.5rem 1.5rem 1.5rem;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n    padding: 0 1rem 1.5rem;\\r\\n    align-items: center;\\r\\n  }\\r\\n}\\r\\n\\r\\n.user-section {\\r\\n  display: flex;\\r\\n  padding-bottom: 1rem;\\r\\n  gap: 2.5rem;\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    gap: 0;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    flex-direction: column;\\r\\n  }\\r\\n}\\r\\n\\r\\n.enter-cabinet-link {\\r\\n  color: $dark-color;\\r\\n  font-weight: 600;\\r\\n}\\r\\n\\r\\n.exit-cabinet-btn {\\r\\n  width: 10rem;\\r\\n}",".hero-section {\\r\\n  @include display-flex-center;\\r\\n  flex-direction: column;\\r\\n  padding: 3rem;\\r\\n  background: center / cover no-repeat url(\\"./assets/main-bg1.jpg\\");\\r\\n  border-radius: 30px;\\r\\n  @media (max-width: $breakpoint-laptop) {\\r\\n    padding: 1.5rem;\\r\\n    padding-top: 2.5rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    padding: 3.5rem 2rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    padding: 2.5rem 1.5rem;\\r\\n  }\\r\\n  box-shadow: inset -1px -1px 3px rgba(255, 255, 255, 0.75),\\r\\n    inset 1px 1px 2px rgba(7, 7, 69, 0.15);\\r\\n}\\r\\n\\r\\n.hero-section-header {\\r\\n  width: 50%;\\r\\n  text-align: center;\\r\\n  line-height: 1;\\r\\n  padding-bottom: 2rem;\\r\\n  @media (max-width: $breakpoint-laptop) {\\r\\n    width: 60%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    width: 100%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.hero-section-text {\\r\\n  text-align: center;\\r\\n  width: 60%;\\r\\n  padding-bottom: 1.5rem;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.advantages-section {\\r\\n  display: flex;\\r\\n  padding: 0;\\r\\n  margin-top: 4.5rem;\\r\\n  gap: 1rem;\\r\\n  flex-wrap: wrap;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n.advantage_wrapper {\\r\\n  @include card-style;\\r\\n  text-align: center;\\r\\n  padding: 1rem;\\r\\n  width: 23%;\\r\\n  @media (max-width: $breakpoint-laptop) {\\r\\n    width: 48%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.advantage-header {\\r\\n  position: relative;\\r\\n  font-size: 2rem;\\r\\n  padding-bottom: 1rem;\\r\\n  padding-top: 1rem;\\r\\n  &::after {\\r\\n    position: absolute;\\r\\n    content: \\"\\";\\r\\n    height: 2px;\\r\\n    background-color: $dark-color;\\r\\n    width: 30%;\\r\\n    bottom: 0;\\r\\n    left: 34.5%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.advantage-image {\\r\\n  width: 100%;\\r\\n  border-radius: 30px;\\r\\n}\\r\\n\\r\\n.advantage-text {\\r\\n  padding-top: 1rem;\\r\\n  padding-bottom: 1rem;\\r\\n}\\r\\n\\r\\n.info-section {\\r\\n  @include display-flex-space-between;\\r\\n  padding: $section-padding;\\r\\n}\\r\\n\\r\\n.info-text-wrapper {\\r\\n  width: 40%;\\r\\n  padding: 0 4.5rem;\\r\\n}\\r\\n\\r\\n.info-header {\\r\\n  font-size: 1.5rem;\\r\\n  padding-bottom: 2rem;\\r\\n}\\r\\n\\r\\n.info-text {\\r\\n  list-style: none;\\r\\n  padding-bottom: 0.7rem;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.info-text-icon {\\r\\n  padding-right: 0.5rem;\\r\\n}\\r\\n\\r\\n.info-image {\\r\\n  @include section-bg-colored;\\r\\n  background: center / cover no-repeat url(\\"./assets/info-section2.jpg\\");\\r\\n  width: 50%;\\r\\n  height: 25rem;\\r\\n}\\r\\n\\r\\n.team-section {\\r\\n  // @include section-bg-colored;\\r\\n  padding: $section-padding;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  flex-direction: column;\\r\\n  margin-bottom: 2.5rem;\\r\\n}\\r\\n\\r\\n.team-section-header {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.team-members {\\r\\n  display: flex;\\r\\n  gap: 1.5rem;\\r\\n  padding-top: 2.5rem;\\r\\n  flex-wrap: wrap;\\r\\n  justify-content: center;\\r\\n  @media (max-width: $breakpoint-laptop) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.team-member {\\r\\n  @include card-style;\\r\\n  padding: 1rem;\\r\\n  width: 30%;\\r\\n  display: flex;\\r\\n  justify-content: flex-start;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  @media (max-width: $breakpoint-tablet-vertical) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.team-member-name {\\r\\n  font-size: 1.6rem;\\r\\n  padding: 1rem 0 0;\\r\\n}\\r\\n\\r\\n.team-member-img {\\r\\n  width: 100%;\\r\\n  border-radius: 30px;\\r\\n}\\r\\n\\r\\n.member-duty {\\r\\n  font-size: 0.9rem;\\r\\n  line-height: 2;\\r\\n  padding-bottom: 1rem;\\r\\n  color: $mid-grey;\\r\\n}\\r\\n\\r\\n.member-actions {\\r\\n  text-align: center;\\r\\n  padding-bottom: 1rem;\\r\\n  flex-grow: 1;\\r\\n  & ul {\\r\\n    text-align: left;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    justify-content: space-between;\\r\\n    height: 100%;\\r\\n  }\\r\\n  & li {\\r\\n    list-style: none;\\r\\n    padding-bottom: 0.3rem;\\r\\n    text-align: center;\\r\\n  }\\r\\n}\\r\\n\\r\\n.git-icon {\\r\\n  width: 50px;\\r\\n  height: 50px;\\r\\n  margin-top: auto;\\r\\n  background-image: url(\\"data:image/svg+xml,%3Csvg width=\'50px\' height=\'50px\' viewBox=\'0 0 1024 1024\' xmlns=\'http://www.w3.org/2000/svg\' class=\'icon-git\'%3E%3Cpath d=\'M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z\'%3E%3C/path%3E%3C/svg%3E\\");\\r\\n  filter: none;\\r\\n  transition: all 0.5s;\\r\\n  border-radius: 50%;\\r\\n  background-color: white;\\r\\n  &:hover {\\r\\n    filter: invert(1);\\r\\n  }\\r\\n}\\r\\n",".charts {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-around;\\r\\n  flex-wrap: wrap;\\r\\n  width: 100%;\\r\\n  padding: 20px;\\r\\n  @media (max-width: $breakpoint-laptop) {\\r\\n    gap: 1.5rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}\\r\\n\\r\\n.chart {\\r\\n  width: 35%;\\r\\n  height: 300px;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n    height: max-content;\\r\\n  }\\r\\n}",".todaystat-wrapper {\\r\\n  @include card-style;\\r\\n  padding: 1.6rem;\\r\\n  font-family: $headers-font;\\r\\n  width: 62%;\\r\\n  display: flex;\\r\\n  justify-content: space-around;\\r\\n  .word-wrapper {\\r\\n    width: 100%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n    padding: 0.5rem;\\r\\n  }\\r\\n}\\r\\n \\r\\n.wrapper_daily-stat {\\r\\n  @include display-flex-center;\\r\\n  flex-direction: column;\\r\\n  width: 100%;\\r\\n  font-size: 1.3rem;\\r\\n  color: $dark-color;\\r\\n  font-family: $headers-font;\\r\\n  gap: 1rem;\\r\\n}\\r\\n\\r\\n.daystat-wrapper {\\r\\n  @include card-style;\\r\\n  font-family: $headers-font;\\r\\n  display: flex;\\r\\n  justify-content: space-around;\\r\\n  align-items: center;\\r\\n  width: 100%;\\r\\n  padding-bottom: 1.5rem;\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    flex-wrap: wrap;\\r\\n    gap: 1rem;\\r\\n    .word-wrapper {\\r\\n      width: 48%;\\r\\n    }\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    flex-wrap: nowrap;\\r\\n    flex-direction: column;\\r\\n    gap: 1rem;\\r\\n    .word-wrapper {\\r\\n      width: 100%;\\r\\n    }\\r\\n  }\\r\\n} \\r\\n\\r\\n\\r\\n.data-wrapper-row1, .data-wrapper-row2 {\\r\\n  display: flex;\\r\\n  padding: 1rem;\\r\\n  gap: 1rem;\\r\\n  flex-direction: column;\\r\\n  width: 50%;\\r\\n  justify-content: space-between;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    padding: 5px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.data-wrapper-row1 {\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.stat-data-item {\\r\\n  @include display-flex-space-between;\\r\\n  padding-bottom: 0.5rem;\\r\\n}\\r\\n\\r\\n.date-row {\\r\\n  padding-right: 6.5rem;\\r\\n  padding-top: 1.6rem;\\r\\n  padding-left: 2rem;\\r\\n  text-align: center;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    padding-right: 2.8rem;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    padding-top: 2.8rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.first-day-text {\\r\\n  line-height: 1.2;\\r\\n}\\r\\n\\r\\n.first-day-date {\\r\\n  font-size: 1.6rem;\\r\\n  font-weight: 700;\\r\\n  line-height: 1.6;\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    font-size: 1rem;\\r\\n  }\\r\\n}\\r\\n\\r\\n.word-text {\\r\\n  font-size: 1.2rem;\\r\\n  font-weight: 700;\\r\\n  padding-bottom: 0.5rem;\\r\\n}\\r\\n\\r\\n.stat-data-param {\\r\\n  padding-right: 1rem;\\r\\n  font-family: $text-font;\\r\\n  font-size: 0.9rem;\\r\\n}\\r\\n\\r\\n.stat-data-value {\\r\\n  font-weight: 600;\\r\\n  font-size: 0.9rem;\\r\\n}\\r\\n\\r\\n.date-text {\\r\\n  font-size: 1.2rem;\\r\\n  font-weight: 700;\\r\\n  @media (max-width: $breakpoint-tablet) {\\r\\n    width: 48%;\\r\\n  }\\r\\n  @media (max-width: $breakpoint-mobile) {\\r\\n    width: 100%;\\r\\n  }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6525\n')},3645:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += "}";\n      }\n\n      if (item[2]) {\n        content += "}";\n      }\n\n      if (item[4]) {\n        content += "}";\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY0NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDs7QUFFQTtBQUNBLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBLHFGQUFxRjtBQUNyRjs7QUFFQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBLEtBQUs7QUFDTCxLQUFLOzs7QUFHTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIscUJBQXFCO0FBQzFDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Ysc0ZBQXNGLHFCQUFxQjtBQUMzRztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLGlEQUFpRCxxQkFBcUI7QUFDdEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3645\n')},1667:module=>{"use strict";eval('\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  }\n\n  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them\n\n  if (/^[\'"].*[\'"]$/.test(url)) {\n    url = url.slice(1, -1);\n  }\n\n  if (options.hash) {\n    url += options.hash;\n  } // Should url be wrapped?\n  // See https://drafts.csswg.org/css-values-3/#urls\n\n\n  if (/["\'() \\t\\n]|(%20)/.test(url) || options.needQuotes) {\n    return "\\"".concat(url.replace(/"/g, \'\\\\"\').replace(/\\n/g, "\\\\n"), "\\"");\n  }\n\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2Ny5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0RBQW9EOztBQUVwRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcz8xZGU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1667\n')},7537:module=>{"use strict";eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join("\\n");\n  }\n\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUzNy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzP2FmMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7537\n')},8123:function(module){eval('!function(t,n){ true?module.exports=n():0}("undefined"!=typeof self?self:this,(function(){return function(){"use strict";var t={407:function(t,n,e){e.d(n,{default:function(){return N}});var o=/([:*])(\\w+)/g,r=/\\*/g,i=/\\/\\?/g;function a(t){return void 0===t&&(t="/"),v()?location.pathname+location.search+location.hash:t}function s(t){return t.replace(/\\/+$/,"").replace(/^\\/+/,"")}function c(t){return"string"==typeof t}function u(t){return t&&t.indexOf("#")>=0&&t.split("#").pop()||""}function h(t){var n=s(t).split(/\\?(.*)?$/);return[s(n[0]),n.slice(1).join("")]}function f(t){for(var n={},e=t.split("&"),o=0;o<e.length;o++){var r=e[o].split("=");if(""!==r[0]){var i=decodeURIComponent(r[0]);n[i]?(Array.isArray(n[i])||(n[i]=[n[i]]),n[i].push(decodeURIComponent(r[1]||""))):n[i]=decodeURIComponent(r[1]||"")}}return n}function l(t,n){var e,a=h(s(t.currentLocationPath)),l=a[0],p=a[1],d=""===p?null:f(p),v=[];if(c(n.path)){if(e="(?:/^|^)"+s(n.path).replace(o,(function(t,n,e){return v.push(e),"([^/]+)"})).replace(r,"?(?:.*)").replace(i,"/?([^/]+|)")+"$",""===s(n.path)&&""===s(l))return{url:l,queryString:p,hashString:u(t.to),route:n,data:null,params:d}}else e=n.path;var g=new RegExp(e,""),m=l.match(g);if(m){var y=c(n.path)?function(t,n){return 0===n.length?null:t?t.slice(1,t.length).reduce((function(t,e,o){return null===t&&(t={}),t[n[o]]=decodeURIComponent(e),t}),null):null}(m,v):m.groups?m.groups:m.slice(1);return{url:s(l.replace(new RegExp("^"+t.instance.root),"")),queryString:p,hashString:u(t.to),route:n,data:y,params:d}}return!1}function p(){return!("undefined"==typeof window||!window.history||!window.history.pushState)}function d(t,n){return void 0===t[n]||!0===t[n]}function v(){return"undefined"!=typeof window}function g(t,n){return void 0===t&&(t=[]),void 0===n&&(n={}),t.filter((function(t){return t})).forEach((function(t){["before","after","already","leave"].forEach((function(e){t[e]&&(n[e]||(n[e]=[]),n[e].push(t[e]))}))})),n}function m(t,n,e){var o=n||{},r=0;!function n(){t[r]?Array.isArray(t[r])?(t.splice.apply(t,[r,1].concat(t[r][0](o)?t[r][1]:t[r][2])),n()):t[r](o,(function(t){void 0===t||!0===t?(r+=1,n()):e&&e(o)})):e&&e(o)}()}function y(t,n){void 0===t.currentLocationPath&&(t.currentLocationPath=t.to=a(t.instance.root)),t.currentLocationPath=t.instance._checkForAHash(t.currentLocationPath),n()}function _(t,n){for(var e=0;e<t.instance.routes.length;e++){var o=l(t,t.instance.routes[e]);if(o&&(t.matches||(t.matches=[]),t.matches.push(o),"ONE"===t.resolveOptions.strategy))return void n()}n()}function k(t,n){t.navigateOptions&&(void 0!==t.navigateOptions.shouldResolve&&console.warn(\'"shouldResolve" is deprecated. Please check the documentation.\'),void 0!==t.navigateOptions.silent&&console.warn(\'"silent" is deprecated. Please check the documentation.\')),n()}function O(t,n){!0===t.navigateOptions.force?(t.instance._setCurrent([t.instance._pathToMatchObject(t.to)]),n(!1)):n()}m.if=function(t,n,e){return Array.isArray(n)||(n=[n]),Array.isArray(e)||(e=[e]),[t,n,e]};var w=v(),L=p();function b(t,n){if(d(t.navigateOptions,"updateBrowserURL")){var e=("/"+t.to).replace(/\\/\\//g,"/"),o=w&&t.resolveOptions&&!0===t.resolveOptions.hash;L?(history[t.navigateOptions.historyAPIMethod||"pushState"](t.navigateOptions.stateObj||{},t.navigateOptions.title||"",o?"#"+e:e),location&&location.hash&&(t.instance.__freezeListening=!0,setTimeout((function(){if(!o){var n=location.hash;location.hash="",location.hash=n}t.instance.__freezeListening=!1}),1))):w&&(window.location.href=t.to)}n()}function A(t,n){var e=t.instance;e.lastResolved()?m(e.lastResolved().map((function(n){return function(e,o){if(n.route.hooks&&n.route.hooks.leave){var r=!1,i=t.instance.matchLocation(n.route.path,t.currentLocationPath,!1);r="*"!==n.route.path?!i:!(t.matches&&t.matches.find((function(t){return n.route.path===t.route.path}))),d(t.navigateOptions,"callHooks")&&r?m(n.route.hooks.leave.map((function(n){return function(e,o){return n((function(n){!1===n?t.instance.__markAsClean(t):o()}),t.matches&&t.matches.length>0?1===t.matches.length?t.matches[0]:t.matches:void 0)}})).concat([function(){return o()}])):o()}else o()}})),{},(function(){return n()})):n()}function P(t,n){d(t.navigateOptions,"updateState")&&t.instance._setCurrent(t.matches),n()}var R=[function(t,n){var e=t.instance.lastResolved();if(e&&e[0]&&e[0].route===t.match.route&&e[0].url===t.match.url&&e[0].queryString===t.match.queryString)return e.forEach((function(n){n.route.hooks&&n.route.hooks.already&&d(t.navigateOptions,"callHooks")&&n.route.hooks.already.forEach((function(n){return n(t.match)}))})),void n(!1);n()},function(t,n){t.match.route.hooks&&t.match.route.hooks.before&&d(t.navigateOptions,"callHooks")?m(t.match.route.hooks.before.map((function(n){return function(e,o){return n((function(n){!1===n?t.instance.__markAsClean(t):o()}),t.match)}})).concat([function(){return n()}])):n()},function(t,n){d(t.navigateOptions,"callHandler")&&t.match.route.handler(t.match),t.instance.updatePageLinks(),n()},function(t,n){t.match.route.hooks&&t.match.route.hooks.after&&d(t.navigateOptions,"callHooks")&&t.match.route.hooks.after.forEach((function(n){return n(t.match)})),n()}],S=[A,function(t,n){var e=t.instance._notFoundRoute;if(e){t.notFoundHandled=!0;var o=h(t.currentLocationPath),r=o[0],i=o[1],a=u(t.to);e.path=s(r);var c={url:e.path,queryString:i,hashString:a,data:null,route:e,params:""!==i?f(i):null};t.matches=[c],t.match=c}n()},m.if((function(t){return t.notFoundHandled}),R.concat([P]),[function(t,n){t.resolveOptions&&!1!==t.resolveOptions.noMatchWarning&&void 0!==t.resolveOptions.noMatchWarning||console.warn(\'Navigo: "\'+t.currentLocationPath+"\\" didn\'t match any of the registered routes."),n()},function(t,n){t.instance._setCurrent(null),n()}])];function E(){return(E=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t}).apply(this,arguments)}function x(t,n){var e=0;A(t,(function o(){e!==t.matches.length?m(R,E({},t,{match:t.matches[e]}),(function(){e+=1,o()})):P(t,n)}))}function H(t){t.instance.__markAsClean(t)}function j(){return(j=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o])}return t}).apply(this,arguments)}var C="[data-navigo]";function N(t,n){var e,o=n||{strategy:"ONE",hash:!1,noMatchWarning:!1,linksSelector:C},r=this,i="/",d=null,w=[],L=!1,A=p(),P=v();function R(t){return t.indexOf("#")>=0&&(t=!0===o.hash?t.split("#")[1]||"/":t.split("#")[0]),t}function E(t){return s(i+"/"+s(t))}function N(t,n,e,o){return t=c(t)?E(t):t,{name:o||s(String(t)),path:t,handler:n,hooks:g(e)}}function U(t,n){if(!r.__dirty){r.__dirty=!0,t=t?s(i)+"/"+s(t):void 0;var e={instance:r,to:t,currentLocationPath:t,navigateOptions:{},resolveOptions:j({},o,n)};return m([y,_,m.if((function(t){var n=t.matches;return n&&n.length>0}),x,S)],e,H),!!e.matches&&e.matches}r.__waiting.push((function(){return r.resolve(t,n)}))}function q(t,n){if(r.__dirty)r.__waiting.push((function(){return r.navigate(t,n)}));else{r.__dirty=!0,t=s(i)+"/"+s(t);var e={instance:r,to:t,navigateOptions:n||{},resolveOptions:n&&n.resolveOptions?n.resolveOptions:o,currentLocationPath:R(t)};m([k,O,_,m.if((function(t){var n=t.matches;return n&&n.length>0}),x,S),b,H],e,H)}}function F(){if(P)return(P?[].slice.call(document.querySelectorAll(o.linksSelector||C)):[]).forEach((function(t){"false"!==t.getAttribute("data-navigo")&&"_blank"!==t.getAttribute("target")?t.hasListenerAttached||(t.hasListenerAttached=!0,t.navigoHandler=function(n){if((n.ctrlKey||n.metaKey)&&"a"===n.target.tagName.toLowerCase())return!1;var e=t.getAttribute("href");if(null==e)return!1;if(e.match(/^(http|https)/)&&"undefined"!=typeof URL)try{var o=new URL(e);e=o.pathname+o.search}catch(t){}var i=function(t){if(!t)return{};var n,e=t.split(","),o={};return e.forEach((function(t){var e=t.split(":").map((function(t){return t.replace(/(^ +| +$)/g,"")}));switch(e[0]){case"historyAPIMethod":o.historyAPIMethod=e[1];break;case"resolveOptionsStrategy":n||(n={}),n.strategy=e[1];break;case"resolveOptionsHash":n||(n={}),n.hash="true"===e[1];break;case"updateBrowserURL":case"callHandler":case"updateState":case"force":o[e[0]]="true"===e[1]}})),n&&(o.resolveOptions=n),o}(t.getAttribute("data-navigo-options"));L||(n.preventDefault(),n.stopPropagation(),r.navigate(s(e),i))},t.addEventListener("click",t.navigoHandler)):t.hasListenerAttached&&t.removeEventListener("click",t.navigoHandler)})),r}function I(t,n,e){var o=w.find((function(n){return n.name===t})),r=null;if(o){if(r=o.path,n)for(var a in n)r=r.replace(":"+a,n[a]);r=r.match(/^\\//)?r:"/"+r}return r&&e&&!e.includeRoot&&(r=r.replace(new RegExp("^/"+i),"")),r}function M(t){var n=h(s(t)),o=n[0],r=n[1],i=""===r?null:f(r);return{url:o,queryString:r,hashString:u(t),route:N(o,(function(){}),[e],o),data:null,params:i}}function T(t,n,e){return"string"==typeof n&&(n=z(n)),n?(n.hooks[t]||(n.hooks[t]=[]),n.hooks[t].push(e),function(){n.hooks[t]=n.hooks[t].filter((function(t){return t!==e}))}):(console.warn("Route doesn\'t exists: "+n),function(){})}function z(t){return"string"==typeof t?w.find((function(n){return n.name===E(t)})):w.find((function(n){return n.handler===t}))}t?i=s(t):console.warn(\'Navigo requires a root path in its constructor. If not provided will use "/" as default.\'),this.root=i,this.routes=w,this.destroyed=L,this.current=d,this.__freezeListening=!1,this.__waiting=[],this.__dirty=!1,this.__markAsClean=function(t){t.instance.__dirty=!1,t.instance.__waiting.length>0&&t.instance.__waiting.shift()()},this.on=function(t,n,o){var r=this;return"object"!=typeof t||t instanceof RegExp?("function"==typeof t&&(o=n,n=t,t=i),w.push(N(t,n,[e,o])),this):(Object.keys(t).forEach((function(n){if("function"==typeof t[n])r.on(n,t[n]);else{var o=t[n],i=o.uses,a=o.as,s=o.hooks;w.push(N(n,i,[e,s],a))}})),this)},this.off=function(t){return this.routes=w=w.filter((function(n){return c(t)?s(n.path)!==s(t):"function"==typeof t?t!==n.handler:String(n.path)!==String(t)})),this},this.resolve=U,this.navigate=q,this.navigateByName=function(t,n,e){var o=I(t,n);return null!==o&&(q(o.replace(new RegExp("^/?"+i),""),e),!0)},this.destroy=function(){this.routes=w=[],A&&window.removeEventListener("popstate",this.__popstateListener),this.destroyed=L=!0},this.notFound=function(t,n){return r._notFoundRoute=N("*",t,[e,n],"__NOT_FOUND__"),this},this.updatePageLinks=F,this.link=function(t){return"/"+i+"/"+s(t)},this.hooks=function(t){return e=t,this},this.extractGETParameters=function(t){return h(R(t))},this.lastResolved=function(){return d},this.generate=I,this.getLinkPath=function(t){return t.getAttribute("href")},this.match=function(t){var n={instance:r,currentLocationPath:t,to:t,navigateOptions:{},resolveOptions:o};return _(n,(function(){})),!!n.matches&&n.matches},this.matchLocation=function(t,n,e){void 0===n||void 0!==e&&!e||(n=E(n));var o={instance:r,to:n,currentLocationPath:n};return y(o,(function(){})),"string"==typeof t&&(t=void 0===e||e?E(t):t),l(o,{name:String(t),path:t,handler:function(){},hooks:{}})||!1},this.getCurrentLocation=function(){return M(s(a(i)).replace(new RegExp("^"+i),""))},this.addBeforeHook=T.bind(this,"before"),this.addAfterHook=T.bind(this,"after"),this.addAlreadyHook=T.bind(this,"already"),this.addLeaveHook=T.bind(this,"leave"),this.getRoute=z,this._pathToMatchObject=M,this._clean=s,this._checkForAHash=R,this._setCurrent=function(t){return d=r.current=t},function(){A&&(this.__popstateListener=function(){r.__freezeListening||U()},window.addEventListener("popstate",this.__popstateListener))}.call(this),F.call(this)}}},n={};function e(o){if(n[o])return n[o].exports;var r=n[o]={exports:{}};return t[o](r,r.exports,e),r.exports}return e.d=function(t,n){for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e(407)}().default}));\n//# sourceMappingURL=navigo.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8123\n')},3690:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3379);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7795);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(569);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3565);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9216);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4589);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_global_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6525);\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_global_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z, options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_global_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_global_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"].locals */ .Z.locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_global_scss__WEBPACK_IMPORTED_MODULE_6__/* ["default"].locals */ .Z.locals : undefined);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY5MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUErRjtBQUMvRixNQUFxRjtBQUNyRixNQUE0RjtBQUM1RixNQUErRztBQUMvRyxNQUF3RztBQUN4RyxNQUF3RztBQUN4RyxNQUE2STtBQUM3STtBQUNBOztBQUVBOztBQUVBLDRCQUE0QixxR0FBbUI7QUFDL0Msd0JBQXdCLGtIQUFhOztBQUVyQyx1QkFBdUIsdUdBQWE7QUFDcEM7QUFDQSxpQkFBaUIsK0ZBQU07QUFDdkIsNkJBQTZCLHNHQUFrQjs7QUFFL0MsYUFBYSwwR0FBRyxDQUFDLHNJQUFPOzs7O0FBSXVGO0FBQy9HLE9BQU8saUVBQWUsc0lBQU8sSUFBSSxvSkFBYyxHQUFHLG9KQUFjLFlBQVksRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvZ2xvYmFsLnNjc3M/MmMyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2dsb2JhbC5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2xvYmFsLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3690\n')},3379:module=>{"use strict";eval('\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM3OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQix3QkFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsaUJBQWlCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsNEJBQTRCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcz8yZGJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3379\n')},569:module=>{"use strict";eval('\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNEQUFzRDs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzP2IyMTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///569\n')},9216:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIxNi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9216\n')},3565:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU2NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EsY0FBYyxLQUF3QyxHQUFHLHNCQUFpQixHQUFHLENBQUk7O0FBRWpGO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcz9kZGNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3565\n')},7795:module=>{"use strict";eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n\n  var needLayer = typeof obj.layer !== "undefined";\n\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += "}";\n  }\n\n  if (obj.media) {\n    css += "}";\n  }\n\n  if (obj.supports) {\n    css += "}";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc5NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0Q7QUFDbEQ7O0FBRUE7QUFDQSwwQ0FBMEM7QUFDMUM7O0FBRUE7O0FBRUE7QUFDQSxpRkFBaUY7QUFDakY7O0FBRUE7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7O0FBRUE7QUFDQSx5REFBeUQ7QUFDekQsSUFBSTs7QUFFSjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzP2U0NzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7795\n')},4589:module=>{"use strict";eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU4OS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzPzFkZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4589\n")},1857:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Charts = void 0;\r\nconst auto_1 = __importDefault(__webpack_require__(8597));\r\nconst api_1 = __webpack_require__(1341);\r\nconst Storage_1 = __webpack_require__(7114);\r\nclass Charts {\r\n    constructor() {\r\n        this.api = api_1.api;\r\n        this.storage = Storage_1.storage;\r\n    }\r\n    // eslint-disable-next-line max-len\r\n    createChart(id, days, wordsCout, descr, type) {\r\n        const ctx = document.getElementById(id);\r\n        const data = {\r\n            labels: days,\r\n            datasets: [{\r\n                    label: descr,\r\n                    backgroundColor: '#332A7C',\r\n                    borderColor: '#332A7C',\r\n                    tension: 0.3,\r\n                    data: wordsCout,\r\n                }],\r\n        };\r\n        const config = {\r\n            type,\r\n            data,\r\n            options: {\r\n                responsive: false,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    x: {\r\n                        min: 0,\r\n                    },\r\n                    y: {\r\n                        min: 0,\r\n                        ticks: {\r\n                            // Include a dollar sign in the ticks\r\n                            // eslint-disable-next-line consistent-return\r\n                            callback(value) {\r\n                                if (Number(value) % 1 === 0) {\r\n                                    return value;\r\n                                }\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        };\r\n        return new auto_1.default(ctx, config);\r\n    }\r\n    async getStatisticForCarts() {\r\n        const userData = this.storage.getUserIdData();\r\n        const data = await this.api.getStatistic(userData);\r\n        if (!data || typeof data === 'string')\r\n            return null;\r\n        const dates = Object.keys(data.optional.words);\r\n        const newWords = [];\r\n        const learnedWords = [];\r\n        dates.forEach((date, index) => {\r\n            newWords.push(data.optional.words[date].newWords);\r\n            if (index === 0)\r\n                learnedWords.push(data.optional.words[date].learnedWords);\r\n            else\r\n                learnedWords.push(data.optional.words[date].learnedWords + learnedWords[index - 1]);\r\n        });\r\n        const result = { dates, newWords, learnedWords };\r\n        return result;\r\n    }\r\n}\r\nexports.Charts = Charts;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixDQUFDO0NBQ0Y7QUFwRUQsd0JBb0VDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL0NoYXJ0cy9DaGFydHMudHM/MjY0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2hhcnQsIHsgQ2hhcnRDb25maWd1cmF0aW9uLCBDaGFydEl0ZW0sIENoYXJ0VHlwZVJlZ2lzdHJ5IH0gZnJvbSAnY2hhcnQuanMvYXV0byc7XHJcbmltcG9ydCB7IGFwaSB9IGZyb20gJy4uL01vZGVsL2FwaSc7XHJcbmltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuLi9TdG9yYWdlL1N0b3JhZ2UnO1xyXG5pbXBvcnQgeyBTdGF0aXN0aWNGb3JDYXJ0cyB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoYXJ0cyB7XHJcbiAgYXBpOiB0eXBlb2YgYXBpO1xyXG5cclxuICBzdG9yYWdlOiB0eXBlb2Ygc3RvcmFnZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFwaSA9IGFwaTtcclxuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XHJcbiAgfVxyXG5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxyXG4gIHB1YmxpYyBjcmVhdGVDaGFydChpZDogc3RyaW5nLCBkYXlzOiBzdHJpbmdbXSwgd29yZHNDb3V0OiBudW1iZXJbXSwgZGVzY3I6IHN0cmluZywgdHlwZToga2V5b2YgQ2hhcnRUeXBlUmVnaXN0cnkpOiBDaGFydCB7XHJcbiAgICBjb25zdCBjdHggPSA8Q2hhcnRJdGVtPmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIGxhYmVsczogZGF5cyxcclxuICAgICAgZGF0YXNldHM6IFt7XHJcbiAgICAgICAgbGFiZWw6IGRlc2NyLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzMzJBN0MnLFxyXG4gICAgICAgIGJvcmRlckNvbG9yOiAnIzMzMkE3QycsXHJcbiAgICAgICAgdGVuc2lvbjogMC4zLFxyXG4gICAgICAgIGRhdGE6IHdvcmRzQ291dCxcclxuICAgICAgfV0sXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZzogQ2hhcnRDb25maWd1cmF0aW9uID0ge1xyXG4gICAgICB0eXBlLFxyXG4gICAgICBkYXRhLFxyXG4gICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXHJcbiAgICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXHJcbiAgICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgICB4OiB7XHJcbiAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgICAgdGlja3M6IHtcclxuICAgICAgICAgICAgICAvLyBJbmNsdWRlIGEgZG9sbGFyIHNpZ24gaW4gdGhlIHRpY2tzXHJcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXHJcbiAgICAgICAgICAgICAgY2FsbGJhY2sodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChOdW1iZXIodmFsdWUpICUgMSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBDaGFydChjdHgsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZ2V0U3RhdGlzdGljRm9yQ2FydHMoKTogUHJvbWlzZTxTdGF0aXN0aWNGb3JDYXJ0cyB8IG51bGw+IHtcclxuICAgIGNvbnN0IHVzZXJEYXRhID0gdGhpcy5zdG9yYWdlLmdldFVzZXJJZERhdGEoKTtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmFwaS5nZXRTdGF0aXN0aWModXNlckRhdGEpO1xyXG4gICAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykgcmV0dXJuIG51bGw7XHJcbiAgICBjb25zdCBkYXRlcyA9IE9iamVjdC5rZXlzKGRhdGEub3B0aW9uYWwud29yZHMpO1xyXG4gICAgY29uc3QgbmV3V29yZHM6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCBsZWFybmVkV29yZHM6IG51bWJlcltdID0gW107XHJcbiAgICBkYXRlcy5mb3JFYWNoKChkYXRlLCBpbmRleCkgPT4ge1xyXG4gICAgICBuZXdXb3Jkcy5wdXNoKGRhdGEub3B0aW9uYWwud29yZHNbZGF0ZV0ubmV3V29yZHMpO1xyXG4gICAgICBpZiAoaW5kZXggPT09IDApIGxlYXJuZWRXb3Jkcy5wdXNoKGRhdGEub3B0aW9uYWwud29yZHNbZGF0ZV0ubGVhcm5lZFdvcmRzKTtcclxuICAgICAgZWxzZSBsZWFybmVkV29yZHMucHVzaChkYXRhLm9wdGlvbmFsLndvcmRzW2RhdGVdLmxlYXJuZWRXb3JkcyArIGxlYXJuZWRXb3Jkc1tpbmRleCAtIDFdKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0ID0geyBkYXRlcywgbmV3V29yZHMsIGxlYXJuZWRXb3JkcyB9O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1857\n")},8096:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { "default": mod };\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.MainPage = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nclass MainPage {\r\n    renderMain() {\r\n        const container = document.querySelector(\'.main\');\r\n        container.innerHTML = \'\';\r\n        const template = (0, createNode_1.default)({ tag: \'div\', classes: [\'main-section\'], inner: `${this.makePage()}` });\r\n        container.append(template);\r\n        return container;\r\n    }\r\n    makePage() {\r\n        const template = `<section class="hero-section">\r\n    <h1 class="hero-section-header">Learn Engish and play</h1>\r\n    <p class="hero-section-text">Some text about this cool and great and perfect app goes here may be some words about the rules and the text book and games or about that there are 6 level, but you may get statistic and 7th level after registration</p>\r\n    <a href="https://youtu.be/_86RUdmUWtk" target="_blank">\r\n    <button class="video-btn btn-secondary"><span class="material-icons-outlined video-icon">play_circle_filled</span>как учиться</button>\r\n    </a>\r\n      <section class="advantages-section">\r\n      <div class="advantage_wrapper">\r\n        <img src="./assets/books.jpg" alt="Преимущество - учебник с более чем 3600 слов" class="advantage-image">\r\n        <h2 class="advantage-header">Учебник</h2>\r\n        <p class="advantage-text">Более 3000 слов разделенных на 6 уровней сложности</p>\r\n      </div>\r\n      <div class="advantage_wrapper">\r\n        <img src="./assets/games.jpg" alt="Преимущество - интерактивные игры для изучения слов" class="advantage-image">\r\n        <h2 class="advantage-header">Игры</h2>\r\n        <p class="advantage-text">Интерактивные игры для легкого изучения слов</p>\r\n      </div>\r\n      <div class="advantage_wrapper">\r\n        <img src="./assets/progress.jpg" alt="Преимущество - отслеживание прогресса" class="advantage-image">\r\n        <h2 class="advantage-header">Прогресс</h2>\r\n        <p class="advantage-text">Зарегистрируйса и отлеживай свой прогресс каждый день</p>\r\n      </div>\r\n      <div class="advantage_wrapper">\r\n        <img src="./assets/vocab.jpg" alt="Преимущество - cловарь со сложными словами" class="advantage-image">\r\n        <h2 class="advantage-header">Словарь</h2>\r\n        <p class="advantage-text">Сохраняй слова в словарь, чтобы выучить их позже</p>\r\n      </div>\r\n    </section>\r\n  </section>\r\n  <section class="team-section">\r\n    <h2 class="team-section-header">Наша команда</h2>\r\n    <div class="team-members">\r\n      <div class="team-member">\r\n        <img src="./assets/sveta-photo.jpg" alt="" class="team-member-img">\r\n        <h3 class="team-member-name">Светлана</h3>\r\n        <p class="member-duty">Team lead, developer, designer</p>\r\n        <div class="member-actions">\r\n          <ul>\r\n            <li>Учебник</li>\r\n            <li>Дизайн приложения</li>\r\n            <li>Регистрация и авторизация</li>\r\n            <li>Главная страница</li>\r\n            <li>Рендер страницы статистика</li>\r\n          </ul>\r\n        </div>\r\n        <a class="git-icon" href="https://github.com/svetarachok" target="_blank"></a>\r\n      </div>\r\n      <div class="team-member">\r\n        <img src="./assets/evgen-photo.jpg" alt="" class="team-member-img">\r\n        <h3 class="team-member-name">Евгений</h3>\r\n        <p class="member-duty">Developer, designer</p>\r\n        <div class="member-actions">\r\n          <ul>\r\n            <li>Роутинг</li>\r\n            <li>Игра Спринт</li>\r\n            <li>Логика работы со словами пользователя</li>\r\n            <li>Графики на странице статистики</li>\r\n        </div>\r\n        <a class="git-icon" href="https://github.com/Parxommm" target="_blank"></a>\r\n      </div>\r\n      <div class="team-member">\r\n        <img src="./assets/sergey-photo.jpg" alt="" class="team-member-img">\r\n        <h3 class="team-member-name">Сергей</h3>\r\n        <p class="member-duty">Developer, designer</p>\r\n        <div class="member-actions">\r\n          <ul>\r\n            <li>Деплой и настройка бэкенда</li>\r\n            <li>Взаимодействие с API</li>\r\n            <li>Игра Аудиовызов</li>\r\n            <li>Логика формирования статистики</li>\r\n          </ul>\r\n        </div>\r\n        <a class="git-icon" href="https://github.com/SiarheiHa" target="_blank"></a>\r\n      </div>\r\n    </div>\r\n  </section>`;\r\n        return template;\r\n    }\r\n}\r\nexports.MainPage = MainPage;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODA5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBNkM7QUFFN0MsTUFBYSxRQUFRO0lBQ25CLFVBQVU7UUFDUixNQUFNLFNBQVMsR0FBZ0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQWdCLENBQUM7UUFDOUUsU0FBUyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsd0JBQVUsRUFBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BHLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLFFBQVEsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBMkVSLENBQUM7UUFDVixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUF4RkQsNEJBd0ZDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL01haW5QYWdlL01haW5QYWdlLnRzP2YwYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU5vZGUgZnJvbSAnLi4vdXRpbHMvY3JlYXRlTm9kZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFpblBhZ2Uge1xyXG4gIHJlbmRlck1haW4oKSB7XHJcbiAgICBjb25zdCBjb250YWluZXI6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4nKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gY3JlYXRlTm9kZSh7IHRhZzogJ2RpdicsIGNsYXNzZXM6IFsnbWFpbi1zZWN0aW9uJ10sIGlubmVyOiBgJHt0aGlzLm1ha2VQYWdlKCl9YCB9KTtcclxuICAgIGNvbnRhaW5lci5hcHBlbmQodGVtcGxhdGUpO1xyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIG1ha2VQYWdlKCkge1xyXG4gICAgY29uc3QgdGVtcGxhdGUgPSBgPHNlY3Rpb24gY2xhc3M9XCJoZXJvLXNlY3Rpb25cIj5cclxuICAgIDxoMSBjbGFzcz1cImhlcm8tc2VjdGlvbi1oZWFkZXJcIj5MZWFybiBFbmdpc2ggYW5kIHBsYXk8L2gxPlxyXG4gICAgPHAgY2xhc3M9XCJoZXJvLXNlY3Rpb24tdGV4dFwiPlNvbWUgdGV4dCBhYm91dCB0aGlzIGNvb2wgYW5kIGdyZWF0IGFuZCBwZXJmZWN0IGFwcCBnb2VzIGhlcmUgbWF5IGJlIHNvbWUgd29yZHMgYWJvdXQgdGhlIHJ1bGVzIGFuZCB0aGUgdGV4dCBib29rIGFuZCBnYW1lcyBvciBhYm91dCB0aGF0IHRoZXJlIGFyZSA2IGxldmVsLCBidXQgeW91IG1heSBnZXQgc3RhdGlzdGljIGFuZCA3dGggbGV2ZWwgYWZ0ZXIgcmVnaXN0cmF0aW9uPC9wPlxyXG4gICAgPGEgaHJlZj1cImh0dHBzOi8veW91dHUuYmUvXzg2UlVkbVVXdGtcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICAgIDxidXR0b24gY2xhc3M9XCJ2aWRlby1idG4gYnRuLXNlY29uZGFyeVwiPjxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnMtb3V0bGluZWQgdmlkZW8taWNvblwiPnBsYXlfY2lyY2xlX2ZpbGxlZDwvc3Bhbj7QutCw0Log0YPRh9C40YLRjNGB0Y88L2J1dHRvbj5cclxuICAgIDwvYT5cclxuICAgICAgPHNlY3Rpb24gY2xhc3M9XCJhZHZhbnRhZ2VzLXNlY3Rpb25cIj5cclxuICAgICAgPGRpdiBjbGFzcz1cImFkdmFudGFnZV93cmFwcGVyXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9ib29rcy5qcGdcIiBhbHQ9XCLQn9GA0LXQuNC80YPRidC10YHRgtCy0L4gLSDRg9GH0LXQsdC90LjQuiDRgSDQsdC+0LvQtdC1INGH0LXQvCAzNjAwINGB0LvQvtCyXCIgY2xhc3M9XCJhZHZhbnRhZ2UtaW1hZ2VcIj5cclxuICAgICAgICA8aDIgY2xhc3M9XCJhZHZhbnRhZ2UtaGVhZGVyXCI+0KPRh9C10LHQvdC40Lo8L2gyPlxyXG4gICAgICAgIDxwIGNsYXNzPVwiYWR2YW50YWdlLXRleHRcIj7QkdC+0LvQtdC1IDMwMDAg0YHQu9C+0LIg0YDQsNC30LTQtdC70LXQvdC90YvRhSDQvdCwIDYg0YPRgNC+0LLQvdC10Lkg0YHQu9C+0LbQvdC+0YHRgtC4PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImFkdmFudGFnZV93cmFwcGVyXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9nYW1lcy5qcGdcIiBhbHQ9XCLQn9GA0LXQuNC80YPRidC10YHRgtCy0L4gLSDQuNC90YLQtdGA0LDQutGC0LjQstC90YvQtSDQuNCz0YDRiyDQtNC70Y8g0LjQt9GD0YfQtdC90LjRjyDRgdC70L7QslwiIGNsYXNzPVwiYWR2YW50YWdlLWltYWdlXCI+XHJcbiAgICAgICAgPGgyIGNsYXNzPVwiYWR2YW50YWdlLWhlYWRlclwiPtCY0LPRgNGLPC9oMj5cclxuICAgICAgICA8cCBjbGFzcz1cImFkdmFudGFnZS10ZXh0XCI+0JjQvdGC0LXRgNCw0LrRgtC40LLQvdGL0LUg0LjQs9GA0Ysg0LTQu9GPINC70LXQs9C60L7Qs9C+INC40LfRg9GH0LXQvdC40Y8g0YHQu9C+0LI8L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYWR2YW50YWdlX3dyYXBwZXJcIj5cclxuICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL3Byb2dyZXNzLmpwZ1wiIGFsdD1cItCf0YDQtdC40LzRg9GJ0LXRgdGC0LLQviAtINC+0YLRgdC70LXQttC40LLQsNC90LjQtSDQv9GA0L7Qs9GA0LXRgdGB0LBcIiBjbGFzcz1cImFkdmFudGFnZS1pbWFnZVwiPlxyXG4gICAgICAgIDxoMiBjbGFzcz1cImFkdmFudGFnZS1oZWFkZXJcIj7Qn9GA0L7Qs9GA0LXRgdGBPC9oMj5cclxuICAgICAgICA8cCBjbGFzcz1cImFkdmFudGFnZS10ZXh0XCI+0JfQsNGA0LXQs9C40YHRgtGA0LjRgNGD0LnRgdCwINC4INC+0YLQu9C10LbQuNCy0LDQuSDRgdCy0L7QuSDQv9GA0L7Qs9GA0LXRgdGBINC60LDQttC00YvQuSDQtNC10L3RjDwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJhZHZhbnRhZ2Vfd3JhcHBlclwiPlxyXG4gICAgICAgIDxpbWcgc3JjPVwiLi9hc3NldHMvdm9jYWIuanBnXCIgYWx0PVwi0J/RgNC10LjQvNGD0YnQtdGB0YLQstC+IC0gY9C70L7QstCw0YDRjCDRgdC+INGB0LvQvtC20L3Ri9C80Lgg0YHQu9C+0LLQsNC80LhcIiBjbGFzcz1cImFkdmFudGFnZS1pbWFnZVwiPlxyXG4gICAgICAgIDxoMiBjbGFzcz1cImFkdmFudGFnZS1oZWFkZXJcIj7QodC70L7QstCw0YDRjDwvaDI+XHJcbiAgICAgICAgPHAgY2xhc3M9XCJhZHZhbnRhZ2UtdGV4dFwiPtCh0L7RhdGA0LDQvdGP0Lkg0YHQu9C+0LLQsCDQsiDRgdC70L7QstCw0YDRjCwg0YfRgtC+0LHRiyDQstGL0YPRh9C40YLRjCDQuNGFINC/0L7Qt9C20LU8L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9zZWN0aW9uPlxyXG4gIDwvc2VjdGlvbj5cclxuICA8c2VjdGlvbiBjbGFzcz1cInRlYW0tc2VjdGlvblwiPlxyXG4gICAgPGgyIGNsYXNzPVwidGVhbS1zZWN0aW9uLWhlYWRlclwiPtCd0LDRiNCwINC60L7QvNCw0L3QtNCwPC9oMj5cclxuICAgIDxkaXYgY2xhc3M9XCJ0ZWFtLW1lbWJlcnNcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cInRlYW0tbWVtYmVyXCI+XHJcbiAgICAgICAgPGltZyBzcmM9XCIuL2Fzc2V0cy9zdmV0YS1waG90by5qcGdcIiBhbHQ9XCJcIiBjbGFzcz1cInRlYW0tbWVtYmVyLWltZ1wiPlxyXG4gICAgICAgIDxoMyBjbGFzcz1cInRlYW0tbWVtYmVyLW5hbWVcIj7QodCy0LXRgtC70LDQvdCwPC9oMz5cclxuICAgICAgICA8cCBjbGFzcz1cIm1lbWJlci1kdXR5XCI+VGVhbSBsZWFkLCBkZXZlbG9wZXIsIGRlc2lnbmVyPC9wPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZW1iZXItYWN0aW9uc1wiPlxyXG4gICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICA8bGk+0KPRh9C10LHQvdC40Lo8L2xpPlxyXG4gICAgICAgICAgICA8bGk+0JTQuNC30LDQudC9INC/0YDQuNC70L7QttC10L3QuNGPPC9saT5cclxuICAgICAgICAgICAgPGxpPtCg0LXQs9C40YHRgtGA0LDRhtC40Y8g0Lgg0LDQstGC0L7RgNC40LfQsNGG0LjRjzwvbGk+XHJcbiAgICAgICAgICAgIDxsaT7Qk9C70LDQstC90LDRjyDRgdGC0YDQsNC90LjRhtCwPC9saT5cclxuICAgICAgICAgICAgPGxpPtCg0LXQvdC00LXRgCDRgdGC0YDQsNC90LjRhtGLINGB0YLQsNGC0LjRgdGC0LjQutCwPC9saT5cclxuICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGEgY2xhc3M9XCJnaXQtaWNvblwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vc3ZldGFyYWNob2tcIiB0YXJnZXQ9XCJfYmxhbmtcIj48L2E+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidGVhbS1tZW1iZXJcIj5cclxuICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL2V2Z2VuLXBob3RvLmpwZ1wiIGFsdD1cIlwiIGNsYXNzPVwidGVhbS1tZW1iZXItaW1nXCI+XHJcbiAgICAgICAgPGgzIGNsYXNzPVwidGVhbS1tZW1iZXItbmFtZVwiPtCV0LLQs9C10L3QuNC5PC9oMz5cclxuICAgICAgICA8cCBjbGFzcz1cIm1lbWJlci1kdXR5XCI+RGV2ZWxvcGVyLCBkZXNpZ25lcjwvcD5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibWVtYmVyLWFjdGlvbnNcIj5cclxuICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgPGxpPtCg0L7Rg9GC0LjQvdCzPC9saT5cclxuICAgICAgICAgICAgPGxpPtCY0LPRgNCwINCh0L/RgNC40L3RgjwvbGk+XHJcbiAgICAgICAgICAgIDxsaT7Qm9C+0LPQuNC60LAg0YDQsNCx0L7RgtGLINGB0L4g0YHQu9C+0LLQsNC80Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPPC9saT5cclxuICAgICAgICAgICAgPGxpPtCT0YDQsNGE0LjQutC4INC90LAg0YHRgtGA0LDQvdC40YbQtSDRgdGC0LDRgtC40YHRgtC40LrQuDwvbGk+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGEgY2xhc3M9XCJnaXQtaWNvblwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vUGFyeG9tbW1cIiB0YXJnZXQ9XCJfYmxhbmtcIj48L2E+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwidGVhbS1tZW1iZXJcIj5cclxuICAgICAgICA8aW1nIHNyYz1cIi4vYXNzZXRzL3NlcmdleS1waG90by5qcGdcIiBhbHQ9XCJcIiBjbGFzcz1cInRlYW0tbWVtYmVyLWltZ1wiPlxyXG4gICAgICAgIDxoMyBjbGFzcz1cInRlYW0tbWVtYmVyLW5hbWVcIj7QodC10YDQs9C10Lk8L2gzPlxyXG4gICAgICAgIDxwIGNsYXNzPVwibWVtYmVyLWR1dHlcIj5EZXZlbG9wZXIsIGRlc2lnbmVyPC9wPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZW1iZXItYWN0aW9uc1wiPlxyXG4gICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICA8bGk+0JTQtdC/0LvQvtC5INC4INC90LDRgdGC0YDQvtC50LrQsCDQsdGN0LrQtdC90LTQsDwvbGk+XHJcbiAgICAgICAgICAgIDxsaT7QktC30LDQuNC80L7QtNC10LnRgdGC0LLQuNC1INGBIEFQSTwvbGk+XHJcbiAgICAgICAgICAgIDxsaT7QmNCz0YDQsCDQkNGD0LTQuNC+0LLRi9C30L7QsjwvbGk+XHJcbiAgICAgICAgICAgIDxsaT7Qm9C+0LPQuNC60LAg0YTQvtGA0LzQuNGA0L7QstCw0L3QuNGPINGB0YLQsNGC0LjRgdGC0LjQutC4PC9saT5cclxuICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGEgY2xhc3M9XCJnaXQtaWNvblwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vU2lhcmhlaUhhXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PC9hPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIDwvc2VjdGlvbj5gO1xyXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8096\n')},1341:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.api = exports.Api = void 0;\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst enums_1 = __webpack_require__(8875);\r\nconst constants_1 = __webpack_require__(5004);\r\nconst functions_1 = __webpack_require__(9593);\r\nconst makeDailyStatObject_1 = __webpack_require__(8105);\r\nclass Api {\r\n    constructor() {\r\n        this.storage = Storage_1.storage;\r\n    }\r\n    async getWords(queryParam) {\r\n        const url = (0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.words, queryParam);\r\n        const response = await fetch(url);\r\n        return response.json();\r\n    }\r\n    async getWordById(id) {\r\n        const url = (0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.words);\r\n        const response = await fetch(`${url}/${id}`);\r\n        return response.json();\r\n    }\r\n    async createUser(userCreationData) {\r\n        const response = await fetch((0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users), {\r\n            method: enums_1.HTTPMethod.POST,\r\n            headers: {\r\n                'Content-Type': enums_1.ContentType.json,\r\n            },\r\n            body: JSON.stringify(userCreationData),\r\n        });\r\n        if (!response.ok)\r\n            return response.text();\r\n        return response.json();\r\n    }\r\n    async authorize(authData) {\r\n        const response = await fetch((0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.signin), {\r\n            method: enums_1.HTTPMethod.POST,\r\n            headers: {\r\n                'Content-Type': enums_1.ContentType.json,\r\n            },\r\n            body: JSON.stringify(authData),\r\n        });\r\n        if (response.status === 404)\r\n            return 'Incorrect e-mail or password';\r\n        const data = await response.json();\r\n        data.tokenExpires = Date.now() + constants_1.TOKEN_LIFETIME_IN_HOURS * 60 * 60 * 1000;\r\n        return data;\r\n    }\r\n    // need tocken check\r\n    async getUserById(authData) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n            headers: {\r\n                Accept: enums_1.ContentType.json,\r\n            },\r\n        });\r\n        if (response.status === 403)\r\n            return 'UserId not found';\r\n        if (response.status === 401)\r\n            return 'Access token is missing or invalid';\r\n        return response.json();\r\n    }\r\n    async getNewUserToken(authData) {\r\n        const response = await fetch(`${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.tokens}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n            headers: {\r\n                Authorization: `Bearer ${authData.refreshToken}`,\r\n            },\r\n        });\r\n        if (response.status === 403 || response.status === 401)\r\n            return 'Access token is missing, expired or invalid';\r\n        return response.json();\r\n    }\r\n    // need tocken check\r\n    async setUserWord(authData, wordId, userWord) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.words}/${wordId}`, {\r\n            method: enums_1.HTTPMethod.POST,\r\n            headers: {\r\n                'Content-Type': enums_1.ContentType.json,\r\n            },\r\n            body: JSON.stringify(userWord),\r\n        });\r\n        if (response.status === 400) {\r\n            const errorMessage = (await response.json()).error.errors[0].message;\r\n            return errorMessage;\r\n        }\r\n        if (!response.ok)\r\n            return response.text();\r\n        return response.json();\r\n    }\r\n    async getUserWords(authData) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.words}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n        });\r\n        if (!response.ok)\r\n            return response.text();\r\n        return response.json();\r\n    }\r\n    async getUserWordById(authData, wordId) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.words}/${wordId}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n        });\r\n        if (response.status === 400) {\r\n            const errorMessage = (await response.json()).error.errors[0].message;\r\n            return errorMessage;\r\n        }\r\n        if (!response.ok)\r\n            return response.text();\r\n        return response.json();\r\n    }\r\n    async changeUserWord(authData, wordId, userWord) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.words}/${wordId}`, {\r\n            method: enums_1.HTTPMethod.PUT,\r\n            headers: {\r\n                'Content-Type': enums_1.ContentType.json,\r\n            },\r\n            body: JSON.stringify(userWord),\r\n        });\r\n        if (response.status === 400) {\r\n            const errorMessage = (await response.json()).error.errors[0].message;\r\n            return errorMessage;\r\n        }\r\n        if (!response.ok)\r\n            return response.text();\r\n        return response.json();\r\n    }\r\n    async deleteUserWord(authData, wordId) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.words}/${wordId}`, {\r\n            method: enums_1.HTTPMethod.DELETE,\r\n        });\r\n        return response.ok;\r\n    }\r\n    async getAggregatedUserWords(authData, queryParam, filterStr) {\r\n        const paramString = filterStr\r\n            ? (0, functions_1.generateQueryString)({ ...queryParam, ...{ filter: filterStr } })\r\n            : (0, functions_1.generateQueryString)(queryParam);\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.aggregatedWords}${paramString}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n        });\r\n        if (!response.ok)\r\n            return response.text();\r\n        const data = await response.json();\r\n        return data[0].paginatedResults;\r\n    }\r\n    async getTotalUserWords(authData, filterStr, queryParam) {\r\n        const paramString = queryParam\r\n            ? (0, functions_1.generateQueryString)({ ...queryParam, ...{ filter: filterStr } })\r\n            : (0, functions_1.generateQueryString)({ filter: filterStr });\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.aggregatedWords}${paramString}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n        });\r\n        if (!response.ok)\r\n            return response.text();\r\n        const data = await response.json();\r\n        if (data[0].totalCount.length) {\r\n            return data[0].totalCount[0].count;\r\n        }\r\n        return 'В вашем учебнике нет Сложных слов';\r\n    }\r\n    async getAggregatedUserWord(authData, wordId) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.aggregatedWords}/${wordId}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n        });\r\n        if (response.status === 400) {\r\n            const errorMessage = (await response.json()).error.errors[0].message;\r\n            return errorMessage;\r\n        }\r\n        if (!response.ok)\r\n            return response.text();\r\n        const data = await response.json();\r\n        return data[0];\r\n    }\r\n    async setStatistic(authData, statistic) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.statistics}`, {\r\n            method: enums_1.HTTPMethod.PUT,\r\n            headers: {\r\n                'Content-Type': enums_1.ContentType.json,\r\n            },\r\n            body: JSON.stringify(statistic),\r\n        });\r\n        const data = await response.json();\r\n        if (!response.ok)\r\n            return response.text();\r\n        return data;\r\n    }\r\n    async getStatistic(authData) {\r\n        const response = await this.fetchWithAuth(authData, `${(0, functions_1.makeUrl)(constants_1.BASE_LINK, enums_1.Endpoint.users)}/${authData.userId}${enums_1.Endpoint.statistics}`, {\r\n            method: enums_1.HTTPMethod.GET,\r\n        });\r\n        if (response.status === 404)\r\n            return null;\r\n        if (!response.ok)\r\n            return response.text();\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n    async getStatDataForRender() {\r\n        const userData = this.storage.getUserIdData();\r\n        let dailyStat = [];\r\n        const statData = await this.getStatistic(userData);\r\n        if (statData) {\r\n            dailyStat = (0, makeDailyStatObject_1.makeDailyStat)(statData);\r\n            return dailyStat;\r\n        }\r\n        dailyStat = [];\r\n        return dailyStat;\r\n    }\r\n    async fetchWithAuth(authData, url, options) {\r\n        let token;\r\n        if (authData.tokenExpires > Date.now()) {\r\n            token = authData.token;\r\n        }\r\n        else {\r\n            const newUserData = authData;\r\n            const response = await this.getNewUserToken(authData);\r\n            if (typeof response === 'object') {\r\n                newUserData.token = response.token;\r\n                newUserData.refreshToken = response.refreshToken;\r\n                newUserData.tokenExpires = Date.now() + constants_1.TOKEN_LIFETIME_IN_HOURS * 60 * 60 * 1000;\r\n                Storage_1.storage.setData('UserId', newUserData);\r\n                token = newUserData.token;\r\n            }\r\n        }\r\n        const fetchOptions = options;\r\n        fetchOptions.headers = options.headers || {};\r\n        fetchOptions.headers.Authorization = `Bearer ${token}`;\r\n        return fetch(url, fetchOptions);\r\n    }\r\n}\r\nexports.Api = Api;\r\nexports.api = new Api();\r\n// 401 Unauthorized не тот токен\r\n// 403 Forbidden не тот юзерайди\r\n// 404 у юзера нет статистики Couldn't find a(an) statistic with: \"userId: 630a8bf986a1e800749e9556\"\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1341\n")},7114:(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.storage = exports.Storage = void 0;\r\nclass Storage {\r\n    setData(key, value) {\r\n        if (typeof value === 'object') {\r\n            const strValue = JSON.stringify(value);\r\n            localStorage.setItem(key, strValue);\r\n        }\r\n        else {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n    getData(key) {\r\n        const data = localStorage.getItem(key);\r\n        if (data) {\r\n            const parsedData = JSON.parse(data);\r\n            return parsedData;\r\n        }\r\n        return false;\r\n    }\r\n    getUserIdData() {\r\n        const data = localStorage.getItem('UserId');\r\n        const parsedData = JSON.parse(data);\r\n        return parsedData;\r\n    }\r\n    checkData(key) {\r\n        const keyToCheck = localStorage.getItem(key);\r\n        if (keyToCheck)\r\n            return true;\r\n        return false;\r\n    }\r\n    clear() {\r\n        localStorage.clear();\r\n    }\r\n}\r\nexports.Storage = Storage;\r\nexports.storage = new Storage();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzExNC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLE9BQU87SUFDbEIsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFzQjtRQUN6QyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3JDO2FBQU07WUFDTCxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVztRQUNqQixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQyxPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUFDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxhQUFhO1FBQ1gsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUUsQ0FBQztRQUM3QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBVztRQUNuQixNQUFNLFVBQVUsR0FBa0IsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1RCxJQUFJLFVBQVU7WUFBRSxPQUFPLElBQUksQ0FBQztRQUM1QixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxLQUFLO1FBQ0gsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQWpDRCwwQkFpQ0M7QUFFWSxlQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy9TdG9yYWdlL1N0b3JhZ2UudHM/OTA1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRob3JpemF0aW9uRGF0YSB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2Uge1xyXG4gIHNldERhdGEoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBvYmplY3QpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIGNvbnN0IHN0clZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHN0clZhbHVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YShrZXk6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgcmV0dXJuIHBhcnNlZERhdGE7XHJcbiAgICB9IHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJZERhdGEoKTogQXV0aG9yaXphdGlvbkRhdGEge1xyXG4gICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdVc2VySWQnKSE7XHJcbiAgICBjb25zdCBwYXJzZWREYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIHJldHVybiBwYXJzZWREYXRhO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tEYXRhKGtleTogc3RyaW5nKTogQm9vbGVhbiB7XHJcbiAgICBjb25zdCBrZXlUb0NoZWNrOiBzdHJpbmcgfCBudWxsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgIGlmIChrZXlUb0NoZWNrKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNsZWFyKCkge1xyXG4gICAgbG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7114\n")},8909:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.DayStatUI = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst findCorrectAnswersPercent_1 = __webpack_require__(8346);\r\nconst constants_1 = __webpack_require__(5004);\r\nclass DayStatUI {\r\n    constructor(data) {\r\n        this.wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['wrapper_day-stat'] });\r\n        [this.date, this.obj] = data;\r\n    }\r\n    drawFirstDayStat() {\r\n        const dayWrap = (0, createNode_1.default)({ tag: 'div', classes: ['todaystat-wrapper'] });\r\n        const textRow = (0, createNode_1.default)({ tag: 'div', classes: ['date-row'] });\r\n        const firstRow = (0, createNode_1.default)({ tag: 'div', classes: ['data-wrapper-row1'] });\r\n        const secondRow = (0, createNode_1.default)({ tag: 'div', classes: ['data-wrapper-row2'] });\r\n        const dayText = (0, createNode_1.default)({ tag: 'p', classes: ['first-day-text'], inner: 'Последний раз вы занимались' });\r\n        const dayData = (0, createNode_1.default)({ tag: 'p', classes: ['first-day-date'] });\r\n        const today = new Date();\r\n        if (this.date === today.toLocaleDateString()) {\r\n            dayData.innerHTML = 'Сегодня';\r\n        }\r\n        else {\r\n            dayData.innerHTML = `${this.date}`;\r\n        }\r\n        const corrWordAnsw = (0, findCorrectAnswersPercent_1.findCorrectAnswPercent)(this.obj.words.correctAnswers, this.obj.words.incorrectAnswers);\r\n        const corrAudioAnsw = (0, findCorrectAnswersPercent_1.findCorrectAnswPercent)(this.obj.games.audiocall.correctAnswers, this.obj.games.audiocall.incorrectAnswers);\r\n        const corrSprintAnsw = (0, findCorrectAnswersPercent_1.findCorrectAnswPercent)(this.obj.games.sprint.correctAnswers, this.obj.games.sprint.incorrectAnswers);\r\n        const wordWrap = this.createColumn('word', 'Слова', constants_1.WORDS_DATA_TEXT, [this.obj.words.newWords, this.obj.words.learnedWords, corrWordAnsw]);\r\n        const audioWrap = this.createColumn('word', 'Игра Audiocall', constants_1.GAMES_DATA_TEXT, [this.obj.games.audiocall.newWords, corrAudioAnsw, this.obj.games.audiocall.bestSeries]);\r\n        const sprintWrap = this.createColumn('word', 'Игра Sprint', constants_1.GAMES_DATA_TEXT, [this.obj.games.sprint.newWords, corrSprintAnsw, this.obj.games.sprint.bestSeries]);\r\n        textRow.append(dayText, dayData);\r\n        firstRow.append(textRow, audioWrap);\r\n        secondRow.append(wordWrap, sprintWrap);\r\n        dayWrap.append(firstRow, secondRow);\r\n        return dayWrap;\r\n    }\r\n    drawDayStat() {\r\n        const dayWrap = (0, createNode_1.default)({ tag: 'div', classes: ['daystat-wrapper'] });\r\n        const day = (0, createNode_1.default)({ tag: 'p', classes: ['date-text'], inner: `${this.date}` });\r\n        const corrWordAnsw = (0, findCorrectAnswersPercent_1.findCorrectAnswPercent)(this.obj.words.correctAnswers, this.obj.words.incorrectAnswers);\r\n        const corrAudioAnsw = (0, findCorrectAnswersPercent_1.findCorrectAnswPercent)(this.obj.games.audiocall.correctAnswers, this.obj.games.audiocall.incorrectAnswers);\r\n        const corrSprintAnsw = (0, findCorrectAnswersPercent_1.findCorrectAnswPercent)(this.obj.games.sprint.correctAnswers, this.obj.games.sprint.incorrectAnswers);\r\n        const wordWrap = this.createColumn('word', 'Слова', constants_1.WORDS_DATA_TEXT, [this.obj.words.newWords, this.obj.words.learnedWords, corrWordAnsw]);\r\n        const audioWrap = this.createColumn('word', 'Игра Audiocall', constants_1.GAMES_DATA_TEXT, [this.obj.games.audiocall.newWords, corrAudioAnsw, this.obj.games.audiocall.bestSeries]);\r\n        const sprintWrap = this.createColumn('word', 'Игра Sprint', constants_1.GAMES_DATA_TEXT, [this.obj.games.sprint.newWords, corrSprintAnsw, this.obj.games.sprint.bestSeries]);\r\n        dayWrap.append(day, wordWrap, audioWrap, sprintWrap);\r\n        return dayWrap;\r\n    }\r\n    createColumn(classData, inner, params, values) {\r\n        const wrap = (0, createNode_1.default)({ tag: 'div', classes: [`${classData}-wrapper`] });\r\n        const text = (0, createNode_1.default)({ tag: 'p', classes: [`${classData}-text`], inner: `${inner}` });\r\n        const list = (0, createNode_1.default)({ tag: 'div', classes: ['stat-data-items'] });\r\n        const listParams = [];\r\n        params.forEach((param) => {\r\n            const paramText = (0, createNode_1.default)({ tag: 'p', classes: ['stat-data-param'], inner: param });\r\n            listParams.push(paramText);\r\n        });\r\n        const listValues = [];\r\n        values.forEach((value) => {\r\n            const valueText = (0, createNode_1.default)({ tag: 'p', classes: ['stat-data-value'], inner: `${String(value)}` });\r\n            listValues.push(valueText);\r\n        });\r\n        for (let i = 0; i < params.length; i += 1) {\r\n            const listItem = (0, createNode_1.default)({ tag: 'div', classes: ['stat-data-item'] });\r\n            listItem.append(listParams[i], listValues[i]);\r\n            list.append(listItem);\r\n        }\r\n        wrap.append(text, list);\r\n        return wrap;\r\n    }\r\n}\r\nexports.DayStatUI = DayStatUI;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8909\n")},5021:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StatisticUI = void 0;\r\nconst api_1 = __webpack_require__(1341);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst DayStatUI_1 = __webpack_require__(8909);\r\nclass StatisticUI {\r\n    // mainWrapper: HTMLElement;\r\n    constructor() {\r\n        this.api = api_1.api;\r\n        this.storage = Storage_1.storage;\r\n        // this.mainWrapper = createNode({ tag: 'div', classes: ['wrapper_statistic'] });\r\n        this.dailyWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['wrapper_daily-stat'] });\r\n    }\r\n    async drawDailyStat() {\r\n        this.dailyWrapper.innerHTML = '';\r\n        const data = await this.api.getStatDataForRender();\r\n        if (data.length) {\r\n            data.shift();\r\n            data.forEach((date) => {\r\n                const day = new DayStatUI_1.DayStatUI(date);\r\n                const card = day.drawDayStat();\r\n                this.dailyWrapper.append(card);\r\n            });\r\n            return this.dailyWrapper;\r\n        }\r\n        this.dailyWrapper.innerHTML = '<p>У вас пока нет статистики. Поиграйте в игру и она появится.</p>';\r\n        return this.dailyWrapper;\r\n    }\r\n    async drawTodayStat() {\r\n        const data = await this.api.getStatDataForRender();\r\n        console.log(data);\r\n        if (data.length) {\r\n            const dayUi = new DayStatUI_1.DayStatUI(data.shift());\r\n            const dailyCard = dayUi.drawFirstDayStat();\r\n            return dailyCard;\r\n        }\r\n        // this.dailyWrapper.innerHTML = '';\r\n        return this.dailyWrapper;\r\n    }\r\n}\r\nexports.StatisticUI = StatisticUI;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAyMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx3Q0FBbUM7QUFDbkMsNENBQTZDO0FBRTdDLGdFQUE2QztBQUM3Qyw4Q0FBd0M7QUFFeEMsTUFBYSxXQUFXO0lBT3RCLDRCQUE0QjtJQUU1QjtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsU0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxpQkFBTyxDQUFDO1FBQ3ZCLGlGQUFpRjtRQUNqRixJQUFJLENBQUMsWUFBWSxHQUFHLHdCQUFVLEVBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYTtRQUN4QixJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDakMsTUFBTSxJQUFJLEdBQTZCLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzdFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDcEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxxQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQzFCO1FBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsb0VBQW9FLENBQUM7UUFDckcsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYTtRQUN4QixNQUFNLElBQUksR0FBNkIsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLHFCQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBNEIsQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQzNDLE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBQ0Qsb0NBQW9DO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUExQ0Qsa0NBMENDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL1VzZXJTdGF0aXN0aWMvU3RhdGlzdGljVUkudHM/YTY3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGkgfSBmcm9tICcuLi9Nb2RlbC9hcGknO1xyXG5pbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSAnLi4vU3RvcmFnZS9TdG9yYWdlJztcclxuaW1wb3J0IHsgRGFpbHlTdGF0T2JqIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCBjcmVhdGVOb2RlIGZyb20gJy4uL3V0aWxzL2NyZWF0ZU5vZGUnO1xyXG5pbXBvcnQgeyBEYXlTdGF0VUkgfSBmcm9tICcuL0RheVN0YXRVSSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhdGlzdGljVUkge1xyXG4gIGFwaTogdHlwZW9mIGFwaTtcclxuXHJcbiAgc3RvcmFnZTogdHlwZW9mIHN0b3JhZ2U7XHJcblxyXG4gIGRhaWx5V3JhcHBlcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIC8vIG1haW5XcmFwcGVyOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmFwaSA9IGFwaTtcclxuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XHJcbiAgICAvLyB0aGlzLm1haW5XcmFwcGVyID0gY3JlYXRlTm9kZSh7IHRhZzogJ2RpdicsIGNsYXNzZXM6IFsnd3JhcHBlcl9zdGF0aXN0aWMnXSB9KTtcclxuICAgIHRoaXMuZGFpbHlXcmFwcGVyID0gY3JlYXRlTm9kZSh7IHRhZzogJ2RpdicsIGNsYXNzZXM6IFsnd3JhcHBlcl9kYWlseS1zdGF0J10gfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZHJhd0RhaWx5U3RhdCgpIHtcclxuICAgIHRoaXMuZGFpbHlXcmFwcGVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgY29uc3QgZGF0YTogW3N0cmluZywgRGFpbHlTdGF0T2JqXVtdID0gYXdhaXQgdGhpcy5hcGkuZ2V0U3RhdERhdGFGb3JSZW5kZXIoKTtcclxuICAgIGlmIChkYXRhLmxlbmd0aCkge1xyXG4gICAgICBkYXRhLnNoaWZ0KCk7XHJcbiAgICAgIGRhdGEuZm9yRWFjaCgoZGF0ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRheSA9IG5ldyBEYXlTdGF0VUkoZGF0ZSk7XHJcbiAgICAgICAgY29uc3QgY2FyZCA9IGRheS5kcmF3RGF5U3RhdCgpO1xyXG4gICAgICAgIHRoaXMuZGFpbHlXcmFwcGVyLmFwcGVuZChjYXJkKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiB0aGlzLmRhaWx5V3JhcHBlcjtcclxuICAgIH0gdGhpcy5kYWlseVdyYXBwZXIuaW5uZXJIVE1MID0gJzxwPtCjINCy0LDRgSDQv9C+0LrQsCDQvdC10YIg0YHRgtCw0YLQuNGB0YLQuNC60LguINCf0L7QuNCz0YDQsNC50YLQtSDQsiDQuNCz0YDRgyDQuCDQvtC90LAg0L/QvtGP0LLQuNGC0YHRjy48L3A+JztcclxuICAgIHJldHVybiB0aGlzLmRhaWx5V3JhcHBlcjtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBkcmF3VG9kYXlTdGF0KCkge1xyXG4gICAgY29uc3QgZGF0YTogW3N0cmluZywgRGFpbHlTdGF0T2JqXVtdID0gYXdhaXQgdGhpcy5hcGkuZ2V0U3RhdERhdGFGb3JSZW5kZXIoKTtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgaWYgKGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IGRheVVpID0gbmV3IERheVN0YXRVSShkYXRhLnNoaWZ0KCkgYXMgW3N0cmluZywgRGFpbHlTdGF0T2JqXSk7XHJcbiAgICAgIGNvbnN0IGRhaWx5Q2FyZCA9IGRheVVpLmRyYXdGaXJzdERheVN0YXQoKTtcclxuICAgICAgcmV0dXJuIGRhaWx5Q2FyZDtcclxuICAgIH1cclxuICAgIC8vIHRoaXMuZGFpbHlXcmFwcGVyLmlubmVySFRNTCA9ICcnO1xyXG4gICAgcmV0dXJuIHRoaXMuZGFpbHlXcmFwcGVyO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5021\n")},7605:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserStatistic = void 0;\r\n/* eslint-disable no-restricted-syntax */\r\nconst api_1 = __webpack_require__(1341);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst enums_1 = __webpack_require__(8875);\r\nfunction getEmptyStatObject() {\r\n    const date = (new Date()).toLocaleDateString();\r\n    const statObj = {\r\n        learnedWords: 0,\r\n        optional: {\r\n            words: {\r\n                [date]: {\r\n                    newWords: 0,\r\n                    learnedWords: 0,\r\n                    correctAnswers: 0,\r\n                    incorrectAnswers: 0,\r\n                },\r\n            },\r\n            games: {\r\n                audiocall: {\r\n                    [date]: {\r\n                        newWords: 0,\r\n                        currentSeries: 0,\r\n                        bestSeries: 0,\r\n                        correctAnswers: 0,\r\n                        incorrectAnswers: 0,\r\n                    },\r\n                },\r\n                sprint: {\r\n                    [date]: {\r\n                        newWords: 0,\r\n                        currentSeries: 0,\r\n                        bestSeries: 0,\r\n                        correctAnswers: 0,\r\n                        incorrectAnswers: 0,\r\n                    },\r\n                },\r\n            },\r\n        },\r\n    };\r\n    return statObj;\r\n}\r\nclass UserStatistic {\r\n    constructor(userData, currentGame, isCorrect, userWord) {\r\n        this.userData = userData;\r\n        this.currentGame = currentGame;\r\n        this.isCorrect = isCorrect;\r\n        this.learnedWords = 0;\r\n        this.words = {};\r\n        this.games = { audiocall: {}, sprint: {} };\r\n        this.gameNames = [enums_1.GAME.AUDIOCALL, enums_1.GAME.SPRINT];\r\n        this.userData = userData;\r\n        this.currentGame = currentGame;\r\n        this.isCorrect = isCorrect;\r\n        this.isWordNew = typeof userWord === 'string';\r\n    }\r\n    static async increaseLearnedWordsCount() {\r\n        const userData = Storage_1.storage.getUserIdData();\r\n        const statisticObj = await api_1.api.getStatistic(userData);\r\n        const date = (new Date()).toLocaleDateString();\r\n        if (statisticObj !== null && typeof statisticObj === 'object') {\r\n            statisticObj.learnedWords += 1;\r\n            if (!statisticObj.optional.words[date]) {\r\n                const emptyObject = getEmptyStatObject();\r\n                statisticObj.optional.words[date] = emptyObject.optional.words[date];\r\n                statisticObj.optional.games.audiocall[date] = emptyObject.optional.games.audiocall[date];\r\n                statisticObj.optional.games.sprint[date] = emptyObject.optional.games.sprint[date];\r\n            }\r\n            statisticObj.optional.words[date].learnedWords += 1;\r\n            const statistic = {\r\n                learnedWords: statisticObj.learnedWords,\r\n                optional: statisticObj.optional,\r\n            };\r\n            api_1.api.setStatistic(userData, statistic);\r\n            // return\r\n        }\r\n        else if (statisticObj === null) {\r\n            const statistic = getEmptyStatObject();\r\n            statistic.learnedWords += 1;\r\n            statistic.optional.words[date].learnedWords += 1;\r\n            api_1.api.setStatistic(userData, statistic);\r\n        }\r\n    }\r\n    static async decreaseLearnedWordsCount() {\r\n        const userData = Storage_1.storage.getUserIdData();\r\n        const statisticObj = await api_1.api.getStatistic(userData);\r\n        const date = (new Date()).toLocaleDateString();\r\n        if (statisticObj !== null && typeof statisticObj === 'object') {\r\n            if (statisticObj.learnedWords <= 0)\r\n                return;\r\n            statisticObj.learnedWords -= 1;\r\n            statisticObj.optional.words[date].learnedWords -= 1;\r\n            const statistic = {\r\n                learnedWords: statisticObj.learnedWords,\r\n                optional: statisticObj.optional,\r\n            };\r\n            api_1.api.setStatistic(userData, statistic);\r\n        }\r\n        else if (statisticObj === null) {\r\n            api_1.api.setStatistic(userData, getEmptyStatObject());\r\n        }\r\n    }\r\n    async update() {\r\n        const statisticObj = await api_1.api.getStatistic(this.userData);\r\n        if (typeof statisticObj === 'object' && statisticObj !== null) {\r\n            this.learnedWords = statisticObj.learnedWords;\r\n            this.words = statisticObj.optional.words;\r\n            this.games = statisticObj.optional.games;\r\n        }\r\n        this.updateStatistic();\r\n    }\r\n    updateStatistic() {\r\n        const date = (new Date()).toLocaleDateString();\r\n        // words\r\n        if (!this.words[date])\r\n            this.initDateInWordStatistic(date);\r\n        if (this.isWordNew)\r\n            this.words[date].newWords += 1;\r\n        if (this.isCorrect) {\r\n            this.words[date].correctAnswers += 1;\r\n        }\r\n        else {\r\n            this.words[date].incorrectAnswers += 1;\r\n        }\r\n        // games\r\n        for (const game of this.gameNames) {\r\n            if (!this.games[game][date])\r\n                this.initDateInGameStatistic(date, game);\r\n        }\r\n        const gameStatistic = this.games[this.currentGame][date];\r\n        if (this.isWordNew)\r\n            gameStatistic.newWords += 1;\r\n        if (this.isCorrect) {\r\n            gameStatistic.correctAnswers += 1;\r\n            gameStatistic.currentSeries += 1;\r\n            if (gameStatistic.currentSeries > gameStatistic.bestSeries) {\r\n                gameStatistic.bestSeries = gameStatistic.currentSeries;\r\n            }\r\n        }\r\n        else {\r\n            gameStatistic.incorrectAnswers += 1;\r\n            gameStatistic.currentSeries = 0;\r\n        }\r\n        this.sendStatistic();\r\n    }\r\n    sendStatistic() {\r\n        const test = api_1.api.setStatistic(this.userData, {\r\n            learnedWords: this.learnedWords,\r\n            optional: {\r\n                words: this.words,\r\n                games: this.games,\r\n            },\r\n        });\r\n        console.log(test);\r\n    }\r\n    initDateInWordStatistic(date) {\r\n        this.words[date] = {\r\n            newWords: 0,\r\n            learnedWords: 0,\r\n            correctAnswers: 0,\r\n            incorrectAnswers: 0,\r\n        };\r\n    }\r\n    initDateInGameStatistic(date, game) {\r\n        this.games[game][date] = {\r\n            newWords: 0,\r\n            currentSeries: 0,\r\n            bestSeries: 0,\r\n            correctAnswers: 0,\r\n            incorrectAnswers: 0,\r\n        };\r\n    }\r\n}\r\nexports.UserStatistic = UserStatistic;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixJQUFJLENBQUMsQ0FBQztZQUNwQyxhQUFhLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztTQUNqQztRQUVELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sSUFBSSxHQUFHLFNBQUcsQ0FBQyxZQUFZLENBQzNCLElBQUksQ0FBQyxRQUFRLEVBQ2I7WUFDRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDL0IsUUFBUSxFQUFFO2dCQUNSLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2FBQ2xCO1NBQ0YsQ0FDRixDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRUQsdUJBQXVCLENBQUMsSUFBWTtRQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ2pCLFFBQVEsRUFBRSxDQUFDO1lBQ1gsWUFBWSxFQUFFLENBQUM7WUFDZixjQUFjLEVBQUUsQ0FBQztZQUNqQixnQkFBZ0IsRUFBRSxDQUFDO1NBQ3BCLENBQUM7SUFDSixDQUFDO0lBRUQsdUJBQXVCLENBQUMsSUFBWSxFQUFFLElBQVU7UUFDOUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRztZQUN2QixRQUFRLEVBQUUsQ0FBQztZQUNYLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLFVBQVUsRUFBRSxDQUFDO1lBQ2IsY0FBYyxFQUFFLENBQUM7WUFDakIsZ0JBQWdCLEVBQUUsQ0FBQztTQUNwQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBN0lELHNDQTZJQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy9Vc2VyU3RhdGlzdGljL1VzZXJTdGF0aXN0aWMudHM/NzAzNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xyXG5pbXBvcnQgeyBhcGkgfSBmcm9tICcuLi9Nb2RlbC9hcGknO1xyXG5pbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSAnLi4vU3RvcmFnZS9TdG9yYWdlJztcclxuaW1wb3J0IHsgR0FNRSB9IGZyb20gJy4uL3R5cGVzL2VudW1zJztcclxuaW1wb3J0IHtcclxuICBBdXRob3JpemF0aW9uRGF0YSwgR2FtZVN0YXRpc3RpYywgU3RhdGlzdGljLCBVc2VyV29yZCwgV29yZHNTdGF0aXN0aWMsXHJcbn0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcblxyXG5mdW5jdGlvbiBnZXRFbXB0eVN0YXRPYmplY3QoKSB7XHJcbiAgY29uc3QgZGF0ZSA9IChuZXcgRGF0ZSgpKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICBjb25zdCBzdGF0T2JqOiBTdGF0aXN0aWMgPSB7XHJcbiAgICBsZWFybmVkV29yZHM6IDAsXHJcbiAgICBvcHRpb25hbDoge1xyXG4gICAgICB3b3Jkczoge1xyXG4gICAgICAgIFtkYXRlXToge1xyXG4gICAgICAgICAgbmV3V29yZHM6IDAsXHJcbiAgICAgICAgICBsZWFybmVkV29yZHM6IDAsXHJcbiAgICAgICAgICBjb3JyZWN0QW5zd2VyczogMCxcclxuICAgICAgICAgIGluY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgZ2FtZXM6IHtcclxuICAgICAgICBhdWRpb2NhbGw6IHtcclxuICAgICAgICAgIFtkYXRlXToge1xyXG4gICAgICAgICAgICBuZXdXb3JkczogMCxcclxuICAgICAgICAgICAgY3VycmVudFNlcmllczogMCxcclxuICAgICAgICAgICAgYmVzdFNlcmllczogMCxcclxuICAgICAgICAgICAgY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICAgICAgICAgIGluY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3ByaW50OiB7XHJcbiAgICAgICAgICBbZGF0ZV06IHtcclxuICAgICAgICAgICAgbmV3V29yZHM6IDAsXHJcbiAgICAgICAgICAgIGN1cnJlbnRTZXJpZXM6IDAsXHJcbiAgICAgICAgICAgIGJlc3RTZXJpZXM6IDAsXHJcbiAgICAgICAgICAgIGNvcnJlY3RBbnN3ZXJzOiAwLFxyXG4gICAgICAgICAgICBpbmNvcnJlY3RBbnN3ZXJzOiAwLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9O1xyXG4gIHJldHVybiBzdGF0T2JqO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclN0YXRpc3RpYyB7XHJcbiAgcHJpdmF0ZSBsZWFybmVkV29yZHM6IG51bWJlciA9IDA7XHJcblxyXG4gIHByaXZhdGUgd29yZHM6IFJlY29yZDxzdHJpbmcsIFdvcmRzU3RhdGlzdGljPiA9IHt9O1xyXG5cclxuICBwcml2YXRlIGdhbWVzOiB7IGF1ZGlvY2FsbDogUmVjb3JkPHN0cmluZywgR2FtZVN0YXRpc3RpYz4sXHJcbiAgICBzcHJpbnQ6IFJlY29yZDxzdHJpbmcsIEdhbWVTdGF0aXN0aWM+IH0gPSB7IGF1ZGlvY2FsbDoge30sIHNwcmludDoge30gfTtcclxuXHJcbiAgcHJpdmF0ZSBpc1dvcmROZXc6IGJvb2xlYW47XHJcblxyXG4gIHByaXZhdGUgZ2FtZU5hbWVzOiBHQU1FW10gPSBbR0FNRS5BVURJT0NBTEwsIEdBTUUuU1BSSU5UXTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHVzZXJEYXRhOiBBdXRob3JpemF0aW9uRGF0YSxcclxuICAgIHByaXZhdGUgY3VycmVudEdhbWU6IEdBTUUsXHJcbiAgICBwcml2YXRlIGlzQ29ycmVjdDogYm9vbGVhbixcclxuICAgIHVzZXJXb3JkOiBzdHJpbmcgfCBSZXF1aXJlZDxVc2VyV29yZD4sXHJcbiAgKSB7XHJcbiAgICB0aGlzLnVzZXJEYXRhID0gdXNlckRhdGE7XHJcbiAgICB0aGlzLmN1cnJlbnRHYW1lID0gY3VycmVudEdhbWU7XHJcbiAgICB0aGlzLmlzQ29ycmVjdCA9IGlzQ29ycmVjdDtcclxuICAgIHRoaXMuaXNXb3JkTmV3ID0gdHlwZW9mIHVzZXJXb3JkID09PSAnc3RyaW5nJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhc3luYyBpbmNyZWFzZUxlYXJuZWRXb3Jkc0NvdW50KCkge1xyXG4gICAgY29uc3QgdXNlckRhdGEgPSBzdG9yYWdlLmdldFVzZXJJZERhdGEoKTtcclxuICAgIGNvbnN0IHN0YXRpc3RpY09iaiA9IGF3YWl0IGFwaS5nZXRTdGF0aXN0aWModXNlckRhdGEpO1xyXG4gICAgY29uc3QgZGF0ZSA9IChuZXcgRGF0ZSgpKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcclxuICAgIGlmIChzdGF0aXN0aWNPYmogIT09IG51bGwgJiYgdHlwZW9mIHN0YXRpc3RpY09iaiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgc3RhdGlzdGljT2JqLmxlYXJuZWRXb3JkcyArPSAxO1xyXG4gICAgICBpZiAoIXN0YXRpc3RpY09iai5vcHRpb25hbC53b3Jkc1tkYXRlXSkge1xyXG4gICAgICAgIGNvbnN0IGVtcHR5T2JqZWN0ID0gZ2V0RW1wdHlTdGF0T2JqZWN0KCk7XHJcbiAgICAgICAgc3RhdGlzdGljT2JqLm9wdGlvbmFsLndvcmRzW2RhdGVdID0gZW1wdHlPYmplY3Qub3B0aW9uYWwud29yZHNbZGF0ZV07XHJcbiAgICAgICAgc3RhdGlzdGljT2JqLm9wdGlvbmFsLmdhbWVzLmF1ZGlvY2FsbFtkYXRlXSA9IGVtcHR5T2JqZWN0Lm9wdGlvbmFsLmdhbWVzLmF1ZGlvY2FsbFtkYXRlXTtcclxuICAgICAgICBzdGF0aXN0aWNPYmoub3B0aW9uYWwuZ2FtZXMuc3ByaW50W2RhdGVdID0gZW1wdHlPYmplY3Qub3B0aW9uYWwuZ2FtZXMuc3ByaW50W2RhdGVdO1xyXG4gICAgICB9XHJcbiAgICAgIHN0YXRpc3RpY09iai5vcHRpb25hbC53b3Jkc1tkYXRlXS5sZWFybmVkV29yZHMgKz0gMTtcclxuICAgICAgY29uc3Qgc3RhdGlzdGljOiBTdGF0aXN0aWMgPSB7XHJcbiAgICAgICAgbGVhcm5lZFdvcmRzOiBzdGF0aXN0aWNPYmoubGVhcm5lZFdvcmRzLFxyXG4gICAgICAgIG9wdGlvbmFsOiBzdGF0aXN0aWNPYmoub3B0aW9uYWwsXHJcbiAgICAgIH07XHJcbiAgICAgIGFwaS5zZXRTdGF0aXN0aWModXNlckRhdGEsIHN0YXRpc3RpYyk7XHJcbiAgICAgIC8vIHJldHVyblxyXG4gICAgfSBlbHNlIGlmIChzdGF0aXN0aWNPYmogPT09IG51bGwpIHtcclxuICAgICAgY29uc3Qgc3RhdGlzdGljOiBTdGF0aXN0aWMgPSBnZXRFbXB0eVN0YXRPYmplY3QoKTtcclxuICAgICAgc3RhdGlzdGljLmxlYXJuZWRXb3JkcyArPSAxO1xyXG4gICAgICBzdGF0aXN0aWMub3B0aW9uYWwud29yZHNbZGF0ZV0ubGVhcm5lZFdvcmRzICs9IDE7XHJcbiAgICAgIGFwaS5zZXRTdGF0aXN0aWModXNlckRhdGEsIHN0YXRpc3RpYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgZGVjcmVhc2VMZWFybmVkV29yZHNDb3VudCgpIHtcclxuICAgIGNvbnN0IHVzZXJEYXRhID0gc3RvcmFnZS5nZXRVc2VySWREYXRhKCk7XHJcbiAgICBjb25zdCBzdGF0aXN0aWNPYmogPSBhd2FpdCBhcGkuZ2V0U3RhdGlzdGljKHVzZXJEYXRhKTtcclxuICAgIGNvbnN0IGRhdGUgPSAobmV3IERhdGUoKSkudG9Mb2NhbGVEYXRlU3RyaW5nKCk7XHJcbiAgICBpZiAoc3RhdGlzdGljT2JqICE9PSBudWxsICYmIHR5cGVvZiBzdGF0aXN0aWNPYmogPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIGlmIChzdGF0aXN0aWNPYmoubGVhcm5lZFdvcmRzIDw9IDApIHJldHVybjtcclxuICAgICAgc3RhdGlzdGljT2JqLmxlYXJuZWRXb3JkcyAtPSAxO1xyXG4gICAgICBzdGF0aXN0aWNPYmoub3B0aW9uYWwud29yZHNbZGF0ZV0ubGVhcm5lZFdvcmRzIC09IDE7XHJcbiAgICAgIGNvbnN0IHN0YXRpc3RpYzogU3RhdGlzdGljID0ge1xyXG4gICAgICAgIGxlYXJuZWRXb3Jkczogc3RhdGlzdGljT2JqLmxlYXJuZWRXb3JkcyxcclxuICAgICAgICBvcHRpb25hbDogc3RhdGlzdGljT2JqLm9wdGlvbmFsLFxyXG4gICAgICB9O1xyXG4gICAgICBhcGkuc2V0U3RhdGlzdGljKHVzZXJEYXRhLCBzdGF0aXN0aWMpO1xyXG4gICAgfSBlbHNlIGlmIChzdGF0aXN0aWNPYmogPT09IG51bGwpIHtcclxuICAgICAgYXBpLnNldFN0YXRpc3RpYyh1c2VyRGF0YSwgZ2V0RW1wdHlTdGF0T2JqZWN0KCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIHVwZGF0ZSgpIHtcclxuICAgIGNvbnN0IHN0YXRpc3RpY09iaiA9IGF3YWl0IGFwaS5nZXRTdGF0aXN0aWModGhpcy51c2VyRGF0YSk7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRpc3RpY09iaiA9PT0gJ29iamVjdCcgJiYgc3RhdGlzdGljT2JqICE9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMubGVhcm5lZFdvcmRzID0gc3RhdGlzdGljT2JqLmxlYXJuZWRXb3JkcztcclxuICAgICAgdGhpcy53b3JkcyA9IHN0YXRpc3RpY09iai5vcHRpb25hbC53b3JkcztcclxuICAgICAgdGhpcy5nYW1lcyA9IHN0YXRpc3RpY09iai5vcHRpb25hbC5nYW1lcztcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlU3RhdGlzdGljKCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVTdGF0aXN0aWMoKSB7XHJcbiAgICBjb25zdCBkYXRlID0gKG5ldyBEYXRlKCkpLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG5cclxuICAgIC8vIHdvcmRzXHJcbiAgICBpZiAoIXRoaXMud29yZHNbZGF0ZV0pIHRoaXMuaW5pdERhdGVJbldvcmRTdGF0aXN0aWMoZGF0ZSk7XHJcbiAgICBpZiAodGhpcy5pc1dvcmROZXcpIHRoaXMud29yZHNbZGF0ZV0ubmV3V29yZHMgKz0gMTtcclxuICAgIGlmICh0aGlzLmlzQ29ycmVjdCkge1xyXG4gICAgICB0aGlzLndvcmRzW2RhdGVdLmNvcnJlY3RBbnN3ZXJzICs9IDE7XHJcbiAgICB9IGVsc2UgeyB0aGlzLndvcmRzW2RhdGVdLmluY29ycmVjdEFuc3dlcnMgKz0gMTsgfVxyXG5cclxuICAgIC8vIGdhbWVzXHJcbiAgICBmb3IgKGNvbnN0IGdhbWUgb2YgdGhpcy5nYW1lTmFtZXMpIHtcclxuICAgICAgaWYgKCF0aGlzLmdhbWVzW2dhbWVdW2RhdGVdKSB0aGlzLmluaXREYXRlSW5HYW1lU3RhdGlzdGljKGRhdGUsIGdhbWUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZ2FtZVN0YXRpc3RpYyA9IHRoaXMuZ2FtZXNbdGhpcy5jdXJyZW50R2FtZV1bZGF0ZV07XHJcbiAgICBpZiAodGhpcy5pc1dvcmROZXcpIGdhbWVTdGF0aXN0aWMubmV3V29yZHMgKz0gMTtcclxuICAgIGlmICh0aGlzLmlzQ29ycmVjdCkge1xyXG4gICAgICBnYW1lU3RhdGlzdGljLmNvcnJlY3RBbnN3ZXJzICs9IDE7XHJcbiAgICAgIGdhbWVTdGF0aXN0aWMuY3VycmVudFNlcmllcyArPSAxO1xyXG4gICAgICBpZiAoZ2FtZVN0YXRpc3RpYy5jdXJyZW50U2VyaWVzID4gZ2FtZVN0YXRpc3RpYy5iZXN0U2VyaWVzKSB7XHJcbiAgICAgICAgZ2FtZVN0YXRpc3RpYy5iZXN0U2VyaWVzID0gZ2FtZVN0YXRpc3RpYy5jdXJyZW50U2VyaWVzO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBnYW1lU3RhdGlzdGljLmluY29ycmVjdEFuc3dlcnMgKz0gMTtcclxuICAgICAgZ2FtZVN0YXRpc3RpYy5jdXJyZW50U2VyaWVzID0gMDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNlbmRTdGF0aXN0aWMoKTtcclxuICB9XHJcblxyXG4gIHNlbmRTdGF0aXN0aWMoKSB7XHJcbiAgICBjb25zdCB0ZXN0ID0gYXBpLnNldFN0YXRpc3RpYyhcclxuICAgICAgdGhpcy51c2VyRGF0YSxcclxuICAgICAge1xyXG4gICAgICAgIGxlYXJuZWRXb3JkczogdGhpcy5sZWFybmVkV29yZHMsXHJcbiAgICAgICAgb3B0aW9uYWw6IHtcclxuICAgICAgICAgIHdvcmRzOiB0aGlzLndvcmRzLFxyXG4gICAgICAgICAgZ2FtZXM6IHRoaXMuZ2FtZXMsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICk7XHJcbiAgICBjb25zb2xlLmxvZyh0ZXN0KTtcclxuICB9XHJcblxyXG4gIGluaXREYXRlSW5Xb3JkU3RhdGlzdGljKGRhdGU6IHN0cmluZykge1xyXG4gICAgdGhpcy53b3Jkc1tkYXRlXSA9IHtcclxuICAgICAgbmV3V29yZHM6IDAsXHJcbiAgICAgIGxlYXJuZWRXb3JkczogMCxcclxuICAgICAgY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICAgIGluY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaW5pdERhdGVJbkdhbWVTdGF0aXN0aWMoZGF0ZTogc3RyaW5nLCBnYW1lOiBHQU1FKSB7XHJcbiAgICB0aGlzLmdhbWVzW2dhbWVdW2RhdGVdID0ge1xyXG4gICAgICBuZXdXb3JkczogMCxcclxuICAgICAgY3VycmVudFNlcmllczogMCxcclxuICAgICAgYmVzdFNlcmllczogMCxcclxuICAgICAgY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICAgIGluY29ycmVjdEFuc3dlcnM6IDAsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7605\n")},3584:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.wordController = exports.WordController = void 0;\r\nconst api_1 = __webpack_require__(1341);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst UserStatistic_1 = __webpack_require__(7605);\r\nclass WordController {\r\n    constructor() {\r\n        this.api = api_1.api;\r\n        this.storage = Storage_1.storage;\r\n        this.isAuthorized = this.checkAuthorized();\r\n    }\r\n    checkAuthorized() {\r\n        if (localStorage.getItem('UserId') !== null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    createNewUserWord() {\r\n        return {\r\n            difficulty: 'easy',\r\n            optional: {\r\n                learned: false,\r\n                learnedDate: 'not learned',\r\n                correctAnswers: 0,\r\n                incorrectAnswers: 0,\r\n                correctSeries: 0,\r\n            },\r\n        };\r\n    }\r\n    createUserWordByAnswer(correct) {\r\n        const newWord = this.createNewUserWord();\r\n        if (correct) {\r\n            newWord.optional.correctAnswers = 1;\r\n            newWord.optional.correctSeries = 1;\r\n        }\r\n        else {\r\n            newWord.optional.incorrectAnswers = 1;\r\n        }\r\n        return newWord;\r\n    }\r\n    changeUserWordByAnswer(userWord, correct) {\r\n        const changedWord = userWord;\r\n        if (correct) {\r\n            changedWord.optional.correctAnswers += 1;\r\n            changedWord.optional.correctSeries += 1;\r\n            if ((changedWord.difficulty === 'easy' && changedWord.optional.correctSeries === 3)\r\n                || (changedWord.difficulty === 'hard' && changedWord.optional.correctSeries === 5)) {\r\n                changedWord.optional.learned = true;\r\n                changedWord.difficulty = 'easy';\r\n                UserStatistic_1.UserStatistic.increaseLearnedWordsCount();\r\n            }\r\n        }\r\n        else {\r\n            if ((changedWord.difficulty === 'easy' && changedWord.optional.correctSeries >= 3)\r\n                || (changedWord.difficulty === 'hard' && changedWord.optional.correctSeries >= 5)) {\r\n                if (changedWord.optional.learnedDate === (new Date()).toLocaleDateString()) {\r\n                    UserStatistic_1.UserStatistic.decreaseLearnedWordsCount();\r\n                }\r\n            }\r\n            changedWord.optional.correctSeries = 0;\r\n            changedWord.optional.incorrectAnswers += 1;\r\n            changedWord.optional.learned = false;\r\n        }\r\n        return changedWord;\r\n    }\r\n    async sendWordOnServer(wordId, correct, game) {\r\n        if (!this.isAuthorized)\r\n            return;\r\n        const userData = this.storage.getUserIdData();\r\n        const userWord = await this.api.getUserWordById(userData, wordId);\r\n        new UserStatistic_1.UserStatistic(userData, game, correct, userWord).update();\r\n        if (typeof userWord === 'object') {\r\n            const changedWord = this.changeUserWordByAnswer(userWord, correct);\r\n            this.api.changeUserWord(userData, wordId, { difficulty: changedWord.difficulty, optional: changedWord.optional });\r\n        }\r\n        else {\r\n            const newUserWord = this.createUserWordByAnswer(correct);\r\n            this.api.setUserWord(userData, wordId, newUserWord);\r\n        }\r\n    }\r\n    async getUserWords() {\r\n        const userData = this.storage.getUserIdData();\r\n        const userWords = await this.api.getUserWords(userData);\r\n        console.log(userWords);\r\n    }\r\n    async updateHardWord(difficulty, wordId) {\r\n        const userData = this.storage.getData('UserId');\r\n        const word = await api_1.api.getUserWordById(userData, wordId);\r\n        if (typeof word === 'object') {\r\n            word.difficulty = difficulty;\r\n            await api_1.api.changeUserWord(userData, wordId, { difficulty: word.difficulty, optional: word.optional });\r\n        }\r\n        else {\r\n            const newWord = this.createNewUserWord();\r\n            newWord.difficulty = difficulty;\r\n            await api_1.api.setUserWord(userData, wordId, newWord);\r\n        }\r\n    }\r\n    async updateLearnedWord(learned, wordId) {\r\n        const data = this.storage.getData('UserId');\r\n        const word = await api_1.api.getUserWordById(data, wordId);\r\n        if (typeof word === 'object') {\r\n            word.optional.learned = learned;\r\n            if (!learned) {\r\n                word.optional.correctSeries = 0;\r\n                // only words learned today are removed from the statistics\r\n                if (word.optional.learnedDate === (new Date()).toLocaleDateString()) {\r\n                    UserStatistic_1.UserStatistic.decreaseLearnedWordsCount();\r\n                }\r\n            }\r\n            else {\r\n                UserStatistic_1.UserStatistic.increaseLearnedWordsCount();\r\n                word.optional.learnedDate = (new Date()).toLocaleDateString();\r\n            }\r\n            word.difficulty = 'easy';\r\n            await api_1.api.changeUserWord(data, wordId, { difficulty: word.difficulty, optional: word.optional });\r\n        }\r\n        else {\r\n            const newWord = this.createNewUserWord();\r\n            newWord.optional.learned = learned;\r\n            if (learned) {\r\n                UserStatistic_1.UserStatistic.increaseLearnedWordsCount();\r\n                newWord.optional.learnedDate = new Date().toLocaleDateString();\r\n            }\r\n            await api_1.api.setUserWord(data, wordId, newWord);\r\n        }\r\n    }\r\n    async updateUserWordInfo(wordId) {\r\n        const data = this.storage.getData('UserId');\r\n        const word = await api_1.api.getUserWordById(data, wordId);\r\n        const resp = { difficulty: word.difficulty, learned: word.optional.learned };\r\n        return resp;\r\n    }\r\n    async getUserBookWords() {\r\n        const logined = this.storage.getData('UserId');\r\n        const totalWords = await this.api.getTotalUserWords(logined, '{\"$and\":[{\"userWord.difficulty\":\"hard\", \"userWord.optional.learned\":false}]}');\r\n        if (typeof totalWords === 'number') {\r\n            const newData = await this.api.getAggregatedUserWords(logined, { wordsPerPage: String(totalWords) }, '{\"$and\":[{\"userWord.difficulty\":\"hard\", \"userWord.optional.learned\":false}]}');\r\n            return newData;\r\n        }\r\n        return String(totalWords);\r\n    }\r\n}\r\nexports.WordController = WordController;\r\nexports.wordController = new WordController();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3584\n")},9775:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Answer = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nclass Answer {\r\n    constructor(word, number, isCorrect, callback) {\r\n        this.eventHandler = () => {\r\n            console.log('eventHandler');\r\n            this.addEndStageStyleByClick();\r\n            this.callback(this);\r\n        };\r\n        this.word = word;\r\n        this.number = number;\r\n        this.isCorrect = isCorrect;\r\n        this.callback = callback;\r\n        this.answerNumberSpan = (0, createNode_1.default)({ tag: 'span', classes: ['answer__number'], inner: String(this.number) });\r\n        this.answerTextSpan = (0, createNode_1.default)({ tag: 'span', classes: ['answer__text'], inner: this.word.wordTranslate });\r\n        this.div = (0, createNode_1.default)({ tag: 'div', classes: ['answer'], atributesAdnValues: [['data-id', this.word.id]] });\r\n        this.div.append(this.answerNumberSpan, this.answerTextSpan);\r\n        this.div.addEventListener('click', this.eventHandler);\r\n    }\r\n    addTextOpacity() {\r\n        if (this.isCorrect)\r\n            return;\r\n        this.answerTextSpan.style.opacity = '0.5';\r\n    }\r\n    addEndStageStyleByClick() {\r\n        if (this.isCorrect) {\r\n            this.answerNumberSpan.innerText = '✔';\r\n            this.answerNumberSpan.classList.add('checked');\r\n        }\r\n        else {\r\n            this.answerTextSpan.style.textDecoration = 'line-through';\r\n        }\r\n    }\r\n    addEndStageStyleByKeyboard(answer) {\r\n        console.log(answer === this);\r\n        if (answer === this)\r\n            this.addEndStageStyleByClick();\r\n    }\r\n    removeListener() {\r\n        this.div.removeEventListener('click', this.eventHandler);\r\n        this.addTextOpacity();\r\n    }\r\n}\r\nexports.Answer = Answer;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTc3NS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxnRUFBNkM7QUFFN0MsTUFBYSxNQUFNO0lBZWpCLFlBQVksSUFBVSxFQUFFLE1BQWMsRUFBRSxTQUFrQixFQUFFLFFBQWtDO1FBWXRGLGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUM7UUFmQSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsd0JBQVUsRUFBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0csSUFBSSxDQUFDLGNBQWMsR0FBRyx3QkFBVSxFQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQzdHLElBQUksQ0FBQyxHQUFHLEdBQUcsd0JBQVUsRUFBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFRTyxjQUFjO1FBQ3BCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPO1FBQzNCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDNUMsQ0FBQztJQUVPLHVCQUF1QjtRQUM3QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7WUFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDaEQ7YUFBTTtZQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7U0FDM0Q7SUFDSCxDQUFDO0lBRU0sMEJBQTBCLENBQUMsTUFBYztRQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLE1BQU0sS0FBSyxJQUFJO1lBQUUsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDdEQsQ0FBQztJQUVNLGNBQWM7UUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUF4REQsd0JBd0RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL2F1ZGlvY2FsbC9hbnN3ZXIudHM/MjE1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXb3JkIH0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCBjcmVhdGVOb2RlIGZyb20gJy4uL3V0aWxzL2NyZWF0ZU5vZGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFuc3dlciB7XHJcbiAgcHJpdmF0ZSB3b3JkOiBXb3JkO1xyXG5cclxuICBwdWJsaWMgbnVtYmVyOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBpc0NvcnJlY3Q6IGJvb2xlYW47XHJcblxyXG4gIHByaXZhdGUgY2FsbGJhY2s6IChhbnN3ZXI6IEFuc3dlcikgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGRpdjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgYW5zd2VyTnVtYmVyU3BhbjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgYW5zd2VyVGV4dFNwYW46IEhUTUxFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3b3JkOiBXb3JkLCBudW1iZXI6IG51bWJlciwgaXNDb3JyZWN0OiBib29sZWFuLCBjYWxsYmFjazogKGFuc3dlcjogQW5zd2VyKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLndvcmQgPSB3b3JkO1xyXG4gICAgdGhpcy5udW1iZXIgPSBudW1iZXI7XHJcbiAgICB0aGlzLmlzQ29ycmVjdCA9IGlzQ29ycmVjdDtcclxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIHRoaXMuYW5zd2VyTnVtYmVyU3BhbiA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdzcGFuJywgY2xhc3NlczogWydhbnN3ZXJfX251bWJlciddLCBpbm5lcjogU3RyaW5nKHRoaXMubnVtYmVyKSB9KTtcclxuICAgIHRoaXMuYW5zd2VyVGV4dFNwYW4gPSBjcmVhdGVOb2RlKHsgdGFnOiAnc3BhbicsIGNsYXNzZXM6IFsnYW5zd2VyX190ZXh0J10sIGlubmVyOiB0aGlzLndvcmQud29yZFRyYW5zbGF0ZSB9KTtcclxuICAgIHRoaXMuZGl2ID0gY3JlYXRlTm9kZSh7IHRhZzogJ2RpdicsIGNsYXNzZXM6IFsnYW5zd2VyJ10sIGF0cmlidXRlc0FkblZhbHVlczogW1snZGF0YS1pZCcsIHRoaXMud29yZC5pZF1dIH0pO1xyXG4gICAgdGhpcy5kaXYuYXBwZW5kKHRoaXMuYW5zd2VyTnVtYmVyU3BhbiwgdGhpcy5hbnN3ZXJUZXh0U3Bhbik7XHJcbiAgICB0aGlzLmRpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZXZlbnRIYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXZlbnRIYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ2V2ZW50SGFuZGxlcicpO1xyXG4gICAgdGhpcy5hZGRFbmRTdGFnZVN0eWxlQnlDbGljaygpO1xyXG4gICAgdGhpcy5jYWxsYmFjayh0aGlzKTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIGFkZFRleHRPcGFjaXR5KCkge1xyXG4gICAgaWYgKHRoaXMuaXNDb3JyZWN0KSByZXR1cm47XHJcbiAgICB0aGlzLmFuc3dlclRleHRTcGFuLnN0eWxlLm9wYWNpdHkgPSAnMC41JztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYWRkRW5kU3RhZ2VTdHlsZUJ5Q2xpY2soKSB7XHJcbiAgICBpZiAodGhpcy5pc0NvcnJlY3QpIHtcclxuICAgICAgdGhpcy5hbnN3ZXJOdW1iZXJTcGFuLmlubmVyVGV4dCA9ICfinJQnO1xyXG4gICAgICB0aGlzLmFuc3dlck51bWJlclNwYW4uY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5hbnN3ZXJUZXh0U3Bhbi5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICdsaW5lLXRocm91Z2gnO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZEVuZFN0YWdlU3R5bGVCeUtleWJvYXJkKGFuc3dlcjogQW5zd2VyKSB7XHJcbiAgICBjb25zb2xlLmxvZyhhbnN3ZXIgPT09IHRoaXMpO1xyXG4gICAgaWYgKGFuc3dlciA9PT0gdGhpcykgdGhpcy5hZGRFbmRTdGFnZVN0eWxlQnlDbGljaygpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbW92ZUxpc3RlbmVyKCkge1xyXG4gICAgdGhpcy5kaXYucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmV2ZW50SGFuZGxlcik7XHJcbiAgICB0aGlzLmFkZFRleHRPcGFjaXR5KCk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9775\n")},1787:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.AudioCall = void 0;\r\nconst api_1 = __webpack_require__(1341);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst enums_1 = __webpack_require__(8875);\r\nconst convertAggregatedWordToWord_1 = __webpack_require__(1682);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst getRandomWords_1 = __webpack_require__(9721);\r\nconst shuffleArray_1 = __webpack_require__(4879);\r\nconst WordController_1 = __webpack_require__(3584);\r\nconst levelSelect_1 = __webpack_require__(4712);\r\n// eslint-disable-next-line import/no-cycle\r\nconst resultPage_1 = __webpack_require__(8247);\r\nconst stage_1 = __webpack_require__(9990);\r\nconst startPage_1 = __webpack_require__(9392);\r\nconst MAX_COUNT_WORDS_PER_GAME = 10;\r\nconst INCORRECT_SERIES = 5;\r\nclass AudioCall {\r\n    constructor() {\r\n        this.words = [];\r\n        this.result = {\r\n            correct: [],\r\n            incorrect: [],\r\n        };\r\n        this.currentStage = 0;\r\n        this.isMute = false;\r\n        this.muteButtonHandler = () => {\r\n            this.muteButton.innerHTML = this.isMute ? 'volume_up' : 'volume_off';\r\n            this.isMute = !this.isMute;\r\n        };\r\n        this.closeButtonHandler = () => {\r\n            this.container.remove();\r\n        };\r\n        this.wordController = new WordController_1.WordController();\r\n        this.container = (0, createNode_1.default)({ tag: 'div', classes: ['audio-call'] });\r\n        this.closeButton = (0, createNode_1.default)({\r\n            tag: 'a',\r\n            classes: ['close-button'],\r\n            atributesAdnValues: [['href', '/'], ['data-navigo', 'true']],\r\n            inner: 'X',\r\n        });\r\n        this.muteButton = (0, createNode_1.default)({ tag: 'span', classes: ['material-icons-outlined', 'mute-button'], inner: 'volume_up' });\r\n        this.userData = Storage_1.storage.getUserIdData();\r\n    }\r\n    start(settings) {\r\n        this.render();\r\n        if (!settings) {\r\n            const levelSelect = new levelSelect_1.LevelSelect(this.container, this.startGameFromMenu.bind(this));\r\n            levelSelect.render();\r\n        }\r\n        else {\r\n            this.closeButton.setAttribute('href', '/book');\r\n            this.settings = {\r\n                group: String(settings.group),\r\n                page: String(settings.page),\r\n            };\r\n            const startPage = new startPage_1.StartPage(this.container, this.startGameFromBook.bind(this));\r\n            startPage.render();\r\n        }\r\n    }\r\n    render() {\r\n        const main = document.querySelector('main');\r\n        this.muteButton.addEventListener('click', this.muteButtonHandler);\r\n        this.closeButton.addEventListener('click', this.closeButtonHandler);\r\n        main.innerHTML = '';\r\n        const buttonsWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['buttons-wrapper'] });\r\n        const wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['container'] });\r\n        buttonsWrapper.append(this.muteButton, this.closeButton);\r\n        wrapper.append(buttonsWrapper);\r\n        this.container.append(wrapper);\r\n        main.append(this.container);\r\n    }\r\n    async startGameFromMenu(wordsGroup) {\r\n        this.words = await (0, getRandomWords_1.getRandomWordsByGroup)(wordsGroup, MAX_COUNT_WORDS_PER_GAME);\r\n        this.startGameStage();\r\n    }\r\n    async startGameFromBook() {\r\n        if (this.settings)\r\n            this.words = await this.getWordsForGame(this.settings);\r\n        if (this.words.length === 0) {\r\n            const levelSelect = new levelSelect_1.LevelSelect(this.container, this.startGameFromMenu.bind(this));\r\n            levelSelect.render();\r\n            return;\r\n        }\r\n        this.startGameStage();\r\n    }\r\n    async getWordsForGame(settings) {\r\n        if (!this.userData) {\r\n            const wordsOnPage = await api_1.api.getWords(settings);\r\n            return (0, shuffleArray_1.shuffleArray)(wordsOnPage).slice(0, MAX_COUNT_WORDS_PER_GAME);\r\n        }\r\n        // game from group 6\r\n        if (settings.group === '6') {\r\n            const userAggregatedWords = await this.wordController.getUserBookWords();\r\n            const words = userAggregatedWords\r\n                .map((word) => (0, convertAggregatedWordToWord_1.convertAggregatedWordToWord)(word));\r\n            console.log(words);\r\n            return (0, shuffleArray_1.shuffleArray)(words).slice(0, MAX_COUNT_WORDS_PER_GAME);\r\n        }\r\n        // game from group 0-5\r\n        let userAggregatedWords = await this.getAggregatedWords(settings);\r\n        let page = Number(settings.page);\r\n        while (userAggregatedWords.length < MAX_COUNT_WORDS_PER_GAME && Number(page) > 0) {\r\n            page -= 1;\r\n            userAggregatedWords = userAggregatedWords.concat(\r\n            // eslint-disable-next-line no-await-in-loop\r\n            await this.getAggregatedWords({ group: settings.group, page: String(page) }));\r\n        }\r\n        const words = userAggregatedWords.map((word) => (0, convertAggregatedWordToWord_1.convertAggregatedWordToWord)(word));\r\n        return words.slice(0, MAX_COUNT_WORDS_PER_GAME);\r\n    }\r\n    async getAggregatedWords(settings) {\r\n        let userAggregatedWords = await api_1.api.getAggregatedUserWords(this.userData, { page: settings.page, group: settings.group, wordsPerPage: '20' });\r\n        userAggregatedWords = userAggregatedWords.filter((word) => !word?.userWord?.optional?.learned);\r\n        return (0, shuffleArray_1.shuffleArray)(userAggregatedWords);\r\n    }\r\n    startGameStage() {\r\n        const stage = new stage_1.Stage(this.container, this.words[this.currentStage], this.stageHandler.bind(this), this.playAnswerSound.bind(this));\r\n        stage.start();\r\n    }\r\n    stageHandler(word, stageResult) {\r\n        this.wordController.sendWordOnServer(word.id, stageResult, enums_1.GAME.AUDIOCALL);\r\n        if (stageResult)\r\n            this.result.correct.push(word);\r\n        else\r\n            this.result.incorrect.push(word);\r\n        if (this.currentStage < this.words.length - 1\r\n            && this.result.incorrect.length < INCORRECT_SERIES) {\r\n            this.currentStage += 1;\r\n            this.startGameStage();\r\n        }\r\n        else {\r\n            this.endGameHandler();\r\n        }\r\n    }\r\n    endGameHandler() {\r\n        const resultPage = new resultPage_1.ResultPage(this.container, this.result, this.settings);\r\n        resultPage.start();\r\n    }\r\n    playAnswerSound(isCorrect) {\r\n        if (this.isMute)\r\n            return;\r\n        const audio = new Audio(`./assets/audiocall/sounds/${isCorrect}.mp3`);\r\n        audio.addEventListener('canplaythrough', audio.play);\r\n    }\r\n}\r\nexports.AudioCall = AudioCall;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUM7UUFDOUUsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFPTyxlQUFlLENBQUMsU0FBa0I7UUFDeEMsSUFBSSxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU87UUFDeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsNkJBQTZCLFNBQVMsTUFBTSxDQUFDLENBQUM7UUFDdEUsS0FBSyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBS0Y7QUE5SkQsOEJBOEpDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL2F1ZGlvY2FsbC9hdWRpb0NhbGwudHM/NmRjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGkgfSBmcm9tICcuLi9Nb2RlbC9hcGknO1xyXG5pbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSAnLi4vU3RvcmFnZS9TdG9yYWdlJztcclxuaW1wb3J0IHsgR0FNRSB9IGZyb20gJy4uL3R5cGVzL2VudW1zJztcclxuaW1wb3J0IHtcclxuICBBdXRob3JpemF0aW9uRGF0YSwgR2FtZVJlc3VsdCwgV29yZCwgVXNlckFnZ3JlZ2F0ZWRXb3JkLFxyXG59IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBjb252ZXJ0QWdncmVnYXRlZFdvcmRUb1dvcmQgfSBmcm9tICcuLi91dGlscy9jb252ZXJ0QWdncmVnYXRlZFdvcmRUb1dvcmQnO1xyXG5pbXBvcnQgY3JlYXRlTm9kZSBmcm9tICcuLi91dGlscy9jcmVhdGVOb2RlJztcclxuaW1wb3J0IHsgZ2V0UmFuZG9tV29yZHNCeUdyb3VwIH0gZnJvbSAnLi4vdXRpbHMvZ2V0UmFuZG9tV29yZHMnO1xyXG5pbXBvcnQgeyBzaHVmZmxlQXJyYXkgfSBmcm9tICcuLi91dGlscy9zaHVmZmxlQXJyYXknO1xyXG5pbXBvcnQgeyBXb3JkQ29udHJvbGxlciB9IGZyb20gJy4uL1dvcmRDb250cm9sbGVyL1dvcmRDb250cm9sbGVyJztcclxuaW1wb3J0IHsgTGV2ZWxTZWxlY3QgfSBmcm9tICcuL2xldmVsU2VsZWN0JztcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxyXG5pbXBvcnQgeyBSZXN1bHRQYWdlIH0gZnJvbSAnLi9yZXN1bHRQYWdlJztcclxuaW1wb3J0IHsgU3RhZ2UgfSBmcm9tICcuL3N0YWdlJztcclxuaW1wb3J0IHsgU3RhcnRQYWdlIH0gZnJvbSAnLi9zdGFydFBhZ2UnO1xyXG5cclxuY29uc3QgTUFYX0NPVU5UX1dPUkRTX1BFUl9HQU1FID0gMTA7XHJcbmNvbnN0IElOQ09SUkVDVF9TRVJJRVMgPSA1O1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1ZGlvQ2FsbCB7XHJcbiAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIHdvcmRzOiBXb3JkW10gPSBbXTtcclxuXHJcbiAgcHJpdmF0ZSByZXN1bHQ6IEdhbWVSZXN1bHQgPSB7XHJcbiAgICBjb3JyZWN0OiBbXSxcclxuICAgIGluY29ycmVjdDogW10sXHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBjdXJyZW50U3RhZ2U6IG51bWJlciA9IDA7XHJcblxyXG4gIHByaXZhdGUgY2xvc2VCdXR0b246IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIG11dGVCdXR0b246IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIGlzTXV0ZTogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBwcml2YXRlIHNldHRpbmdzOiB7IGdyb3VwOiBzdHJpbmc7IHBhZ2U6IHN0cmluZzsgfSB8IHVuZGVmaW5lZDtcclxuXHJcbiAgcHJpdmF0ZSB1c2VyRGF0YTogQXV0aG9yaXphdGlvbkRhdGEgfCBudWxsO1xyXG5cclxuICBwcml2YXRlIHdvcmRDb250cm9sbGVyOiBXb3JkQ29udHJvbGxlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLndvcmRDb250cm9sbGVyID0gbmV3IFdvcmRDb250cm9sbGVyKCk7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdkaXYnLCBjbGFzc2VzOiBbJ2F1ZGlvLWNhbGwnXSB9KTtcclxuICAgIHRoaXMuY2xvc2VCdXR0b24gPSBjcmVhdGVOb2RlKHtcclxuICAgICAgdGFnOiAnYScsXHJcbiAgICAgIGNsYXNzZXM6IFsnY2xvc2UtYnV0dG9uJ10sXHJcbiAgICAgIGF0cmlidXRlc0FkblZhbHVlczogW1snaHJlZicsICcvJ10sIFsnZGF0YS1uYXZpZ28nLCAndHJ1ZSddXSxcclxuICAgICAgaW5uZXI6ICdYJyxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5tdXRlQnV0dG9uID0gY3JlYXRlTm9kZSh7IHRhZzogJ3NwYW4nLCBjbGFzc2VzOiBbJ21hdGVyaWFsLWljb25zLW91dGxpbmVkJywgJ211dGUtYnV0dG9uJ10sIGlubmVyOiAndm9sdW1lX3VwJyB9KTtcclxuICAgIHRoaXMudXNlckRhdGEgPSBzdG9yYWdlLmdldFVzZXJJZERhdGEoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGFydChzZXR0aW5ncz86IHsgZ3JvdXA6IG51bWJlciwgcGFnZTogbnVtYmVyIH0pIHtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICBpZiAoIXNldHRpbmdzKSB7XHJcbiAgICAgIGNvbnN0IGxldmVsU2VsZWN0ID0gbmV3IExldmVsU2VsZWN0KHRoaXMuY29udGFpbmVyLCB0aGlzLnN0YXJ0R2FtZUZyb21NZW51LmJpbmQodGhpcykpO1xyXG4gICAgICBsZXZlbFNlbGVjdC5yZW5kZXIoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xvc2VCdXR0b24uc2V0QXR0cmlidXRlKCdocmVmJywgJy9ib29rJyk7XHJcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XHJcbiAgICAgICAgZ3JvdXA6IFN0cmluZyhzZXR0aW5ncy5ncm91cCksXHJcbiAgICAgICAgcGFnZTogU3RyaW5nKHNldHRpbmdzLnBhZ2UpLFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBzdGFydFBhZ2UgPSBuZXcgU3RhcnRQYWdlKHRoaXMuY29udGFpbmVyLCB0aGlzLnN0YXJ0R2FtZUZyb21Cb29rLmJpbmQodGhpcykpO1xyXG4gICAgICBzdGFydFBhZ2UucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICB0aGlzLm11dGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm11dGVCdXR0b25IYW5kbGVyKTtcclxuICAgIHRoaXMuY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlQnV0dG9uSGFuZGxlcik7XHJcbiAgICBtYWluLmlubmVySFRNTCA9ICcnO1xyXG4gICAgY29uc3QgYnV0dG9uc1dyYXBwZXIgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydidXR0b25zLXdyYXBwZXInXSB9KTtcclxuICAgIGNvbnN0IHdyYXBwZXIgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydjb250YWluZXInXSB9KTtcclxuICAgIGJ1dHRvbnNXcmFwcGVyLmFwcGVuZCh0aGlzLm11dGVCdXR0b24sIHRoaXMuY2xvc2VCdXR0b24pO1xyXG4gICAgd3JhcHBlci5hcHBlbmQoYnV0dG9uc1dyYXBwZXIpO1xyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHdyYXBwZXIpO1xyXG4gICAgbWFpbi5hcHBlbmQodGhpcy5jb250YWluZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBzdGFydEdhbWVGcm9tTWVudSh3b3Jkc0dyb3VwOiBzdHJpbmcpIHtcclxuICAgIHRoaXMud29yZHMgPSBhd2FpdCBnZXRSYW5kb21Xb3Jkc0J5R3JvdXAod29yZHNHcm91cCwgTUFYX0NPVU5UX1dPUkRTX1BFUl9HQU1FKTtcclxuICAgIHRoaXMuc3RhcnRHYW1lU3RhZ2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc3RhcnRHYW1lRnJvbUJvb2soKSB7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncykgdGhpcy53b3JkcyA9IGF3YWl0IHRoaXMuZ2V0V29yZHNGb3JHYW1lKHRoaXMuc2V0dGluZ3MpO1xyXG4gICAgaWYgKHRoaXMud29yZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGNvbnN0IGxldmVsU2VsZWN0ID0gbmV3IExldmVsU2VsZWN0KHRoaXMuY29udGFpbmVyLCB0aGlzLnN0YXJ0R2FtZUZyb21NZW51LmJpbmQodGhpcykpO1xyXG4gICAgICBsZXZlbFNlbGVjdC5yZW5kZXIoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdGFydEdhbWVTdGFnZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBnZXRXb3Jkc0ZvckdhbWUoc2V0dGluZ3M6IHsgZ3JvdXA6IHN0cmluZywgcGFnZTogc3RyaW5nIH0pIHtcclxuICAgIGlmICghdGhpcy51c2VyRGF0YSkge1xyXG4gICAgICBjb25zdCB3b3Jkc09uUGFnZSA9IGF3YWl0IGFwaS5nZXRXb3JkcyhzZXR0aW5ncyk7XHJcbiAgICAgIHJldHVybiBzaHVmZmxlQXJyYXkod29yZHNPblBhZ2UpLnNsaWNlKDAsIE1BWF9DT1VOVF9XT1JEU19QRVJfR0FNRSk7XHJcbiAgICB9XHJcbiAgICAvLyBnYW1lIGZyb20gZ3JvdXAgNlxyXG4gICAgaWYgKHNldHRpbmdzLmdyb3VwID09PSAnNicpIHtcclxuICAgICAgY29uc3QgdXNlckFnZ3JlZ2F0ZWRXb3JkcyA9IGF3YWl0IHRoaXMud29yZENvbnRyb2xsZXIuZ2V0VXNlckJvb2tXb3JkcygpO1xyXG4gICAgICBjb25zdCB3b3JkcyA9ICh1c2VyQWdncmVnYXRlZFdvcmRzIGFzIFVzZXJBZ2dyZWdhdGVkV29yZFtdKVxyXG4gICAgICAgIC5tYXAoKHdvcmQpID0+IGNvbnZlcnRBZ2dyZWdhdGVkV29yZFRvV29yZCh3b3JkKSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKHdvcmRzKTtcclxuICAgICAgcmV0dXJuIHNodWZmbGVBcnJheSh3b3Jkcykuc2xpY2UoMCwgTUFYX0NPVU5UX1dPUkRTX1BFUl9HQU1FKTtcclxuICAgIH1cclxuICAgIC8vIGdhbWUgZnJvbSBncm91cCAwLTVcclxuICAgIGxldCB1c2VyQWdncmVnYXRlZFdvcmRzID0gYXdhaXQgdGhpcy5nZXRBZ2dyZWdhdGVkV29yZHMoc2V0dGluZ3MpO1xyXG4gICAgbGV0IHBhZ2UgPSBOdW1iZXIoc2V0dGluZ3MucGFnZSk7XHJcbiAgICB3aGlsZSAodXNlckFnZ3JlZ2F0ZWRXb3Jkcy5sZW5ndGggPCBNQVhfQ09VTlRfV09SRFNfUEVSX0dBTUUgJiYgTnVtYmVyKHBhZ2UpID4gMCkge1xyXG4gICAgICBwYWdlIC09IDE7XHJcbiAgICAgIHVzZXJBZ2dyZWdhdGVkV29yZHMgPSB1c2VyQWdncmVnYXRlZFdvcmRzLmNvbmNhdChcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYXdhaXQtaW4tbG9vcFxyXG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QWdncmVnYXRlZFdvcmRzKHsgZ3JvdXA6IHNldHRpbmdzLmdyb3VwLCBwYWdlOiBTdHJpbmcocGFnZSkgfSksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB3b3JkcyA9IHVzZXJBZ2dyZWdhdGVkV29yZHMubWFwKCh3b3JkKSA9PiBjb252ZXJ0QWdncmVnYXRlZFdvcmRUb1dvcmQod29yZCkpO1xyXG4gICAgcmV0dXJuIHdvcmRzLnNsaWNlKDAsIE1BWF9DT1VOVF9XT1JEU19QRVJfR0FNRSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGdldEFnZ3JlZ2F0ZWRXb3JkcyhzZXR0aW5nczogeyBncm91cDogc3RyaW5nLCBwYWdlOiBzdHJpbmcgfSkge1xyXG4gICAgbGV0IHVzZXJBZ2dyZWdhdGVkV29yZHMgPSBhd2FpdCBhcGkuZ2V0QWdncmVnYXRlZFVzZXJXb3JkcyhcclxuICAgICAgdGhpcy51c2VyRGF0YSBhcyBBdXRob3JpemF0aW9uRGF0YSxcclxuICAgICAgeyBwYWdlOiBzZXR0aW5ncy5wYWdlLCBncm91cDogc2V0dGluZ3MuZ3JvdXAsIHdvcmRzUGVyUGFnZTogJzIwJyB9LFxyXG4gICAgKSBhcyBVc2VyQWdncmVnYXRlZFdvcmRbXTtcclxuICAgIHVzZXJBZ2dyZWdhdGVkV29yZHMgPSB1c2VyQWdncmVnYXRlZFdvcmRzLmZpbHRlcigod29yZCkgPT4gIXdvcmQ/LnVzZXJXb3JkPy5vcHRpb25hbD8ubGVhcm5lZCk7XHJcbiAgICByZXR1cm4gc2h1ZmZsZUFycmF5KHVzZXJBZ2dyZWdhdGVkV29yZHMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGFydEdhbWVTdGFnZSgpIHtcclxuICAgIGNvbnN0IHN0YWdlID0gbmV3IFN0YWdlKFxyXG4gICAgICB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgdGhpcy53b3Jkc1t0aGlzLmN1cnJlbnRTdGFnZV0sXHJcbiAgICAgIHRoaXMuc3RhZ2VIYW5kbGVyLmJpbmQodGhpcyksXHJcbiAgICAgIHRoaXMucGxheUFuc3dlclNvdW5kLmJpbmQodGhpcyksXHJcbiAgICApO1xyXG4gICAgc3RhZ2Uuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhZ2VIYW5kbGVyKHdvcmQ6IFdvcmQsIHN0YWdlUmVzdWx0OiBib29sZWFuKSB7XHJcbiAgICB0aGlzLndvcmRDb250cm9sbGVyLnNlbmRXb3JkT25TZXJ2ZXIod29yZC5pZCwgc3RhZ2VSZXN1bHQsIEdBTUUuQVVESU9DQUxMKTtcclxuICAgIGlmIChzdGFnZVJlc3VsdCkgdGhpcy5yZXN1bHQuY29ycmVjdC5wdXNoKHdvcmQpO1xyXG4gICAgZWxzZSB0aGlzLnJlc3VsdC5pbmNvcnJlY3QucHVzaCh3b3JkKTtcclxuXHJcbiAgICBpZiAodGhpcy5jdXJyZW50U3RhZ2UgPCB0aGlzLndvcmRzLmxlbmd0aCAtIDFcclxuICAgICAgJiYgdGhpcy5yZXN1bHQuaW5jb3JyZWN0Lmxlbmd0aCA8IElOQ09SUkVDVF9TRVJJRVMpIHtcclxuICAgICAgdGhpcy5jdXJyZW50U3RhZ2UgKz0gMTtcclxuICAgICAgdGhpcy5zdGFydEdhbWVTdGFnZSgpO1xyXG4gICAgfSBlbHNlIHsgdGhpcy5lbmRHYW1lSGFuZGxlcigpOyB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVuZEdhbWVIYW5kbGVyKCkge1xyXG4gICAgY29uc3QgcmVzdWx0UGFnZSA9IG5ldyBSZXN1bHRQYWdlKHRoaXMuY29udGFpbmVyLCB0aGlzLnJlc3VsdCwgdGhpcy5zZXR0aW5ncyk7XHJcbiAgICByZXN1bHRQYWdlLnN0YXJ0KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG11dGVCdXR0b25IYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgdGhpcy5tdXRlQnV0dG9uLmlubmVySFRNTCA9IHRoaXMuaXNNdXRlID8gJ3ZvbHVtZV91cCcgOiAndm9sdW1lX29mZic7XHJcbiAgICB0aGlzLmlzTXV0ZSA9ICF0aGlzLmlzTXV0ZTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIHBsYXlBbnN3ZXJTb3VuZChpc0NvcnJlY3Q6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLmlzTXV0ZSkgcmV0dXJuO1xyXG4gICAgY29uc3QgYXVkaW8gPSBuZXcgQXVkaW8oYC4vYXNzZXRzL2F1ZGlvY2FsbC9zb3VuZHMvJHtpc0NvcnJlY3R9Lm1wM2ApO1xyXG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheXRocm91Z2gnLCBhdWRpby5wbGF5KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xvc2VCdXR0b25IYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgdGhpcy5jb250YWluZXIucmVtb3ZlKCk7XHJcbiAgfTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1787\n")},4712:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LevelSelect = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst AUDIO_CALL_DESCRIPTION = 'Тренировка улучшает восприятие речи на слух.';\r\nconst GAME_NAME = 'Аудиовызов';\r\nconst LEVEL_COUNT = 6;\r\nclass LevelSelect {\r\n    constructor(container, callback) {\r\n        this.selectedValue = '0';\r\n        this.levelButtons = [];\r\n        this.returnLevel = () => {\r\n            this.wrapper.remove();\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.callback(this.selectedValue);\r\n        };\r\n        this.keyHandler = (e) => {\r\n            if (e.key === 'Enter') {\r\n                this.returnLevel();\r\n                return;\r\n            }\r\n            const level = Number(e.key) - 1;\r\n            if (level >= 0 && level < LEVEL_COUNT) {\r\n                this.selectedValue = String(level);\r\n                this.levelButtons.forEach((levelButton) => levelButton.classList.remove('selected'));\r\n                const selectedButton = this.levelButtons\r\n                    .find((button) => button.dataset.level === this.selectedValue);\r\n                selectedButton?.classList.add('selected');\r\n            }\r\n        };\r\n        this.removeListeners = () => {\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.links.forEach((link) => link.removeEventListener('click', this.removeListeners));\r\n        };\r\n        this.container = container;\r\n        this.callback = callback;\r\n        this.wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['level-select'] });\r\n        this.links = document.querySelectorAll('a');\r\n    }\r\n    render() {\r\n        const title = (0, createNode_1.default)({ tag: 'h2', classes: ['game__title'], inner: GAME_NAME });\r\n        const description = (0, createNode_1.default)({ tag: 'p', classes: ['game__descpiption'], inner: AUDIO_CALL_DESCRIPTION });\r\n        const selectBlock = this.createSelectBlock('Выбери уровень сложности');\r\n        const button = (0, createNode_1.default)({ tag: 'button', atributesAdnValues: [['type', 'button']], inner: 'начать' });\r\n        button.addEventListener('click', this.returnLevel);\r\n        document.addEventListener('keydown', this.keyHandler);\r\n        this.links.forEach((link) => link.addEventListener('click', () => {\r\n            if (!link.href.includes('/audiocall')) {\r\n                this.removeListeners();\r\n                this.container.remove();\r\n            }\r\n        }));\r\n        this.wrapper.append(title, description, selectBlock, button);\r\n        this.container.append(this.wrapper);\r\n    }\r\n    createSelectBlock(title) {\r\n        const wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['select-block'] });\r\n        const titleNode = (0, createNode_1.default)({ tag: 'div', classes: ['select-block__title'], inner: title });\r\n        const select = (0, createNode_1.default)({ tag: 'div', classes: ['select-block__select'] });\r\n        for (let i = 1; i <= LEVEL_COUNT; i += 1) {\r\n            const levelButton = (0, createNode_1.default)({ tag: 'button', atributesAdnValues: [['data-level', String(i - 1)]], inner: String(i) });\r\n            if (i === 1)\r\n                levelButton.classList.add('selected');\r\n            this.levelButtons.push(levelButton);\r\n            select.append(levelButton);\r\n        }\r\n        this.levelButtons.forEach((button) => this.addSelectButtonHandler(button));\r\n        wrapper.append(titleNode, select);\r\n        return wrapper;\r\n    }\r\n    addSelectButtonHandler(button) {\r\n        button.addEventListener('click', (e) => {\r\n            const target = e.target;\r\n            this.selectedValue = target.dataset.level || this.selectedValue;\r\n            this.levelButtons.forEach((levelButton) => levelButton.classList.remove('selected'));\r\n            target.classList.add('selected');\r\n        });\r\n    }\r\n}\r\nexports.LevelSelect = LevelSelect;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4712\n")},8247:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ResultPage = void 0;\r\nconst constants_1 = __webpack_require__(5004);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\n// eslint-disable-next-line import/no-cycle\r\nconst audioCall_1 = __webpack_require__(1787);\r\nclass ResultPage {\r\n    constructor(container, result, nextGameSettings) {\r\n        this.startNewGame = () => {\r\n            this.container.remove();\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            const game = new audioCall_1.AudioCall();\r\n            if (this.nextGameSettings) {\r\n                console.log('this.nextGameSettings');\r\n                game.start({\r\n                    group: Number(this.nextGameSettings.group), page: Number(this.nextGameSettings.page),\r\n                });\r\n                return;\r\n            }\r\n            game.start();\r\n        };\r\n        this.removeListeners = () => {\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.links.forEach((link) => link.removeEventListener('click', this.removeListeners));\r\n        };\r\n        this.keyHandler = (e) => {\r\n            if (e.key === 'Enter')\r\n                this.startNewGame();\r\n        };\r\n        this.container = container;\r\n        this.result = result;\r\n        this.nextGameSettings = nextGameSettings;\r\n        this.wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['game__result'] });\r\n        this.button = (0, createNode_1.default)({ tag: 'button', classes: ['result__button'], inner: 'сыграть еще раз' });\r\n        this.links = document.querySelectorAll('a');\r\n    }\r\n    start() {\r\n        this.render();\r\n    }\r\n    render() {\r\n        const title = (0, createNode_1.default)({ tag: 'h2', classes: ['result__score'], inner: this.getTitleText() });\r\n        const listsContainer = (0, createNode_1.default)({ tag: 'div', classes: ['game__lists'] });\r\n        const trueList = (0, createNode_1.default)({ tag: 'ul', classes: ['result__true'], inner: `Знаю: ${this.result.correct.length}` });\r\n        const falseList = (0, createNode_1.default)({ tag: 'ul', classes: ['result__false'], inner: `Не знаю: ${this.result.incorrect.length}` });\r\n        const trueLi = this.result.correct.map((word) => this.createResultLi(word));\r\n        const falseLi = this.result.incorrect.map((word) => this.createResultLi(word));\r\n        this.button.addEventListener('click', this.startNewGame);\r\n        document.addEventListener('keydown', this.keyHandler);\r\n        this.links.forEach((link) => link.addEventListener('click', () => {\r\n            if (!link.href.includes('/audiocall')) {\r\n                this.removeListeners();\r\n                this.container.remove();\r\n            }\r\n        }));\r\n        trueList.append(...trueLi);\r\n        falseList.append(...falseLi);\r\n        listsContainer.append(trueList, falseList);\r\n        this.wrapper.append(title, listsContainer, this.button);\r\n        this.container.append(this.wrapper);\r\n    }\r\n    createResultLi(word) {\r\n        const wordEn = (0, createNode_1.default)({ tag: 'span', classes: ['result__word-en'], inner: `${word.word}: ` });\r\n        const wordRu = (0, createNode_1.default)({ tag: 'span', classes: ['result__word-ru'], inner: `${word.wordTranslate}` });\r\n        const wordEnRu = (0, createNode_1.default)({ tag: 'li', classes: ['result__word'] });\r\n        const voice = (0, createNode_1.default)({ tag: 'div', classes: ['result__voice'] });\r\n        this.voiceHandler(voice, word);\r\n        wordEnRu.append(voice, wordEn, wordRu);\r\n        return wordEnRu;\r\n    }\r\n    getTitleText() {\r\n        const wordsCount = this.result.correct.length + this.result.incorrect.length;\r\n        const percentOfCorrectAnswers = (this.result.correct.length / wordsCount) * 100;\r\n        console.log(percentOfCorrectAnswers);\r\n        if (percentOfCorrectAnswers === 100)\r\n            return 'Блестяще!';\r\n        if (percentOfCorrectAnswers > 85)\r\n            return 'Отличный результат!';\r\n        if (percentOfCorrectAnswers > 65)\r\n            return 'Хороший результат!';\r\n        if (percentOfCorrectAnswers > 55)\r\n            return 'Неплохо!';\r\n        return 'В другой раз получится лучше!';\r\n    }\r\n    voiceHandler(element, word) {\r\n        element.addEventListener('click', () => {\r\n            const audio = new Audio(`${constants_1.BASE_LINK}/${word.audio}`);\r\n            audio.play();\r\n        });\r\n    }\r\n}\r\nexports.ResultPage = ResultPage;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8247\n")},9318:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.SPEAKER = void 0;\r\nexports.SPEAKER = `\r\n<svg width="200" height="200" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\r\n   viewBox="0 0 422.686 422.686" xml:space="preserve">\r\n<g>\r\n  <g>\r\n    <path style="fill:#52455f;" d="M211.343,422.686C94.812,422.686,0,327.882,0,211.343C0,94.812,94.812,0,211.343,0\r\n      c116.539,0,211.343,94.812,211.343,211.343C422.686,327.882,327.882,422.686,211.343,422.686z M211.343,16.257\r\n      c-107.565,0-195.086,87.52-195.086,195.086s87.52,195.086,195.086,195.086s195.086-87.52,195.086-195.086\r\n      S318.908,16.257,211.343,16.257z"/>\r\n  </g>\r\n  <path style="fill:#52455f;" d="M264.65,127.952c-3.479-1.821-7.389-2.78-11.323-2.78c-4.975,0-9.771,1.496-13.859,4.316\r\n    l-37.091,25.621h-33.035c-13.445,0-24.386,10.941-24.386,24.386v58.509c0,13.445,10.941,24.386,24.386,24.386h34.904l32.969,29.035\r\n    c4.463,3.918,10.193,6.08,16.127,6.08c3.39,0,6.828-0.732,9.941-2.122c8.811-3.967,14.444-12.697,14.444-22.256V149.558\r\n    C277.729,140.454,272.722,132.187,264.65,127.952z M261.472,273.145c0,3.203-1.87,6.088-4.796,7.405\r\n    c-1.073,0.48-2.211,0.715-3.333,0.715c-1.951,0-3.869-0.691-5.381-2.024l-37.578-33.091h-41.049c-4.495,0-8.129-3.633-8.129-8.129\r\n    v-58.51c0-4.487,3.633-8.129,8.129-8.129h38.107l41.277-28.515c1.374-0.951,2.983-1.431,4.601-1.431\r\n    c1.292,0,2.593,0.309,3.78,0.927c2.682,1.406,4.365,4.178,4.365,7.202v123.579H261.472z"/>\r\n</g>\r\n</svg>\r\n`;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMxOC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYSxlQUFPLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FtQnRCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvYXVkaW9jYWxsL3NwZWFrZXJTVkcudHM/OGIxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgU1BFQUtFUiA9IGBcclxuPHN2ZyB3aWR0aD1cIjIwMFwiIGhlaWdodD1cIjIwMFwiIHZlcnNpb249XCIxLjFcIiBpZD1cIkNhcGFfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB4PVwiMHB4XCIgeT1cIjBweFwiXHJcbiAgIHZpZXdCb3g9XCIwIDAgNDIyLjY4NiA0MjIuNjg2XCIgeG1sOnNwYWNlPVwicHJlc2VydmVcIj5cclxuPGc+XHJcbiAgPGc+XHJcbiAgICA8cGF0aCBzdHlsZT1cImZpbGw6IzUyNDU1ZjtcIiBkPVwiTTIxMS4zNDMsNDIyLjY4NkM5NC44MTIsNDIyLjY4NiwwLDMyNy44ODIsMCwyMTEuMzQzQzAsOTQuODEyLDk0LjgxMiwwLDIxMS4zNDMsMFxyXG4gICAgICBjMTE2LjUzOSwwLDIxMS4zNDMsOTQuODEyLDIxMS4zNDMsMjExLjM0M0M0MjIuNjg2LDMyNy44ODIsMzI3Ljg4Miw0MjIuNjg2LDIxMS4zNDMsNDIyLjY4NnogTTIxMS4zNDMsMTYuMjU3XHJcbiAgICAgIGMtMTA3LjU2NSwwLTE5NS4wODYsODcuNTItMTk1LjA4NiwxOTUuMDg2czg3LjUyLDE5NS4wODYsMTk1LjA4NiwxOTUuMDg2czE5NS4wODYtODcuNTIsMTk1LjA4Ni0xOTUuMDg2XHJcbiAgICAgIFMzMTguOTA4LDE2LjI1NywyMTEuMzQzLDE2LjI1N3pcIi8+XHJcbiAgPC9nPlxyXG4gIDxwYXRoIHN0eWxlPVwiZmlsbDojNTI0NTVmO1wiIGQ9XCJNMjY0LjY1LDEyNy45NTJjLTMuNDc5LTEuODIxLTcuMzg5LTIuNzgtMTEuMzIzLTIuNzhjLTQuOTc1LDAtOS43NzEsMS40OTYtMTMuODU5LDQuMzE2XHJcbiAgICBsLTM3LjA5MSwyNS42MjFoLTMzLjAzNWMtMTMuNDQ1LDAtMjQuMzg2LDEwLjk0MS0yNC4zODYsMjQuMzg2djU4LjUwOWMwLDEzLjQ0NSwxMC45NDEsMjQuMzg2LDI0LjM4NiwyNC4zODZoMzQuOTA0bDMyLjk2OSwyOS4wMzVcclxuICAgIGM0LjQ2MywzLjkxOCwxMC4xOTMsNi4wOCwxNi4xMjcsNi4wOGMzLjM5LDAsNi44MjgtMC43MzIsOS45NDEtMi4xMjJjOC44MTEtMy45NjcsMTQuNDQ0LTEyLjY5NywxNC40NDQtMjIuMjU2VjE0OS41NThcclxuICAgIEMyNzcuNzI5LDE0MC40NTQsMjcyLjcyMiwxMzIuMTg3LDI2NC42NSwxMjcuOTUyeiBNMjYxLjQ3MiwyNzMuMTQ1YzAsMy4yMDMtMS44Nyw2LjA4OC00Ljc5Niw3LjQwNVxyXG4gICAgYy0xLjA3MywwLjQ4LTIuMjExLDAuNzE1LTMuMzMzLDAuNzE1Yy0xLjk1MSwwLTMuODY5LTAuNjkxLTUuMzgxLTIuMDI0bC0zNy41NzgtMzMuMDkxaC00MS4wNDljLTQuNDk1LDAtOC4xMjktMy42MzMtOC4xMjktOC4xMjlcclxuICAgIHYtNTguNTFjMC00LjQ4NywzLjYzMy04LjEyOSw4LjEyOS04LjEyOWgzOC4xMDdsNDEuMjc3LTI4LjUxNWMxLjM3NC0wLjk1MSwyLjk4My0xLjQzMSw0LjYwMS0xLjQzMVxyXG4gICAgYzEuMjkyLDAsMi41OTMsMC4zMDksMy43OCwwLjkyN2MyLjY4MiwxLjQwNiw0LjM2NSw0LjE3OCw0LjM2NSw3LjIwMnYxMjMuNTc5SDI2MS40NzJ6XCIvPlxyXG48L2c+XHJcbjwvc3ZnPlxyXG5gO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9318\n')},9990:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Stage = void 0;\r\nconst constants_1 = __webpack_require__(5004);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst getRandomWords_1 = __webpack_require__(9721);\r\nconst shuffleArray_1 = __webpack_require__(4879);\r\nconst answer_1 = __webpack_require__(9775);\r\nconst speakerSVG_1 = __webpack_require__(9318);\r\nconst ANSWERS_COUNT = 5;\r\nclass Stage {\r\n    constructor(container, word, callback, playAnswerSound) {\r\n        this.answers = [];\r\n        this.result = false;\r\n        this.hasAnswer = false;\r\n        this.loadNextStage = () => {\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.wrapper.remove();\r\n            this.callback(this.word, this.result);\r\n        };\r\n        this.sayWord = () => {\r\n            const audio = new Audio(`${constants_1.BASE_LINK}/${this.word.audio}`);\r\n            audio.addEventListener('canplaythrough', audio.play);\r\n        };\r\n        this.keyHandler = (e) => {\r\n            if (e.code === 'Space') {\r\n                this.sayWord();\r\n                return;\r\n            }\r\n            if (e.key === 'Enter') {\r\n                if (!this.hasAnswer)\r\n                    this.answerHandler();\r\n                else\r\n                    this.loadNextStage();\r\n                return;\r\n            }\r\n            if (this.hasAnswer)\r\n                return;\r\n            const answerNumber = Number(e.key);\r\n            if (answerNumber > 0 && answerNumber <= this.answers.length) {\r\n                const currentAnswer = this.answers.find((answer) => answer.number === answerNumber);\r\n                if (currentAnswer) {\r\n                    this.answerHandler(currentAnswer);\r\n                    this.answers.forEach((answer) => answer.addEndStageStyleByKeyboard(currentAnswer));\r\n                }\r\n            }\r\n        };\r\n        this.removeListeners = () => {\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.links.forEach((link) => link.removeEventListener('click', this.removeListeners));\r\n        };\r\n        this.container = container;\r\n        this.word = word;\r\n        this.callback = callback;\r\n        this.playAnswerSound = playAnswerSound;\r\n        this.wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['stage'] });\r\n        this.wordText = (0, createNode_1.default)({ tag: 'span', classes: ['word__text'] });\r\n        this.skipButton = (0, createNode_1.default)({ tag: 'button', classes: ['button', 'button-skip'], inner: 'не знаю' });\r\n        this.nextStageButton = (0, createNode_1.default)({ tag: 'button', classes: ['button', 'button-next'], inner: '⟶' });\r\n        this.soundButton = (0, createNode_1.default)({ tag: 'button', classes: ['speaker-button'], inner: speakerSVG_1.SPEAKER });\r\n        this.links = document.querySelectorAll('a');\r\n    }\r\n    async start() {\r\n        await this.setAnswers();\r\n        this.sayWord();\r\n        this.render();\r\n        document.addEventListener('keydown', this.keyHandler);\r\n        this.links.forEach((link) => link.addEventListener('click', () => {\r\n            if (link.href.includes('/audiocall')) {\r\n                this.removeListeners();\r\n                this.container.remove();\r\n            }\r\n        }));\r\n    }\r\n    async setAnswers() {\r\n        const wrongAnswers = [];\r\n        for (let i = 0; wrongAnswers.length < ANSWERS_COUNT - 1; i += 1) {\r\n            wrongAnswers.push((0, getRandomWords_1.getRandomWordByGroup)(String(this.word.group)));\r\n        }\r\n        const wordAnswers = [this.word, ...(await Promise.all(wrongAnswers))];\r\n        const shuffledAnswers = (0, shuffleArray_1.shuffleArray)(wordAnswers);\r\n        this.answers = shuffledAnswers.map((word, index) => {\r\n            if (word === this.word) {\r\n                return new answer_1.Answer(word, index + 1, true, this.answerHandler.bind(this));\r\n            }\r\n            return new answer_1.Answer(word, index + 1, false, this.answerHandler.bind(this));\r\n        });\r\n    }\r\n    answerHandler(answer) {\r\n        this.hasAnswer = true;\r\n        if (answer?.isCorrect)\r\n            this.result = true;\r\n        this.showCorrectAnswer();\r\n        console.log('result of stage', this.result);\r\n    }\r\n    render() {\r\n        const wordBlock = this.createWordBlock();\r\n        const answersWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['answers'] });\r\n        const answerButtons = this.answers.map((answer) => answer.div);\r\n        answersWrapper.append(...answerButtons);\r\n        this.skipButton = (0, createNode_1.default)({ tag: 'button', classes: ['skip-button'], inner: 'не знаю' });\r\n        this.bindSkipButtonEvent(this.skipButton);\r\n        this.wrapper.append(wordBlock, answersWrapper, this.skipButton);\r\n        this.container.append(this.wrapper);\r\n    }\r\n    createWordBlock() {\r\n        const wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['word'] });\r\n        this.bindSoundButtonEvent(this.soundButton);\r\n        wrapper.append(this.soundButton, this.wordText);\r\n        return wrapper;\r\n    }\r\n    bindSoundButtonEvent(button) {\r\n        button.addEventListener('click', this.sayWord);\r\n    }\r\n    bindSkipButtonEvent(button) {\r\n        button.addEventListener('click', () => {\r\n            console.log('skip pressed');\r\n            this.skipQuestion();\r\n        });\r\n    }\r\n    bindNextStageButtonEvent(button) {\r\n        button.addEventListener('click', this.loadNextStage);\r\n    }\r\n    skipQuestion() {\r\n        this.showCorrectAnswer();\r\n    }\r\n    showCorrectAnswer() {\r\n        const wordImage = (0, createNode_1.default)({\r\n            tag: 'img',\r\n            classes: ['stage__img'],\r\n            atributesAdnValues: [['src', `${constants_1.BASE_LINK}/${this.word.image}`], ['alt', this.word.word]],\r\n        });\r\n        this.soundButton.classList.add('speaker-button_min');\r\n        this.wrapper.prepend(wordImage);\r\n        this.wordText.innerHTML = this.word.word;\r\n        this.answers.forEach((answer) => answer.removeListener());\r\n        this.bindNextStageButtonEvent(this.nextStageButton);\r\n        this.skipButton.replaceWith(this.nextStageButton);\r\n        this.playAnswerSound(this.result);\r\n    }\r\n}\r\nexports.Stage = Stage;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9990\n")},9392:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.StartPage = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst AUDIO_CALL_DESCRIPTION = 'Тренировка улучшает восприятие речи на слух.';\r\nconst GAME_NAME = 'Аудиовызов';\r\nclass StartPage {\r\n    constructor(container, callback) {\r\n        this.startGame = () => {\r\n            this.wrapper.remove();\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.callback();\r\n        };\r\n        this.keyHandler = (e) => {\r\n            if (e.key === 'Enter')\r\n                this.startGame();\r\n        };\r\n        this.removeListeners = () => {\r\n            document.removeEventListener('keydown', this.keyHandler);\r\n            this.links.forEach((link) => link.removeEventListener('click', this.removeListeners));\r\n        };\r\n        this.container = container;\r\n        this.callback = callback;\r\n        this.wrapper = (0, createNode_1.default)({ tag: 'div', classes: ['level-select'] });\r\n        this.links = document.querySelectorAll('a');\r\n    }\r\n    render() {\r\n        const title = (0, createNode_1.default)({ tag: 'h2', classes: ['game__title'], inner: GAME_NAME });\r\n        const description = (0, createNode_1.default)({ tag: 'p', classes: ['game__descpiption'], inner: AUDIO_CALL_DESCRIPTION });\r\n        const button = (0, createNode_1.default)({ tag: 'button', atributesAdnValues: [['type', 'button']], inner: 'начать' });\r\n        button.addEventListener('click', this.startGame);\r\n        document.addEventListener('keydown', this.keyHandler);\r\n        this.links.forEach((link) => link.addEventListener('click', () => {\r\n            if (!link.href.includes('/audiocall')) {\r\n                this.removeListeners();\r\n                this.container.remove();\r\n            }\r\n        }));\r\n        this.wrapper.append(title, description, button);\r\n        this.container.append(this.wrapper);\r\n    }\r\n}\r\nexports.StartPage = StartPage;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FnQkY7QUEvQ0QsOEJBK0NDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL2F1ZGlvY2FsbC9zdGFydFBhZ2UudHM/MWNjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlTm9kZSBmcm9tICcuLi91dGlscy9jcmVhdGVOb2RlJztcclxuXHJcbmNvbnN0IEFVRElPX0NBTExfREVTQ1JJUFRJT04gPSAn0KLRgNC10L3QuNGA0L7QstC60LAg0YPQu9GD0YfRiNCw0LXRgiDQstC+0YHQv9GA0LjRj9GC0LjQtSDRgNC10YfQuCDQvdCwINGB0LvRg9GFLic7XHJcbmNvbnN0IEdBTUVfTkFNRSA9ICfQkNGD0LTQuNC+0LLRi9C30L7Qsic7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhcnRQYWdlIHtcclxuICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgY2FsbGJhY2s6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHByaXZhdGUgd3JhcHBlcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgbGlua3M6IE5vZGVMaXN0T2Y8SFRNTEFuY2hvckVsZW1lbnQ+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250YWluZXI6IEhUTUxFbGVtZW50LCBjYWxsYmFjazogKCk9PiB2b2lkKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIHRoaXMud3JhcHBlciA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdkaXYnLCBjbGFzc2VzOiBbJ2xldmVsLXNlbGVjdCddIH0pO1xyXG4gICAgdGhpcy5saW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB0aXRsZSA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdoMicsIGNsYXNzZXM6IFsnZ2FtZV9fdGl0bGUnXSwgaW5uZXI6IEdBTUVfTkFNRSB9KTtcclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gY3JlYXRlTm9kZSh7IHRhZzogJ3AnLCBjbGFzc2VzOiBbJ2dhbWVfX2Rlc2NwaXB0aW9uJ10sIGlubmVyOiBBVURJT19DQUxMX0RFU0NSSVBUSU9OIH0pO1xyXG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlTm9kZSh7IHRhZzogJ2J1dHRvbicsIGF0cmlidXRlc0FkblZhbHVlczogW1sndHlwZScsICdidXR0b24nXV0sIGlubmVyOiAn0L3QsNGH0LDRgtGMJyB9KTtcclxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc3RhcnRHYW1lKTtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleUhhbmRsZXIpO1xyXG4gICAgdGhpcy5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAoIWxpbmsuaHJlZi5pbmNsdWRlcygnL2F1ZGlvY2FsbCcpKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfSkpO1xyXG5cclxuICAgIHRoaXMud3JhcHBlci5hcHBlbmQodGl0bGUsIGRlc2NyaXB0aW9uLCBidXR0b24pO1xyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMud3JhcHBlcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXJ0R2FtZSA9ICgpID0+IHtcclxuICAgIHRoaXMud3JhcHBlci5yZW1vdmUoKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmtleUhhbmRsZXIpO1xyXG4gICAgdGhpcy5jYWxsYmFjaygpO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUga2V5SGFuZGxlciA9IChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicpIHRoaXMuc3RhcnRHYW1lKCk7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnMgPSAoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5rZXlIYW5kbGVyKTtcclxuICAgIHRoaXMubGlua3MuZm9yRWFjaCgobGluaykgPT4gbGluay5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucmVtb3ZlTGlzdGVuZXJzKSk7XHJcbiAgfTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9392\n")},2962:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Controller = void 0;\r\nconst navigo_1 = __importDefault(__webpack_require__(8123));\r\nconst TextBook_1 = __webpack_require__(8305);\r\nconst api_1 = __webpack_require__(1341);\r\nconst Modal_1 = __webpack_require__(9843);\r\nconst LoginForm_1 = __webpack_require__(5674);\r\nconst RegisterForm_1 = __webpack_require__(9441);\r\nconst constants_1 = __webpack_require__(5004);\r\nconst UserUI_1 = __webpack_require__(3761);\r\nconst Sprint_1 = __webpack_require__(2956);\r\nconst audioCall_1 = __webpack_require__(1787);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst MainPage_1 = __webpack_require__(8096);\r\nconst BurgerMenu_1 = __webpack_require__(7618);\r\nconst WordController_1 = __webpack_require__(3584);\r\nclass Controller {\r\n    constructor() {\r\n        this.router = new navigo_1.default('/', { hash: true });\r\n        this.api = new api_1.Api();\r\n        this.textBook = new TextBook_1.TextBook(constants_1.LEVELS_OF_TEXTBOOK);\r\n        this.modal = new Modal_1.Modal();\r\n        this.loginForm = new LoginForm_1.LoginForm('login', 'Login');\r\n        this.registerForm = new RegisterForm_1.RegisterForm('register', 'Register');\r\n        this.userUI = new UserUI_1.UserUI();\r\n        this.storage = new Storage_1.Storage();\r\n        this.mainPage = new MainPage_1.MainPage();\r\n        this.menu = new BurgerMenu_1.BurgerMenu();\r\n        this.wordController = new WordController_1.WordController();\r\n    }\r\n    initRouter() {\r\n        this.router\r\n            .on(() => {\r\n            this.mainPage.renderMain();\r\n            this.router.updatePageLinks();\r\n        })\r\n            .on('/book', async () => {\r\n            this.menu.closeMenu();\r\n            await this.handleTextBook();\r\n            this.router.updatePageLinks();\r\n        })\r\n            .on('/sprint', () => {\r\n            this.menu.closeMenu();\r\n            this.initSprintFromMenu();\r\n        })\r\n            .on('/book/sprint', () => {\r\n            this.initSprintFromBook();\r\n        })\r\n            .on('/audiocall', () => {\r\n            this.initAudioCallfromMenu();\r\n            this.menu.closeMenu();\r\n        })\r\n            .on('/book/audiocall', () => {\r\n            this.initAudioCallfromBook();\r\n        })\r\n            .on('/user', () => {\r\n            this.menu.closeMenu();\r\n            this.userUI.renderUserPage();\r\n            this.router.updatePageLinks();\r\n        })\r\n            .resolve();\r\n    }\r\n    async initApp() {\r\n        this.menu.initBurgerMenu();\r\n        this.textBook.listenLevels(this.handleTextBoookPageUpdate.bind(this));\r\n        this.textBook.listenPagination(this.handleTextBoookPageUpdate.bind(this));\r\n        this.startUserForms();\r\n        this.loginForm.listenForm(this.handleLoginBtn.bind(this));\r\n        this.registerForm.listenForm(this.handleRegistartion.bind(this));\r\n        this.userUI.unAuthorize(this.handleUnLogin.bind(this));\r\n        this.handleUser();\r\n        this.router.updatePageLinks();\r\n    }\r\n    async handleTextBook() {\r\n        const stored = this.storage.getData('textBook');\r\n        const logined = this.storage.getData('UserId');\r\n        if (stored && logined) {\r\n            if (stored.group === 6) {\r\n                const newData = await this.wordController.getUserBookWords();\r\n                this.textBook.updateTextbook(newData, true, 6, 0);\r\n                console.log('Есть локал бук и залогинен, level hard');\r\n            }\r\n            else {\r\n                const newData = await this.api.getAggregatedUserWords(logined, { group: stored.group, page: stored.page, wordsPerPage: String(constants_1.WORDS_PER_PAGE) });\r\n                console.log('Есть локал бук и залогинен');\r\n                this.textBook.updateTextbook(newData, true, stored.group, stored.page);\r\n            }\r\n        }\r\n        else if (stored && !logined) {\r\n            console.log('Есть локал бук и НЕ залогинен');\r\n            const data = await this.api.getWords(stored);\r\n            this.textBook.updateTextbook(data, false, stored.group, stored.page);\r\n        }\r\n        else if (!stored && logined) {\r\n            const newData = await this.api.getAggregatedUserWords(logined, { group: '0', page: '0', wordsPerPage: String(constants_1.WORDS_PER_PAGE) });\r\n            console.log('Не ходит по учебнику и залогинен');\r\n            this.textBook.updateTextbook(newData, true, 0, 0);\r\n        }\r\n        else {\r\n            console.log('Не ходит по учебнику и не залогинен');\r\n            const data = await this.api.getWords({ group: '0', page: '0' });\r\n            this.textBook.updateTextbook(data, false, 0, 0);\r\n        }\r\n        this.textBook.addLinksHandler();\r\n    }\r\n    async handleTextBoookPageUpdate(groupStr, pageStr) {\r\n        this.storage.setData('textBook', `{\"group\": ${groupStr}, \"page\": ${pageStr}}`);\r\n        this.handleTextBook();\r\n    }\r\n    startUserForms() {\r\n        const loginFormHTML = this.loginForm.renderForm();\r\n        const regFormHTML = this.registerForm.renderForm();\r\n        constants_1.REGISTER_BTN.addEventListener('click', () => this.modal.renderModal(regFormHTML));\r\n        constants_1.LOGIN_BTN.addEventListener('click', () => this.modal.renderModal(loginFormHTML));\r\n    }\r\n    async handleLoginBtn(email, password) {\r\n        const object = { email, password };\r\n        const res = await this.api.authorize(object);\r\n        if (typeof res === 'object') {\r\n            this.modal.exitModal();\r\n            this.storage.setData('UserId', res);\r\n            this.userUI.authorise(res);\r\n            this.router.updatePageLinks();\r\n            if (window.location.href.match(/\\/book$/)) {\r\n                await this.handleTextBook();\r\n            }\r\n        }\r\n        else {\r\n            this.modal.showLoginMessage();\r\n        }\r\n    }\r\n    handleUser() {\r\n        console.log('handleUser');\r\n        const stored = this.storage.getData('UserId');\r\n        if (stored) {\r\n            const refreshTokenExpires = stored.tokenExpires\r\n                + (constants_1.REFRESHTOKEN_LIFETIME_IN_HOURS - constants_1.TOKEN_LIFETIME_IN_HOURS) * 60 * 60 * 1000;\r\n            if (refreshTokenExpires > Date.now())\r\n                this.userUI.authorise(stored);\r\n            else {\r\n                this.handleUnLogin();\r\n            }\r\n        }\r\n    }\r\n    async handleRegistartion(name, email, password, errorMessage) {\r\n        const object = { name, email, password };\r\n        const regResponse = await this.api.createUser(object);\r\n        if (typeof regResponse === 'object') {\r\n            this.modal.showMessage(`Успешная регистрация! Добро пожаловать, ${name}`);\r\n            const obj = { email, password };\r\n            setTimeout(() => this.makeNewUser(obj), 3000);\r\n        }\r\n        else {\r\n            // eslint-disable-next-line no-param-reassign\r\n            errorMessage.innerHTML = 'Пользователь с таким e-mail уже существует';\r\n        }\r\n    }\r\n    async makeNewUser(obj) {\r\n        const res = await this.api.authorize(obj);\r\n        if (typeof res === 'object') {\r\n            this.modal.exitModal();\r\n            this.storage.setData('UserId', res);\r\n            this.userUI.authorise(res);\r\n            if (window.location.href.match(/\\/book$/)) {\r\n                await this.handleTextBook();\r\n            }\r\n        }\r\n    }\r\n    handleUnLogin() {\r\n        this.storage.clear();\r\n        this.router.navigate('/');\r\n        this.router.updatePageLinks();\r\n    }\r\n    initSprintFromBook() {\r\n        this.sprint = new Sprint_1.Sprint('book');\r\n        this.sprint.setBookPageAndLevel(this.textBook.currentLevel, this.textBook.currentPage);\r\n        this.sprint.renderGame();\r\n    }\r\n    initSprintFromMenu() {\r\n        this.sprint = new Sprint_1.Sprint('menu');\r\n        this.sprint.renderGame();\r\n    }\r\n    closeSprint() {\r\n        this.sprint?.closeGame();\r\n    }\r\n    initAudioCallfromMenu() {\r\n        const game = new audioCall_1.AudioCall();\r\n        game.start();\r\n    }\r\n    initAudioCallfromBook() {\r\n        const game = new audioCall_1.AudioCall();\r\n        game.start({ group: this.textBook.currentLevel, page: this.textBook.currentPage });\r\n    }\r\n}\r\nexports.Controller = Controller;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDckYsQ0FBQztDQUNGO0FBMU5ELGdDQTBOQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy9jb250cm9sbGVyL0NvbnRyb2xsZXIudHM/ZTUwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmF2aWdvIGZyb20gJ25hdmlnbyc7XHJcbmltcG9ydCB7IFRleHRCb29rIH0gZnJvbSAnLi4vdGV4dEJvb2svVGV4dEJvb2snO1xyXG5pbXBvcnQgeyBBcGkgfSBmcm9tICcuLi9Nb2RlbC9hcGknO1xyXG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gJy4uL3V0aWxzL01vZGFsJztcclxuaW1wb3J0IHsgTG9naW5Gb3JtIH0gZnJvbSAnLi4vZm9ybXMvTG9naW5Gb3JtJztcclxuaW1wb3J0IHsgUmVnaXN0ZXJGb3JtIH0gZnJvbSAnLi4vZm9ybXMvUmVnaXN0ZXJGb3JtJztcclxuaW1wb3J0IHtcclxuICBSRUdJU1RFUl9CVE4sIExPR0lOX0JUTiwgTEVWRUxTX09GX1RFWFRCT09LLCBXT1JEU19QRVJfUEFHRSxcclxuICBSRUZSRVNIVE9LRU5fTElGRVRJTUVfSU5fSE9VUlMsIFRPS0VOX0xJRkVUSU1FX0lOX0hPVVJTLFxyXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IFVzZXJVSSB9IGZyb20gJy4uL3VzZXIvVXNlclVJJztcclxuaW1wb3J0IHsgU3ByaW50IH0gZnJvbSAnLi4vc3ByaW50L1NwcmludCc7XHJcbmltcG9ydCB7IEF1ZGlvQ2FsbCB9IGZyb20gJy4uL2F1ZGlvY2FsbC9hdWRpb0NhbGwnO1xyXG5pbXBvcnQgeyBTdG9yYWdlIH0gZnJvbSAnLi4vU3RvcmFnZS9TdG9yYWdlJztcclxuaW1wb3J0IHsgQXV0aG9yaXphdGlvbkRhdGEsIFVzZXJBZ2dyZWdhdGVkV29yZCwgVXNlckNyZWF0aW9uRGF0YSB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBNYWluUGFnZSB9IGZyb20gJy4uL01haW5QYWdlL01haW5QYWdlJztcclxuaW1wb3J0IHsgQnVyZ2VyTWVudSB9IGZyb20gJy4uL3V0aWxzL0J1cmdlck1lbnUnO1xyXG5pbXBvcnQgeyBXb3JkQ29udHJvbGxlciB9IGZyb20gJy4uL1dvcmRDb250cm9sbGVyL1dvcmRDb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIHtcclxuICByb3V0ZXI6IE5hdmlnbztcclxuXHJcbiAgYXBpOiBBcGk7XHJcblxyXG4gIHRleHRCb29rOiBUZXh0Qm9vaztcclxuXHJcbiAgc3ByaW50OiBTcHJpbnQgfCB1bmRlZmluZWQ7XHJcblxyXG4gIG1vZGFsOiBNb2RhbDtcclxuXHJcbiAgbG9naW5Gb3JtOiBMb2dpbkZvcm07XHJcblxyXG4gIHJlZ2lzdGVyRm9ybTogUmVnaXN0ZXJGb3JtO1xyXG5cclxuICB1c2VyVUk6IFVzZXJVSTtcclxuXHJcbiAgc3RvcmFnZTogU3RvcmFnZTtcclxuXHJcbiAgbWFpblBhZ2U6IE1haW5QYWdlO1xyXG5cclxuICBtZW51OiBCdXJnZXJNZW51O1xyXG5cclxuICB3b3JkQ29udHJvbGxlcjogV29yZENvbnRyb2xsZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5yb3V0ZXIgPSBuZXcgTmF2aWdvKCcvJywgeyBoYXNoOiB0cnVlIH0pO1xyXG4gICAgdGhpcy5hcGkgPSBuZXcgQXBpKCk7XHJcbiAgICB0aGlzLnRleHRCb29rID0gbmV3IFRleHRCb29rKExFVkVMU19PRl9URVhUQk9PSyk7XHJcbiAgICB0aGlzLm1vZGFsID0gbmV3IE1vZGFsKCk7XHJcbiAgICB0aGlzLmxvZ2luRm9ybSA9IG5ldyBMb2dpbkZvcm0oJ2xvZ2luJywgJ0xvZ2luJyk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRm9ybSA9IG5ldyBSZWdpc3RlckZvcm0oJ3JlZ2lzdGVyJywgJ1JlZ2lzdGVyJyk7XHJcbiAgICB0aGlzLnVzZXJVSSA9IG5ldyBVc2VyVUkoKTtcclxuICAgIHRoaXMuc3RvcmFnZSA9IG5ldyBTdG9yYWdlKCk7XHJcbiAgICB0aGlzLm1haW5QYWdlID0gbmV3IE1haW5QYWdlKCk7XHJcbiAgICB0aGlzLm1lbnUgPSBuZXcgQnVyZ2VyTWVudSgpO1xyXG4gICAgdGhpcy53b3JkQ29udHJvbGxlciA9IG5ldyBXb3JkQ29udHJvbGxlcigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGluaXRSb3V0ZXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLnJvdXRlclxyXG4gICAgICAub24oKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubWFpblBhZ2UucmVuZGVyTWFpbigpO1xyXG4gICAgICAgIHRoaXMucm91dGVyLnVwZGF0ZVBhZ2VMaW5rcygpO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJy9ib29rJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubWVudS5jbG9zZU1lbnUoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVRleHRCb29rKCk7XHJcbiAgICAgICAgdGhpcy5yb3V0ZXIudXBkYXRlUGFnZUxpbmtzKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignL3NwcmludCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLm1lbnUuY2xvc2VNZW51KCk7XHJcbiAgICAgICAgdGhpcy5pbml0U3ByaW50RnJvbU1lbnUoKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCcvYm9vay9zcHJpbnQnLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pbml0U3ByaW50RnJvbUJvb2soKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCcvYXVkaW9jYWxsJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW5pdEF1ZGlvQ2FsbGZyb21NZW51KCk7XHJcbiAgICAgICAgdGhpcy5tZW51LmNsb3NlTWVudSgpO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJy9ib29rL2F1ZGlvY2FsbCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLmluaXRBdWRpb0NhbGxmcm9tQm9vaygpO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJy91c2VyJywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubWVudS5jbG9zZU1lbnUoKTtcclxuICAgICAgICB0aGlzLnVzZXJVSS5yZW5kZXJVc2VyUGFnZSgpO1xyXG4gICAgICAgIHRoaXMucm91dGVyLnVwZGF0ZVBhZ2VMaW5rcygpO1xyXG4gICAgICB9KVxyXG4gICAgICAucmVzb2x2ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGluaXRBcHAoKSB7XHJcbiAgICB0aGlzLm1lbnUuaW5pdEJ1cmdlck1lbnUoKTtcclxuICAgIHRoaXMudGV4dEJvb2subGlzdGVuTGV2ZWxzKHRoaXMuaGFuZGxlVGV4dEJvb29rUGFnZVVwZGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMudGV4dEJvb2subGlzdGVuUGFnaW5hdGlvbih0aGlzLmhhbmRsZVRleHRCb29va1BhZ2VVcGRhdGUuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLnN0YXJ0VXNlckZvcm1zKCk7XHJcbiAgICB0aGlzLmxvZ2luRm9ybS5saXN0ZW5Gb3JtKHRoaXMuaGFuZGxlTG9naW5CdG4uYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRm9ybS5saXN0ZW5Gb3JtKHRoaXMuaGFuZGxlUmVnaXN0YXJ0aW9uLmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy51c2VyVUkudW5BdXRob3JpemUodGhpcy5oYW5kbGVVbkxvZ2luLmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy5oYW5kbGVVc2VyKCk7XHJcbiAgICB0aGlzLnJvdXRlci51cGRhdGVQYWdlTGlua3MoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBoYW5kbGVUZXh0Qm9vaygpIHtcclxuICAgIGNvbnN0IHN0b3JlZCA9IHRoaXMuc3RvcmFnZS5nZXREYXRhKCd0ZXh0Qm9vaycpO1xyXG4gICAgY29uc3QgbG9naW5lZCA9IHRoaXMuc3RvcmFnZS5nZXREYXRhKCdVc2VySWQnKTtcclxuICAgIGlmIChzdG9yZWQgJiYgbG9naW5lZCkge1xyXG4gICAgICBpZiAoc3RvcmVkLmdyb3VwID09PSA2KSB7XHJcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IGF3YWl0IHRoaXMud29yZENvbnRyb2xsZXIuZ2V0VXNlckJvb2tXb3JkcygpO1xyXG4gICAgICAgIHRoaXMudGV4dEJvb2sudXBkYXRlVGV4dGJvb2sobmV3RGF0YSwgdHJ1ZSwgNiwgMCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ9CV0YHRgtGMINC70L7QutCw0Lsg0LHRg9C6INC4INC30LDQu9C+0LPQuNC90LXQvSwgbGV2ZWwgaGFyZCcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSBhd2FpdCB0aGlzLmFwaS5nZXRBZ2dyZWdhdGVkVXNlcldvcmRzKFxyXG4gICAgICAgICAgbG9naW5lZCxcclxuICAgICAgICAgIHsgZ3JvdXA6IHN0b3JlZC5ncm91cCwgcGFnZTogc3RvcmVkLnBhZ2UsIHdvcmRzUGVyUGFnZTogU3RyaW5nKFdPUkRTX1BFUl9QQUdFKSB9LFxyXG4gICAgICAgICkgYXMgVXNlckFnZ3JlZ2F0ZWRXb3JkW107XHJcbiAgICAgICAgY29uc29sZS5sb2coJ9CV0YHRgtGMINC70L7QutCw0Lsg0LHRg9C6INC4INC30LDQu9C+0LPQuNC90LXQvScpO1xyXG4gICAgICAgIHRoaXMudGV4dEJvb2sudXBkYXRlVGV4dGJvb2sobmV3RGF0YSwgdHJ1ZSwgc3RvcmVkLmdyb3VwLCBzdG9yZWQucGFnZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoc3RvcmVkICYmICFsb2dpbmVkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfQldGB0YLRjCDQu9C+0LrQsNC7INCx0YPQuiDQuCDQndCVINC30LDQu9C+0LPQuNC90LXQvScpO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkuZ2V0V29yZHMoc3RvcmVkKTtcclxuICAgICAgdGhpcy50ZXh0Qm9vay51cGRhdGVUZXh0Ym9vayhkYXRhLCBmYWxzZSwgc3RvcmVkLmdyb3VwLCBzdG9yZWQucGFnZSk7XHJcbiAgICB9IGVsc2UgaWYgKCFzdG9yZWQgJiYgbG9naW5lZCkge1xyXG4gICAgICBjb25zdCBuZXdEYXRhID0gYXdhaXQgdGhpcy5hcGkuZ2V0QWdncmVnYXRlZFVzZXJXb3JkcyhcclxuICAgICAgICBsb2dpbmVkLFxyXG4gICAgICAgIHsgZ3JvdXA6ICcwJywgcGFnZTogJzAnLCB3b3Jkc1BlclBhZ2U6IFN0cmluZyhXT1JEU19QRVJfUEFHRSkgfSxcclxuICAgICAgKSBhcyBVc2VyQWdncmVnYXRlZFdvcmRbXTtcclxuICAgICAgY29uc29sZS5sb2coJ9Cd0LUg0YXQvtC00LjRgiDQv9C+INGD0YfQtdCx0L3QuNC60YMg0Lgg0LfQsNC70L7Qs9C40L3QtdC9Jyk7XHJcbiAgICAgIHRoaXMudGV4dEJvb2sudXBkYXRlVGV4dGJvb2sobmV3RGF0YSwgdHJ1ZSwgMCwgMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZygn0J3QtSDRhdC+0LTQuNGCINC/0L4g0YPRh9C10LHQvdC40LrRgyDQuCDQvdC1INC30LDQu9C+0LPQuNC90LXQvScpO1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcGkuZ2V0V29yZHMoeyBncm91cDogJzAnLCBwYWdlOiAnMCcgfSk7XHJcbiAgICAgIHRoaXMudGV4dEJvb2sudXBkYXRlVGV4dGJvb2soZGF0YSwgZmFsc2UsIDAsIDApO1xyXG4gICAgfVxyXG4gICAgdGhpcy50ZXh0Qm9vay5hZGRMaW5rc0hhbmRsZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBoYW5kbGVUZXh0Qm9vb2tQYWdlVXBkYXRlKGdyb3VwU3RyOiBzdHJpbmcsIHBhZ2VTdHI6IHN0cmluZykge1xyXG4gICAgdGhpcy5zdG9yYWdlLnNldERhdGEoJ3RleHRCb29rJywgYHtcImdyb3VwXCI6ICR7Z3JvdXBTdHJ9LCBcInBhZ2VcIjogJHtwYWdlU3RyfX1gKTtcclxuICAgIHRoaXMuaGFuZGxlVGV4dEJvb2soKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhcnRVc2VyRm9ybXMoKSB7XHJcbiAgICBjb25zdCBsb2dpbkZvcm1IVE1MID0gdGhpcy5sb2dpbkZvcm0ucmVuZGVyRm9ybSgpO1xyXG4gICAgY29uc3QgcmVnRm9ybUhUTUwgPSB0aGlzLnJlZ2lzdGVyRm9ybS5yZW5kZXJGb3JtKCk7XHJcbiAgICBSRUdJU1RFUl9CVE4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm1vZGFsLnJlbmRlck1vZGFsKHJlZ0Zvcm1IVE1MKSk7XHJcbiAgICBMT0dJTl9CVE4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLm1vZGFsLnJlbmRlck1vZGFsKGxvZ2luRm9ybUhUTUwpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyBoYW5kbGVMb2dpbkJ0bihlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvYmplY3Q6IFBpY2s8VXNlckNyZWF0aW9uRGF0YSwgJ2VtYWlsJyB8ICdwYXNzd29yZCc+ID0geyBlbWFpbCwgcGFzc3dvcmQgfTtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuYXBpLmF1dGhvcml6ZShvYmplY3QpO1xyXG4gICAgaWYgKHR5cGVvZiByZXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIHRoaXMubW9kYWwuZXhpdE1vZGFsKCk7XHJcbiAgICAgIHRoaXMuc3RvcmFnZS5zZXREYXRhKCdVc2VySWQnLCByZXMpO1xyXG4gICAgICB0aGlzLnVzZXJVSS5hdXRob3Jpc2UocmVzKTtcclxuICAgICAgdGhpcy5yb3V0ZXIudXBkYXRlUGFnZUxpbmtzKCk7XHJcbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5tYXRjaCgvXFwvYm9vayQvKSkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlVGV4dEJvb2soKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5tb2RhbC5zaG93TG9naW5NZXNzYWdlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFuZGxlVXNlcigpIHtcclxuICAgIGNvbnNvbGUubG9nKCdoYW5kbGVVc2VyJyk7XHJcbiAgICBjb25zdCBzdG9yZWQgPSB0aGlzLnN0b3JhZ2UuZ2V0RGF0YSgnVXNlcklkJykgYXMgQXV0aG9yaXphdGlvbkRhdGEgfCBudWxsO1xyXG4gICAgaWYgKHN0b3JlZCkge1xyXG4gICAgICBjb25zdCByZWZyZXNoVG9rZW5FeHBpcmVzID0gc3RvcmVkLnRva2VuRXhwaXJlc1xyXG4gICAgICArIChSRUZSRVNIVE9LRU5fTElGRVRJTUVfSU5fSE9VUlMgLSBUT0tFTl9MSUZFVElNRV9JTl9IT1VSUykgKiA2MCAqIDYwICogMTAwMDtcclxuICAgICAgaWYgKHJlZnJlc2hUb2tlbkV4cGlyZXMgPiBEYXRlLm5vdygpKSB0aGlzLnVzZXJVSS5hdXRob3Jpc2Uoc3RvcmVkKTtcclxuICAgICAgZWxzZSB7IHRoaXMuaGFuZGxlVW5Mb2dpbigpOyB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgaGFuZGxlUmVnaXN0YXJ0aW9uKFxyXG4gICAgbmFtZTogc3RyaW5nLFxyXG4gICAgZW1haWw6IHN0cmluZyxcclxuICAgIHBhc3N3b3JkOiBzdHJpbmcsXHJcbiAgICBlcnJvck1lc3NhZ2U6IEhUTUxFbGVtZW50LFxyXG4gICkge1xyXG4gICAgY29uc3Qgb2JqZWN0OiBVc2VyQ3JlYXRpb25EYXRhID0geyBuYW1lLCBlbWFpbCwgcGFzc3dvcmQgfTtcclxuICAgIGNvbnN0IHJlZ1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGkuY3JlYXRlVXNlcihvYmplY3QpO1xyXG4gICAgaWYgKHR5cGVvZiByZWdSZXNwb25zZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgdGhpcy5tb2RhbC5zaG93TWVzc2FnZShg0KPRgdC/0LXRiNC90LDRjyDRgNC10LPQuNGB0YLRgNCw0YbQuNGPISDQlNC+0LHRgNC+INC/0L7QttCw0LvQvtCy0LDRgtGMLCAke25hbWV9YCk7XHJcbiAgICAgIGNvbnN0IG9iajogUGljazxVc2VyQ3JlYXRpb25EYXRhLCAnZW1haWwnIHwgJ3Bhc3N3b3JkJz4gPSB7IGVtYWlsLCBwYXNzd29yZCB9O1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMubWFrZU5ld1VzZXIob2JqKSwgMzAwMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cclxuICAgICAgZXJyb3JNZXNzYWdlLmlubmVySFRNTCA9ICfQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0YEg0YLQsNC60LjQvCBlLW1haWwg0YPQttC1INGB0YPRidC10YHRgtCy0YPQtdGCJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgbWFrZU5ld1VzZXIob2JqOiBQaWNrPFVzZXJDcmVhdGlvbkRhdGEsICdlbWFpbCcgfCAncGFzc3dvcmQnPikge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5hcGkuYXV0aG9yaXplKG9iaik7XHJcbiAgICBpZiAodHlwZW9mIHJlcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgdGhpcy5tb2RhbC5leGl0TW9kYWwoKTtcclxuICAgICAgdGhpcy5zdG9yYWdlLnNldERhdGEoJ1VzZXJJZCcsIHJlcyk7XHJcbiAgICAgIHRoaXMudXNlclVJLmF1dGhvcmlzZShyZXMpO1xyXG4gICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goL1xcL2Jvb2skLykpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLmhhbmRsZVRleHRCb29rKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlVW5Mb2dpbigpIHtcclxuICAgIHRoaXMuc3RvcmFnZS5jbGVhcigpO1xyXG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoJy8nKTtcclxuICAgIHRoaXMucm91dGVyLnVwZGF0ZVBhZ2VMaW5rcygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0U3ByaW50RnJvbUJvb2soKSB7XHJcbiAgICB0aGlzLnNwcmludCA9IG5ldyBTcHJpbnQoJ2Jvb2snKTtcclxuICAgIHRoaXMuc3ByaW50LnNldEJvb2tQYWdlQW5kTGV2ZWwodGhpcy50ZXh0Qm9vay5jdXJyZW50TGV2ZWwsIHRoaXMudGV4dEJvb2suY3VycmVudFBhZ2UpO1xyXG4gICAgdGhpcy5zcHJpbnQucmVuZGVyR2FtZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0U3ByaW50RnJvbU1lbnUoKSB7XHJcbiAgICB0aGlzLnNwcmludCA9IG5ldyBTcHJpbnQoJ21lbnUnKTtcclxuICAgIHRoaXMuc3ByaW50LnJlbmRlckdhbWUoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2xvc2VTcHJpbnQoKSB7XHJcbiAgICB0aGlzLnNwcmludD8uY2xvc2VHYW1lKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5pdEF1ZGlvQ2FsbGZyb21NZW51KCkge1xyXG4gICAgY29uc3QgZ2FtZSA9IG5ldyBBdWRpb0NhbGwoKTtcclxuICAgIGdhbWUuc3RhcnQoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0QXVkaW9DYWxsZnJvbUJvb2soKSB7XHJcbiAgICBjb25zdCBnYW1lID0gbmV3IEF1ZGlvQ2FsbCgpO1xyXG4gICAgZ2FtZS5zdGFydCh7IGdyb3VwOiB0aGlzLnRleHRCb29rLmN1cnJlbnRMZXZlbCwgcGFnZTogdGhpcy50ZXh0Qm9vay5jdXJyZW50UGFnZSB9KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2962\n")},6205:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Form = void 0;\r\nconst constants_1 = __webpack_require__(5004);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nclass Form {\r\n    constructor(formName, btnName) {\r\n        this.form = (0, createNode_1.default)({ tag: 'form', classes: ['form'], atributesAdnValues: [['id', `${formName}-form`]] });\r\n        this.errorMessage = (0, createNode_1.default)({ tag: 'p', classes: ['error-message'] });\r\n        this.submitBtn = (0, createNode_1.default)({\r\n            tag: 'button', classes: ['btn', 'btn-submit'], inner: `${btnName}`, atributesAdnValues: [['type', 'button']],\r\n        });\r\n    }\r\n    renderForm() {\r\n        const formWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['form-wrapper'] });\r\n        this.form.append(this.errorMessage, this.submitBtn);\r\n        formWrapper.append(this.form);\r\n        return formWrapper;\r\n    }\r\n    createInput(input) {\r\n        const inputName = input.getAttribute('data-name');\r\n        const inputWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['input-wrapper'] });\r\n        const error = (0, createNode_1.default)({ tag: 'div', classes: ['error-in-form'], inner: `Пожалуйста введите ${inputName}` });\r\n        error.style.display = 'none';\r\n        inputWrapper.append(input, error);\r\n        return inputWrapper;\r\n    }\r\n    checkInputValue(inputWrapper) {\r\n        const input = inputWrapper.querySelector('input');\r\n        const error = inputWrapper.querySelector('.error-in-form');\r\n        const value = input.value.trim();\r\n        if (!value) {\r\n            error.style.display = 'block';\r\n            error.innerHTML = 'Заполните поле';\r\n            return false;\r\n        }\r\n        if (input.type === 'password') {\r\n            if (value.length < 9) {\r\n                error.style.display = 'block';\r\n                error.innerHTML = 'Длина пароля должна быть не менее 8 знаков';\r\n                return false;\r\n            }\r\n        }\r\n        if (input.type === 'email') {\r\n            if (!value.match(constants_1.EMAIL_REGEX)) {\r\n                error.style.display = 'block';\r\n                error.innerHTML = 'Введите правильный email';\r\n                return false;\r\n            }\r\n        }\r\n        error.style.display = 'none';\r\n        return true;\r\n    }\r\n    validateForm(form) {\r\n        console.log('Validation started');\r\n        const inputs = [...form.querySelectorAll('.input-wrapper')];\r\n        const validated = inputs.every((input) => this.checkInputValue(input));\r\n        if (validated)\r\n            return true;\r\n        return false;\r\n    }\r\n}\r\nexports.Form = Form;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyx1QkFBVyxDQUFDLEVBQUU7Z0JBQzdCLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztnQkFDOUIsS0FBSyxDQUFDLFNBQVMsR0FBRywwQkFBMEIsQ0FBQztnQkFDN0MsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLFlBQVksQ0FBQyxJQUFxQjtRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBYyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDekUsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksU0FBUztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBakVELG9CQWlFQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy9mb3Jtcy9Gb3JtLnRzP2IyM2QiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRU1BSUxfUkVHRVggfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMnO1xyXG5pbXBvcnQgY3JlYXRlTm9kZSBmcm9tICcuLi91dGlscy9jcmVhdGVOb2RlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtIHtcclxuICBmb3JtOiBIVE1MRm9ybUVsZW1lbnQ7XHJcblxyXG4gIHN1Ym1pdEJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG4gIGVycm9yTWVzc2FnZTogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGZvcm1OYW1lOiBzdHJpbmcsIGJ0bk5hbWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5mb3JtID0gY3JlYXRlTm9kZSh7IHRhZzogJ2Zvcm0nLCBjbGFzc2VzOiBbJ2Zvcm0nXSwgYXRyaWJ1dGVzQWRuVmFsdWVzOiBbWydpZCcsIGAke2Zvcm1OYW1lfS1mb3JtYF1dIH0pIGFzIEhUTUxGb3JtRWxlbWVudDtcclxuICAgIHRoaXMuZXJyb3JNZXNzYWdlID0gY3JlYXRlTm9kZSh7IHRhZzogJ3AnLCBjbGFzc2VzOiBbJ2Vycm9yLW1lc3NhZ2UnXSB9KTtcclxuICAgIHRoaXMuc3VibWl0QnRuID0gY3JlYXRlTm9kZSh7XHJcbiAgICAgIHRhZzogJ2J1dHRvbicsIGNsYXNzZXM6IFsnYnRuJywgJ2J0bi1zdWJtaXQnXSwgaW5uZXI6IGAke2J0bk5hbWV9YCwgYXRyaWJ1dGVzQWRuVmFsdWVzOiBbWyd0eXBlJywgJ2J1dHRvbiddXSxcclxuICAgIH0pIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbmRlckZvcm0oKTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgY29uc3QgZm9ybVdyYXBwZXIgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydmb3JtLXdyYXBwZXInXSB9KSBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIHRoaXMuZm9ybS5hcHBlbmQodGhpcy5lcnJvck1lc3NhZ2UsIHRoaXMuc3VibWl0QnRuKTtcclxuICAgIGZvcm1XcmFwcGVyLmFwcGVuZCh0aGlzLmZvcm0pO1xyXG4gICAgcmV0dXJuIGZvcm1XcmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGNyZWF0ZUlucHV0KGlucHV0OiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBpbnB1dE5hbWUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpO1xyXG4gICAgY29uc3QgaW5wdXRXcmFwcGVyID0gY3JlYXRlTm9kZSh7IHRhZzogJ2RpdicsIGNsYXNzZXM6IFsnaW5wdXQtd3JhcHBlciddIH0pO1xyXG4gICAgY29uc3QgZXJyb3IgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydlcnJvci1pbi1mb3JtJ10sIGlubmVyOiBg0J/QvtC20LDQu9GD0LnRgdGC0LAg0LLQstC10LTQuNGC0LUgJHtpbnB1dE5hbWV9YCB9KTtcclxuICAgIGVycm9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICBpbnB1dFdyYXBwZXIuYXBwZW5kKGlucHV0LCBlcnJvcik7XHJcbiAgICByZXR1cm4gaW5wdXRXcmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNoZWNrSW5wdXRWYWx1ZShpbnB1dFdyYXBwZXI6IEhUTUxFbGVtZW50KSB7XHJcbiAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IGlucHV0V3JhcHBlci5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBjb25zdCBlcnJvcjogSFRNTEVsZW1lbnQgPSBpbnB1dFdyYXBwZXIucXVlcnlTZWxlY3RvcignLmVycm9yLWluLWZvcm0nKSBhcyBIVE1MRWxlbWVudDtcclxuICAgIGNvbnN0IHZhbHVlID0gaW5wdXQudmFsdWUudHJpbSgpO1xyXG4gICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgZXJyb3IuaW5uZXJIVE1MID0gJ9CX0LDQv9C+0LvQvdC40YLQtSDQv9C+0LvQtSc7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChpbnB1dC50eXBlID09PSAncGFzc3dvcmQnKSB7XHJcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPCA5KSB7XHJcbiAgICAgICAgZXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgZXJyb3IuaW5uZXJIVE1MID0gJ9CU0LvQuNC90LAg0L/QsNGA0L7Qu9GPINC00L7Qu9C20L3QsCDQsdGL0YLRjCDQvdC1INC80LXQvdC10LUgOCDQt9C90LDQutC+0LInO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGlucHV0LnR5cGUgPT09ICdlbWFpbCcpIHtcclxuICAgICAgaWYgKCF2YWx1ZS5tYXRjaChFTUFJTF9SRUdFWCkpIHtcclxuICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgICBlcnJvci5pbm5lckhUTUwgPSAn0JLQstC10LTQuNGC0LUg0L/RgNCw0LLQuNC70YzQvdGL0LkgZW1haWwnO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZXJyb3Iuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHZhbGlkYXRlRm9ybShmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcclxuICAgIGNvbnNvbGUubG9nKCdWYWxpZGF0aW9uIHN0YXJ0ZWQnKTtcclxuICAgIGNvbnN0IGlucHV0cyA9IFsuLi5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTEVsZW1lbnQ+KCcuaW5wdXQtd3JhcHBlcicpXTtcclxuICAgIGNvbnN0IHZhbGlkYXRlZCA9IGlucHV0cy5ldmVyeSgoaW5wdXQpID0+IHRoaXMuY2hlY2tJbnB1dFZhbHVlKGlucHV0KSk7XHJcbiAgICBpZiAodmFsaWRhdGVkKSByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6205\n")},5674:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LoginForm = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst Form_1 = __webpack_require__(6205);\r\nclass LoginForm extends Form_1.Form {\r\n    constructor(formName, btnName) {\r\n        super(formName, btnName);\r\n        this.formName = formName;\r\n        this.btnName = btnName;\r\n        this.email = (0, createNode_1.default)({ tag: 'input', classes: ['email-input'], atributesAdnValues: [['type', 'email'], ['placeholder', 'Your e-mail'], ['data-name', 'e-mail']] });\r\n        this.password = (0, createNode_1.default)({ tag: 'input', classes: ['password-input'], atributesAdnValues: [['type', 'password'], ['placeholder', 'Password'], ['autocomplete', 'on'], ['data-name', 'пароль']] });\r\n        this.emailWrapper = super.createInput(this.email);\r\n        this.passWrapper = super.createInput(this.password);\r\n    }\r\n    renderForm() {\r\n        const formWrapper = super.renderForm();\r\n        this.form.prepend(this.emailWrapper, this.passWrapper);\r\n        return formWrapper;\r\n    }\r\n    listenForm(callback) {\r\n        this.submitBtn.addEventListener('click', () => {\r\n            const validate = super.validateForm(this.form);\r\n            if (validate) {\r\n                callback(this.email.value, this.password.value);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.LoginForm = LoginForm;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY3NC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBNkM7QUFDN0MseUNBQThCO0FBRTlCLE1BQWEsU0FBVSxTQUFRLFdBQUk7SUFhakMsWUFBWSxRQUFnQixFQUFFLE9BQWU7UUFDM0MsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLHdCQUFVLEVBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFxQixDQUFDO1FBQzFMLElBQUksQ0FBQyxRQUFRLEdBQUcsd0JBQVUsRUFBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBcUIsQ0FBQztRQUN4TixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLFVBQVU7UUFDZixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdkMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVNLFVBQVUsQ0FBQyxRQUE4QztRQUM5RCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDNUMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0MsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakQ7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXJDRCw4QkFxQ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvZm9ybXMvTG9naW5Gb3JtLnRzP2E0ODEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU5vZGUgZnJvbSAnLi4vdXRpbHMvY3JlYXRlTm9kZSc7XHJcbmltcG9ydCB7IEZvcm0gfSBmcm9tICcuL0Zvcm0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvZ2luRm9ybSBleHRlbmRzIEZvcm0ge1xyXG4gIGVtYWlsOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBwYXNzd29yZDogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgZm9ybU5hbWU6IHN0cmluZztcclxuXHJcbiAgYnRuTmFtZTogc3RyaW5nO1xyXG5cclxuICBlbWFpbFdyYXBwZXI6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwYXNzV3JhcHBlcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGZvcm1OYW1lOiBzdHJpbmcsIGJ0bk5hbWU6IHN0cmluZykge1xyXG4gICAgc3VwZXIoZm9ybU5hbWUsIGJ0bk5hbWUpO1xyXG4gICAgdGhpcy5mb3JtTmFtZSA9IGZvcm1OYW1lO1xyXG4gICAgdGhpcy5idG5OYW1lID0gYnRuTmFtZTtcclxuICAgIHRoaXMuZW1haWwgPSBjcmVhdGVOb2RlKHsgdGFnOiAnaW5wdXQnLCBjbGFzc2VzOiBbJ2VtYWlsLWlucHV0J10sIGF0cmlidXRlc0FkblZhbHVlczogW1sndHlwZScsICdlbWFpbCddLCBbJ3BsYWNlaG9sZGVyJywgJ1lvdXIgZS1tYWlsJ10sIFsnZGF0YS1uYW1lJywgJ2UtbWFpbCddXSB9KSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgdGhpcy5wYXNzd29yZCA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdpbnB1dCcsIGNsYXNzZXM6IFsncGFzc3dvcmQtaW5wdXQnXSwgYXRyaWJ1dGVzQWRuVmFsdWVzOiBbWyd0eXBlJywgJ3Bhc3N3b3JkJ10sIFsncGxhY2Vob2xkZXInLCAnUGFzc3dvcmQnXSwgWydhdXRvY29tcGxldGUnLCAnb24nXSwgWydkYXRhLW5hbWUnLCAn0L/QsNGA0L7Qu9GMJ11dIH0pIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICB0aGlzLmVtYWlsV3JhcHBlciA9IHN1cGVyLmNyZWF0ZUlucHV0KHRoaXMuZW1haWwpO1xyXG4gICAgdGhpcy5wYXNzV3JhcHBlciA9IHN1cGVyLmNyZWF0ZUlucHV0KHRoaXMucGFzc3dvcmQpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlbmRlckZvcm0oKTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgY29uc3QgZm9ybVdyYXBwZXIgPSBzdXBlci5yZW5kZXJGb3JtKCk7XHJcbiAgICB0aGlzLmZvcm0ucHJlcGVuZCh0aGlzLmVtYWlsV3JhcHBlciwgdGhpcy5wYXNzV3JhcHBlcik7XHJcbiAgICByZXR1cm4gZm9ybVdyYXBwZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbGlzdGVuRm9ybShjYWxsYmFjazogKG1haWw6IHN0cmluZywgcGFzczogc3RyaW5nKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLnN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgY29uc3QgdmFsaWRhdGUgPSBzdXBlci52YWxpZGF0ZUZvcm0odGhpcy5mb3JtKTtcclxuICAgICAgaWYgKHZhbGlkYXRlKSB7XHJcbiAgICAgICAgY2FsbGJhY2sodGhpcy5lbWFpbC52YWx1ZSwgdGhpcy5wYXNzd29yZC52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5674\n")},9441:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.RegisterForm = void 0;\r\nconst Form_1 = __webpack_require__(6205);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst functions_1 = __webpack_require__(9593);\r\nclass RegisterForm extends Form_1.Form {\r\n    constructor(formName, btnName) {\r\n        super(formName, btnName);\r\n        this.name = (0, createNode_1.default)({ tag: 'input', classes: ['name-input'], atributesAdnValues: [['type', 'text'], ['placeholder', 'Ваше имя'], ['data-name', 'Имя'], ['autocomplete', 'off']] });\r\n        this.email = (0, createNode_1.default)({ tag: 'input', classes: ['email-input'], atributesAdnValues: [['type', 'email'], ['placeholder', 'Ваш e-mail'], ['data-name', 'e-mail'], ['autocomplete', 'off']] });\r\n        this.password = (0, createNode_1.default)({ tag: 'input', classes: ['password-input'], atributesAdnValues: [['type', 'password'], ['placeholder', 'Придумайте пароль > 8 символов'], ['autocomplete', 'new-password'], ['data-name', 'Пароль']] });\r\n        this.submitBtn = (0, createNode_1.default)({ tag: 'button', classes: ['btn', 'btn-submit'], inner: 'Зарегистрироваться' });\r\n        this.emailWrapper = super.createInput(this.email);\r\n        this.passWrapper = super.createInput(this.password);\r\n        this.nameWrapper = super.createInput(this.name);\r\n    }\r\n    renderForm() {\r\n        const formWrapper = super.renderForm();\r\n        this.form.prepend(this.nameWrapper, this.emailWrapper, this.passWrapper);\r\n        return formWrapper;\r\n    }\r\n    listenForm(callback) {\r\n        this.submitBtn.addEventListener('click', (e) => {\r\n            e.preventDefault();\r\n            this.errorMessage.innerHTML = '';\r\n            const validated = this.validateForm();\r\n            if (validated) {\r\n                const userName = (0, functions_1.makeFirslLetterUpperCase)(this.name.value);\r\n                callback(userName, this.email.value, this.password.value, this.errorMessage);\r\n            }\r\n        });\r\n    }\r\n    validateForm() {\r\n        const validated = super.validateForm(this.form);\r\n        return validated;\r\n    }\r\n}\r\nexports.RegisterForm = RegisterForm;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQzlFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sWUFBWTtRQUNqQixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUEvQ0Qsb0NBK0NDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL2Zvcm1zL1JlZ2lzdGVyRm9ybS50cz8xMzY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm0gfSBmcm9tICcuL0Zvcm0nO1xyXG5pbXBvcnQgY3JlYXRlTm9kZSBmcm9tICcuLi91dGlscy9jcmVhdGVOb2RlJztcclxuaW1wb3J0IHsgbWFrZUZpcnNsTGV0dGVyVXBwZXJDYXNlIH0gZnJvbSAnLi4vdXRpbHMvZnVuY3Rpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBSZWdpc3RlckZvcm0gZXh0ZW5kcyBGb3JtIHtcclxuICBuYW1lOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBuYW1lV3JhcHBlcjogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIGVtYWlsOiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBwYXNzd29yZDogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgZW1haWxXcmFwcGVyOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgcGFzc1dyYXBwZXI6IEhUTUxFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihmb3JtTmFtZTogc3RyaW5nLCBidG5OYW1lOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKGZvcm1OYW1lLCBidG5OYW1lKTtcclxuICAgIHRoaXMubmFtZSA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdpbnB1dCcsIGNsYXNzZXM6IFsnbmFtZS1pbnB1dCddLCBhdHJpYnV0ZXNBZG5WYWx1ZXM6IFtbJ3R5cGUnLCAndGV4dCddLCBbJ3BsYWNlaG9sZGVyJywgJ9CS0LDRiNC1INC40LzRjyddLCBbJ2RhdGEtbmFtZScsICfQmNC80Y8nXSwgWydhdXRvY29tcGxldGUnLCAnb2ZmJ11dIH0pIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICB0aGlzLmVtYWlsID0gY3JlYXRlTm9kZSh7IHRhZzogJ2lucHV0JywgY2xhc3NlczogWydlbWFpbC1pbnB1dCddLCBhdHJpYnV0ZXNBZG5WYWx1ZXM6IFtbJ3R5cGUnLCAnZW1haWwnXSwgWydwbGFjZWhvbGRlcicsICfQktCw0YggZS1tYWlsJ10sIFsnZGF0YS1uYW1lJywgJ2UtbWFpbCddLCBbJ2F1dG9jb21wbGV0ZScsICdvZmYnXV0gfSkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIHRoaXMucGFzc3dvcmQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnaW5wdXQnLCBjbGFzc2VzOiBbJ3Bhc3N3b3JkLWlucHV0J10sIGF0cmlidXRlc0FkblZhbHVlczogW1sndHlwZScsICdwYXNzd29yZCddLCBbJ3BsYWNlaG9sZGVyJywgJ9Cf0YDQuNC00YPQvNCw0LnRgtC1INC/0LDRgNC+0LvRjCA+IDgg0YHQuNC80LLQvtC70L7QsiddLCBbJ2F1dG9jb21wbGV0ZScsICduZXctcGFzc3dvcmQnXSwgWydkYXRhLW5hbWUnLCAn0J/QsNGA0L7Qu9GMJ11dIH0pIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICB0aGlzLnN1Ym1pdEJ0biA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdidXR0b24nLCBjbGFzc2VzOiBbJ2J0bicsICdidG4tc3VibWl0J10sIGlubmVyOiAn0JfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNGC0YzRgdGPJyB9KSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHRoaXMuZW1haWxXcmFwcGVyID0gc3VwZXIuY3JlYXRlSW5wdXQodGhpcy5lbWFpbCk7XHJcbiAgICB0aGlzLnBhc3NXcmFwcGVyID0gc3VwZXIuY3JlYXRlSW5wdXQodGhpcy5wYXNzd29yZCk7XHJcbiAgICB0aGlzLm5hbWVXcmFwcGVyID0gc3VwZXIuY3JlYXRlSW5wdXQodGhpcy5uYW1lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW5kZXJGb3JtKCkge1xyXG4gICAgY29uc3QgZm9ybVdyYXBwZXIgPSBzdXBlci5yZW5kZXJGb3JtKCk7XHJcbiAgICB0aGlzLmZvcm0ucHJlcGVuZCh0aGlzLm5hbWVXcmFwcGVyLCB0aGlzLmVtYWlsV3JhcHBlciwgdGhpcy5wYXNzV3JhcHBlcik7XHJcbiAgICByZXR1cm4gZm9ybVdyYXBwZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbGlzdGVuRm9ybShjYWxsYmFjazpcclxuICAobmFtZTogc3RyaW5nLCBtYWlsOiBzdHJpbmcsIHBhc3M6IHN0cmluZywgZXJyb3JNZXNzYWdlOiBIVE1MRWxlbWVudCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5zdWJtaXRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogRXZlbnQpID0+IHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLmVycm9yTWVzc2FnZS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgY29uc3QgdmFsaWRhdGVkID0gdGhpcy52YWxpZGF0ZUZvcm0oKTtcclxuICAgICAgaWYgKHZhbGlkYXRlZCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXJOYW1lID0gbWFrZUZpcnNsTGV0dGVyVXBwZXJDYXNlKHRoaXMubmFtZS52YWx1ZSk7XHJcbiAgICAgICAgY2FsbGJhY2sodXNlck5hbWUsIHRoaXMuZW1haWwudmFsdWUsIHRoaXMucGFzc3dvcmQudmFsdWUsIHRoaXMuZXJyb3JNZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdmFsaWRhdGVGb3JtKCkge1xyXG4gICAgY29uc3QgdmFsaWRhdGVkID0gc3VwZXIudmFsaWRhdGVGb3JtKHRoaXMuZm9ybSk7XHJcbiAgICByZXR1cm4gdmFsaWRhdGVkO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9441\n")},2956:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Sprint = void 0;\r\nconst api_1 = __webpack_require__(1341);\r\nconst functions_1 = __webpack_require__(9593);\r\nconst constants_1 = __webpack_require__(5004);\r\nconst WordController_1 = __webpack_require__(3584);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst convertAggregatedWordToWord_1 = __webpack_require__(1682);\r\nconst enums_1 = __webpack_require__(8875);\r\nclass Sprint {\r\n    constructor(mode) {\r\n        this.mode = mode;\r\n        this.api = api_1.api;\r\n        this.wordController = new WordController_1.WordController();\r\n        this.storage = new Storage_1.Storage();\r\n        this.wordsInGame = [];\r\n        this.score = 0;\r\n        this.POINTS_FOR_WORD = 10;\r\n        this.multiplier = 1;\r\n        this.seriesOfCorrect = 0;\r\n        this.trueWords = [];\r\n        this.falseWords = [];\r\n        this.bookPage = 0;\r\n        this.bookLevel = 0;\r\n        this.trueAnswerSound = this.createAnswerSoud(true);\r\n        this.falseAnswerSound = this.createAnswerSoud(false);\r\n        this.mute = false;\r\n        this.keyListener = this.selectAnswerByKey.bind(this);\r\n        this.linksHandler = this.closeGameByLink.bind(this);\r\n    }\r\n    renderGame() {\r\n        const body = document.querySelector('.body');\r\n        const main = document.querySelector('.main');\r\n        const sprint = (0, functions_1.createHTMLElement)('section', ['sprint']);\r\n        body.classList.add('body--sprint');\r\n        main.innerHTML = '';\r\n        const btnClose = (0, functions_1.createHTMLElement)('a', ['sprint__close'], [['href', '/'], ['data-navigo', 'true']]);\r\n        if (this.mode === 'book') {\r\n            btnClose.href = '/book';\r\n            sprint.append(btnClose);\r\n            this.startGame();\r\n        }\r\n        else if (this.mode === 'menu') {\r\n            const select = this.renderSelectLevel();\r\n            sprint.append(select, btnClose);\r\n        }\r\n        main.append(sprint);\r\n        this.addLinksHandler();\r\n    }\r\n    renderSelectLevel() {\r\n        const select = (0, functions_1.createHTMLElement)('div', ['sprint__select']);\r\n        const selectTitle = (0, functions_1.createHTMLElement)('h2', ['sprint__select-title'], undefined, 'Спринт');\r\n        const selectDescription = (0, functions_1.createHTMLElement)('p', ['sprint__select-descr'], undefined, 'Учит быстро переводить на ваш родной язык');\r\n        const selectText = (0, functions_1.createHTMLElement)('p', ['sprint__select-text'], undefined, 'Выберите уровень:');\r\n        const levels = (0, functions_1.createHTMLElement)('div', ['sprint__levels']);\r\n        for (let i = 1; i <= 6; i += 1) {\r\n            const level = (0, functions_1.createHTMLElement)('div', ['sprint__level'], [['data-level', `${i - 1}`]], `${i}`);\r\n            level.addEventListener('click', (e) => {\r\n                const target = e.target;\r\n                const levelNumber = target.dataset.level;\r\n                this.currentLevel = levelNumber;\r\n                this.startGame();\r\n            });\r\n            levels.append(level);\r\n        }\r\n        select.append(selectTitle, selectDescription, selectText, levels);\r\n        return select;\r\n    }\r\n    async startGame() {\r\n        if (this.mode === 'menu') {\r\n            const select = document.querySelector('.sprint__select');\r\n            select.remove();\r\n            await this.getWordsInLevel(this.currentLevel);\r\n        }\r\n        else if (this.mode === 'book') {\r\n            if (this.bookLevel < 6) {\r\n                await this.getWordsOnPage(String(this.bookLevel), String(this.bookPage));\r\n            }\r\n            else {\r\n                this.wordsInGame = await this.getHardWords();\r\n            }\r\n        }\r\n        const sprint = document.querySelector('.sprint');\r\n        const ready = (0, functions_1.createHTMLElement)('div', ['sprint__ready']);\r\n        const timerTitle = (0, functions_1.createHTMLElement)('h2', ['timer__title'], undefined, 'Приготовьтесь');\r\n        sprint.append(ready);\r\n        this.renderTimer(ready, 'timer--ready');\r\n        ready.append(timerTitle);\r\n        const randomPair = this.getRandomPair();\r\n        this.startTimer('timer--ready', 3, this.renderGameContol.bind(this, randomPair.word, randomPair.wordTranslate));\r\n    }\r\n    renderTimer(container, className) {\r\n        const timer = (0, functions_1.createHTMLElement)('div', ['timer', className]);\r\n        timer.innerHTML = `\r\n    <span class=\"timer__time\"></span>\r\n    <svg class=\"timer__svg\" width=\"160\" height=\"160\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <circle id=\"circle\" class=\"circle_animation\" r=\"69.85699\" cy=\"81\" cx=\"81\" stroke-width=\"2\" stroke=\"rgb(40, 195, 138)\" fill=\"none\"/>\r\n    </svg>\r\n    `;\r\n        container.append(timer);\r\n    }\r\n    startTimer(className, time, cb) {\r\n        let i = 0;\r\n        const finalOffset = 440;\r\n        const step = finalOffset / time;\r\n        const timer = document.querySelector(`.${className}`);\r\n        const timeCaption = timer.querySelector('.timer__time');\r\n        const circle = document.querySelector('.circle_animation');\r\n        const circleStyle = circle.style;\r\n        circleStyle.strokeDashoffset = String(0);\r\n        timeCaption.innerText = String(time);\r\n        this.timerSound = this.createFinishSound();\r\n        this.timerInterval = setInterval(() => {\r\n            timeCaption.innerText = String(time - i);\r\n            if (time - i <= 10) {\r\n                this.timerSound?.play();\r\n            }\r\n            if (i === time) {\r\n                clearInterval(this.timerInterval);\r\n                this.timerSound?.pause();\r\n                cb();\r\n            }\r\n            else {\r\n                i += 1;\r\n                circleStyle.strokeDashoffset = String(step * i);\r\n            }\r\n        }, 1000);\r\n    }\r\n    renderGameContol(firstWordEn, firstWordRu) {\r\n        const sprint = document.querySelector('.sprint');\r\n        const ready = document.querySelector('.sprint__ready');\r\n        ready.remove();\r\n        this.renderTimer(sprint, 'timer--control');\r\n        this.startTimer('timer--control', 10, this.renderResult.bind(this));\r\n        const sprintControl = (0, functions_1.createHTMLElement)('div', ['sprint__control']);\r\n        const score = (0, functions_1.createHTMLElement)('h2', ['control__score'], undefined, '0');\r\n        const sound = (0, functions_1.createHTMLElement)('div', ['control__sound']);\r\n        sound.addEventListener('click', (e) => this.toggleMute(e));\r\n        const controlContainer = (0, functions_1.createHTMLElement)('div', ['control__container']);\r\n        const voice = (0, functions_1.createHTMLElement)('div', ['control__voice']);\r\n        voice.addEventListener('click', this.voiceWord.bind(this));\r\n        const controlSeriesList = (0, functions_1.createHTMLElement)('div', ['control__series-list']);\r\n        for (let i = 1; i <= 3; i += 1) {\r\n            const controlSeries = (0, functions_1.createHTMLElement)('div', ['control__series'], [['data-series', `${i}`]]);\r\n            controlSeriesList.append(controlSeries);\r\n        }\r\n        const multiply = (0, functions_1.createHTMLElement)('span', ['control__multiply'], undefined, '+10 очков за слово');\r\n        const parrots = (0, functions_1.createHTMLElement)('div', ['control__parrots']);\r\n        const blueParrot = (0, functions_1.createHTMLElement)('img', ['control__parrot'], [['src', './assets/sprint/bird-blue.svg'], ['alt', 'blue parrot']]);\r\n        const wordEn = (0, functions_1.createHTMLElement)('span', ['control__word-en'], undefined, firstWordEn);\r\n        const wordRu = (0, functions_1.createHTMLElement)('span', ['control__word-ru'], undefined, firstWordRu);\r\n        const buttons = (0, functions_1.createHTMLElement)('div', ['control__buttons']);\r\n        const buttonFalse = (0, functions_1.createHTMLElement)('button', ['control__button', 'control__button--false'], [['data-answer', 'false']], 'Неверно');\r\n        const buttonTrue = (0, functions_1.createHTMLElement)('button', ['control__button', 'control__button--true'], [['data-answer', 'true']], 'Верно');\r\n        buttons.append(buttonFalse, buttonTrue);\r\n        parrots.append(blueParrot);\r\n        controlContainer.append(controlSeriesList, multiply, voice, parrots, wordEn, wordRu, buttons);\r\n        sprintControl.append(score, sound, controlContainer);\r\n        sprint.append(sprintControl);\r\n        buttonFalse.addEventListener('click', (e) => this.selectAnswer(e));\r\n        buttonTrue.addEventListener('click', (e) => this.selectAnswer(e));\r\n        this.addKeyboardControl();\r\n    }\r\n    async getWordsInLevel(level) {\r\n        this.wordsInGame.length = 0;\r\n        const pages = [];\r\n        for (let i = 0; i <= 29; i += 1) {\r\n            const wordsOnPage = api_1.api.getWords({ group: level, page: String(i) });\r\n            pages.push(wordsOnPage);\r\n        }\r\n        await Promise.all(pages)\r\n            .then((data) => data.forEach(((page) => this.wordsInGame.push(...page))));\r\n    }\r\n    async getFilteredWords(level, page) {\r\n        const userData = this.storage.getUserIdData();\r\n        const userWordsAggr = await this.api.getAggregatedUserWords(userData, { group: level, page, wordsPerPage: '20' });\r\n        const userFilteredWords = userWordsAggr.filter((word) => !word?.userWord?.optional?.learned);\r\n        const userWords = userFilteredWords.map((word) => (0, convertAggregatedWordToWord_1.convertAggregatedWordToWord)(word));\r\n        return userWords;\r\n    }\r\n    async getWordsOnPage(level, page) {\r\n        const wordsOnPage = await api_1.api.getWords({ group: level, page });\r\n        if (!this.wordController.isAuthorized) {\r\n            this.wordsInGame = wordsOnPage;\r\n        }\r\n        else {\r\n            this.wordsInGame = await this.getFilteredWords(level, page);\r\n        }\r\n    }\r\n    getRandomWord() {\r\n        const maxIndex = this.wordsInGame.length - 1;\r\n        const randomWordIndex = (0, functions_1.getRandomIntInclusive)(0, maxIndex);\r\n        const randomWord = this.wordsInGame[randomWordIndex];\r\n        return randomWord;\r\n    }\r\n    getRandomPair() {\r\n        this.currentWord = this.getRandomWord();\r\n        const currentId = this.wordsInGame.indexOf(this.currentWord);\r\n        this.wordsInGame.splice(currentId, 1);\r\n        const randomPair = { word: this.currentWord.word, wordTranslate: '' };\r\n        const isTrue = Math.random() < 0.5;\r\n        if (this.wordsInGame.length > 0) {\r\n            if (isTrue) {\r\n                this.isPairTrue = true;\r\n                randomPair.wordTranslate = this.currentWord.wordTranslate;\r\n            }\r\n            else {\r\n                this.isPairTrue = false;\r\n                randomPair.wordTranslate = this.getRandomWord().wordTranslate;\r\n            }\r\n        }\r\n        else if (this.wordsInGame.length === 0) {\r\n            this.isPairTrue = true;\r\n            randomPair.wordTranslate = this.currentWord.wordTranslate;\r\n        }\r\n        return randomPair;\r\n    }\r\n    async addWordsInGame() {\r\n        const prevWords = [];\r\n        if (!this.wordController.isAuthorized) {\r\n            for (let i = this.bookPage; i > 0; i -= 1) {\r\n                prevWords.push(this.api.getWords({ group: String(this.bookLevel), page: String(i - 1) }));\r\n            }\r\n            await Promise.all(prevWords)\r\n                .then((data) => data.forEach(((words) => { this.wordsInGame.push(...words); })));\r\n            if (this.wordsInGame.length === 0) {\r\n                this.finishGame();\r\n            }\r\n        }\r\n        else if (this.wordController.isAuthorized) {\r\n            for (let i = this.bookPage; i > 0; i -= 1) {\r\n                prevWords.push(this.getFilteredWords(String(this.bookLevel), String(i - 1)));\r\n            }\r\n            await Promise.all(prevWords)\r\n                .then((data) => data.forEach(((words) => { this.wordsInGame.push(...words); })));\r\n            if (this.wordsInGame.length === 0) {\r\n                this.finishGame();\r\n            }\r\n        }\r\n        this.bookPage = 0;\r\n    }\r\n    async selectAnswer(e) {\r\n        const button = e.target;\r\n        const { answer } = button.dataset;\r\n        let isTrue;\r\n        if (answer === 'true') {\r\n            isTrue = true;\r\n        }\r\n        else {\r\n            isTrue = false;\r\n        }\r\n        if (isTrue === this.isPairTrue) {\r\n            this.completeTrueAnswer();\r\n        }\r\n        else {\r\n            this.completeFalseAnswer();\r\n        }\r\n        if (this.wordsInGame.length === 0 && this.mode === 'book' && this.bookLevel < 6) {\r\n            await this.addWordsInGame();\r\n        }\r\n        if (this.wordsInGame.length === 0 && this.mode === 'book' && this.bookLevel === 6) {\r\n            this.finishGame();\r\n        }\r\n        this.updateWord();\r\n    }\r\n    completeTrueAnswer() {\r\n        this.trueWords.push(this.currentWord);\r\n        this.updateScore();\r\n        this.trueAnswerSound.load();\r\n        this.trueAnswerSound.play();\r\n        this.seriesOfCorrect += 1;\r\n        this.checkSeriesOfCorrect();\r\n        this.changeStyleSeries(this.seriesOfCorrect);\r\n        this.wordController.sendWordOnServer(this.currentWord?.id, true, enums_1.GAME.SPRINT);\r\n    }\r\n    completeFalseAnswer() {\r\n        this.falseWords.push(this.currentWord);\r\n        this.falseAnswerSound.load();\r\n        this.falseAnswerSound.play();\r\n        this.seriesOfCorrect = 0;\r\n        this.multiplier = 1;\r\n        this.changeMultiplyDescr(1);\r\n        this.clearStyleSeries();\r\n        this.clearParrots();\r\n        this.wordController.sendWordOnServer(this.currentWord?.id, false, enums_1.GAME.SPRINT);\r\n    }\r\n    updateWord() {\r\n        const word = document.querySelector('.control__word-en');\r\n        const translate = document.querySelector('.control__word-ru');\r\n        if (this.wordsInGame.length !== 0) {\r\n            const randomPair = this.getRandomPair();\r\n            word.innerHTML = randomPair.word;\r\n            translate.innerHTML = randomPair.wordTranslate;\r\n        }\r\n    }\r\n    updateScore() {\r\n        const score = document.querySelector('.control__score');\r\n        this.score += this.POINTS_FOR_WORD * this.multiplier;\r\n        score.innerHTML = String(this.score);\r\n    }\r\n    checkSeriesOfCorrect() {\r\n        if (this.seriesOfCorrect === 4) {\r\n            this.changeMultiplyDescr(2);\r\n            this.clearStyleSeries();\r\n            this.addParrot();\r\n        }\r\n        else if (this.seriesOfCorrect === 5) {\r\n            this.multiplier *= 2;\r\n            this.seriesOfCorrect = 1;\r\n        }\r\n    }\r\n    changeMultiplyDescr(multiply) {\r\n        const multiplyDescr = document.querySelector('.control__multiply');\r\n        multiplyDescr.innerHTML = `+${this.POINTS_FOR_WORD * this.multiplier * multiply} очков за слово`;\r\n    }\r\n    changeStyleSeries(item) {\r\n        if (item > 0 && item < 4) {\r\n            const series = document.querySelector(`[data-series=\"${item}\"]`);\r\n            series.classList.add('control__series--active');\r\n        }\r\n    }\r\n    clearStyleSeries() {\r\n        const seriesAll = document.querySelectorAll('.control__series');\r\n        seriesAll.forEach((series) => series.classList.remove('control__series--active'));\r\n    }\r\n    addParrot() {\r\n        const parrotsContainer = document.querySelector('.control__parrots');\r\n        if (this.multiplier === 1) {\r\n            const redParrot = (0, functions_1.createHTMLElement)('img', ['control__parrot'], [['src', './assets/sprint/bird-red.svg'], ['alt', 'red parrot']]);\r\n            parrotsContainer.append(redParrot);\r\n        }\r\n        else if (this.multiplier === 2) {\r\n            const purpleParrot = (0, functions_1.createHTMLElement)('img', ['control__parrot'], [['src', './assets/sprint/bird-purple.svg'], ['alt', 'purple parrot']]);\r\n            parrotsContainer.append(purpleParrot);\r\n        }\r\n        else if (this.multiplier === 4) {\r\n            const yellowParrot = (0, functions_1.createHTMLElement)('img', ['control__parrot'], [['src', './assets/sprint/bird-yellow.svg'], ['alt', 'yellow parrot']]);\r\n            parrotsContainer.append(yellowParrot);\r\n        }\r\n    }\r\n    clearParrots() {\r\n        const parrots = document.querySelectorAll('.control__parrot');\r\n        const count = parrots.length;\r\n        for (let i = 1; i < count; i += 1) {\r\n            parrots[i].remove();\r\n        }\r\n    }\r\n    voiceWord() {\r\n        const url = `${constants_1.BASE_LINK}/${this.currentWord?.audio}`;\r\n        const audio = new Audio(url);\r\n        audio.play();\r\n    }\r\n    createAnswerSoud(value) {\r\n        const url = `./assets/sprint/sounds/${String(value)}.mp3`;\r\n        return new Audio(url);\r\n    }\r\n    createFinishSound() {\r\n        const url = './assets/sprint/sounds/finish_tick.mp3';\r\n        const audio = new Audio(url);\r\n        return audio;\r\n    }\r\n    renderResult() {\r\n        const sprint = document.querySelector('.sprint');\r\n        const control = document.querySelector('.sprint__control');\r\n        const timer = document.querySelector('.timer--control');\r\n        control.style.display = 'none';\r\n        timer.remove();\r\n        const resultContainer = (0, functions_1.createHTMLElement)('div', ['sprint__result']);\r\n        const score = (0, functions_1.createHTMLElement)('h2', ['result__score'], undefined, `Твой результат: ${this.score} очков`);\r\n        const listsContainer = (0, functions_1.createHTMLElement)('div', ['sprint__lists']);\r\n        const trueList = (0, functions_1.createHTMLElement)('ul', ['result__true'], undefined, `Знаю: ${this.trueWords.length}`);\r\n        const falseList = (0, functions_1.createHTMLElement)('ul', ['result__false'], undefined, `Ошибок: ${this.falseWords.length}`);\r\n        const btnRestart = (0, functions_1.createHTMLElement)('button', ['result__restart-btn'], undefined, 'Играть еще раз');\r\n        btnRestart.addEventListener('click', (e) => {\r\n            const btn = e.target;\r\n            if (!btn.disabled) {\r\n                this.restartGame();\r\n                btn.disabled = true;\r\n            }\r\n        });\r\n        this.trueWords.forEach((word) => this.addWordInResult(trueList, word));\r\n        this.falseWords.forEach((word) => this.addWordInResult(falseList, word));\r\n        listsContainer.append(falseList, trueList);\r\n        resultContainer.append(score, listsContainer, btnRestart);\r\n        sprint.append(resultContainer);\r\n    }\r\n    addWordInResult(list, word) {\r\n        const wordEn = (0, functions_1.createHTMLElement)('span', ['result__word-en'], undefined, `${word.word}: `);\r\n        const wordRu = (0, functions_1.createHTMLElement)('span', ['result__word-ru'], undefined, `${word.wordTranslate}`);\r\n        const wordEnRu = (0, functions_1.createHTMLElement)('li', ['result__word']);\r\n        const voice = (0, functions_1.createHTMLElement)('div', ['result__voice']);\r\n        voice.addEventListener('click', () => this.voiceWordInResult(word.audio));\r\n        wordEnRu.append(voice, wordEn, wordRu);\r\n        list.append(wordEnRu);\r\n    }\r\n    voiceWordInResult(url) {\r\n        const audio = new Audio(`${constants_1.BASE_LINK}/${url}`);\r\n        audio.play();\r\n    }\r\n    toggleMute(e) {\r\n        const btn = e.target;\r\n        btn.classList.toggle('control__sound--off');\r\n        if (this.mute === false) {\r\n            this.mute = true;\r\n            this.trueAnswerSound.volume = 0;\r\n            this.falseAnswerSound.volume = 0;\r\n        }\r\n        else if (this.mute === true) {\r\n            this.mute = false;\r\n            this.trueAnswerSound.volume = 1;\r\n            this.falseAnswerSound.volume = 1;\r\n        }\r\n    }\r\n    finishGame() {\r\n        clearInterval(this.timerInterval);\r\n        this.timerSound?.pause();\r\n        this.renderResult();\r\n        this.removeKeyboardControl();\r\n    }\r\n    setBookPageAndLevel(level, page) {\r\n        this.bookPage = page;\r\n        this.bookLevel = level;\r\n    }\r\n    async selectAnswerByCorrect(correct) {\r\n        if (correct === this.isPairTrue) {\r\n            this.completeTrueAnswer();\r\n        }\r\n        else {\r\n            this.completeFalseAnswer();\r\n        }\r\n        if (this.wordsInGame.length === 0 && this.mode === 'book' && this.bookLevel < 6) {\r\n            await this.addWordsInGame();\r\n        }\r\n        this.updateWord();\r\n    }\r\n    selectAnswerByKey(e) {\r\n        let isTrue = false;\r\n        if (e.key === 'ArrowRight') {\r\n            isTrue = true;\r\n            this.selectAnswerByCorrect(isTrue);\r\n        }\r\n        else if (e.key === 'ArrowLeft') {\r\n            isTrue = false;\r\n            this.selectAnswerByCorrect(isTrue);\r\n        }\r\n    }\r\n    addKeyboardControl() {\r\n        document.addEventListener('keydown', this.keyListener);\r\n    }\r\n    removeKeyboardControl() {\r\n        document.removeEventListener('keydown', this.keyListener);\r\n    }\r\n    closeGame() {\r\n        const body = document.querySelector('.body');\r\n        body?.classList.remove('body--sprint');\r\n        clearInterval(this.timerInterval);\r\n        this.timerSound?.pause();\r\n        this.removeKeyboardControl();\r\n    }\r\n    async getHardWords() {\r\n        const userHardWords = await this.wordController.getUserBookWords();\r\n        if (Array.isArray(userHardWords)) {\r\n            return userHardWords.map((word) => (0, convertAggregatedWordToWord_1.convertAggregatedWordToWord)(word));\r\n        }\r\n        return [];\r\n    }\r\n    async checkWordsAvailability() {\r\n        let words;\r\n        if (this.bookLevel < 6) {\r\n            words = await api_1.api.getWords({ group: String(this.bookLevel), page: String(this.bookPage) });\r\n        }\r\n        else {\r\n            words = await this.getHardWords();\r\n        }\r\n        if (words.length === 0 || !Array.isArray(words)) {\r\n            const result = document.querySelector('.sprint__result');\r\n            const message = (0, functions_1.createHTMLElement)('span', ['sprint__restart-message'], undefined, 'Недостаточно слов для запуска новой игры. Выберите другой уровень или страницу');\r\n            result.append(message);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    async restartGame() {\r\n        const isAvailable = await this.checkWordsAvailability();\r\n        if (isAvailable) {\r\n            this.closeGame();\r\n            this.wordsInGame.length = 0;\r\n            this.score = 0;\r\n            this.multiplier = 1;\r\n            this.seriesOfCorrect = 0;\r\n            this.trueWords.length = 0;\r\n            this.falseWords.length = 0;\r\n            this.renderGame();\r\n        }\r\n    }\r\n    closeGameByLink(e) {\r\n        const target = e.target;\r\n        if (target.href !== `${constants_1.BASE_LINK}/sprint`) {\r\n            this.removeLinksListeners();\r\n            this.closeGame();\r\n        }\r\n    }\r\n    removeLinksListeners() {\r\n        const links = document.querySelectorAll('a');\r\n        links.forEach((link) => link.removeEventListener('click', this.linksHandler));\r\n    }\r\n    addLinksHandler() {\r\n        const href = `${document.location.protocol}//${document.location.host}`;\r\n        const links = document.querySelectorAll('a');\r\n        links.forEach((link) => {\r\n            if (link.href !== `${href}/sprint`) {\r\n                link.addEventListener('click', this.linksHandler);\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.Sprint = Sprint;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2956\n")},8305:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.TextBook = void 0;\r\nconst Word_1 = __webpack_require__(6610);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst api_1 = __webpack_require__(1341);\r\nconst constants_1 = __webpack_require__(5004);\r\nconst checkEmptyUserBook_1 = __webpack_require__(6285);\r\nconst checkPageAllDone_1 = __webpack_require__(9103);\r\nclass TextBook {\r\n    constructor(numberOfLevels) {\r\n        this.api = new api_1.Api();\r\n        this.currentPage = 0;\r\n        this.currentLevel = 0;\r\n        this.textBook = (0, createNode_1.default)({ tag: 'section', classes: ['textbook'] });\r\n        this.cardsWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['cards-wrapper'] });\r\n        this.level1Btns = this.createLevelButtons(numberOfLevels);\r\n        this.page = (0, createNode_1.default)({ tag: 'div', classes: ['text-book-page'] });\r\n        this.audioCallBtn = (0, createNode_1.default)({\r\n            tag: 'a', classes: ['btn'], inner: 'Аудиовызов', atributesAdnValues: [['id', 'audiocall-btn'], ['href', '/book/audiocall'], ['data-navigo', 'true']],\r\n        });\r\n        this.sprintBtn = (0, createNode_1.default)({\r\n            tag: 'a', classes: ['btn'], inner: 'Спринт', atributesAdnValues: [['id', 'sprint-btn'], ['href', '/book/sprint'], ['data-navigo', 'true']],\r\n        });\r\n        this.prevPageBtn = (0, createNode_1.default)({ tag: 'button', classes: ['btn'], inner: 'Предыдущая' });\r\n        this.nextPageBtn = (0, createNode_1.default)({ tag: 'button', classes: ['btn'], inner: 'Следующая' });\r\n        this.pageInput = (0, createNode_1.default)({ tag: 'input', classes: ['page-input'], atributesAdnValues: [['type', 'number']] });\r\n        this.pageInput.value = String(this.currentPage + 1);\r\n        this.words = [];\r\n        this.linksHandler = this.stopSoundByLink.bind(this);\r\n    }\r\n    // Update textBook and cards separately\r\n    updateTextbook(data, flag, group, page) {\r\n        this.textBook.innerHTML = '';\r\n        this.cardsWrapper.style.border = 'none';\r\n        this.pageInput.style.backgroundColor = 'transparent';\r\n        this.level1Btns.map((btn) => btn.classList.remove('btn-active'));\r\n        this.level1Btns[group].classList.add('btn-active');\r\n        this.currentLevel = group;\r\n        this.renderTextBook(data);\r\n        this.currentPage = page ? this.currentPage = page : this.currentPage = 0;\r\n        this.pageInput.value = String(page + 1);\r\n        this.handlePageButtons();\r\n        if (flag === true) {\r\n            this.level1Btns[6].style.display = 'flex';\r\n            const learnBtns = document.querySelectorAll('.btn-learn');\r\n            const hardBtns = document.querySelectorAll('.btn-add');\r\n            // eslint-disable-next-line no-param-reassign, no-return-assign\r\n            learnBtns.forEach((btn) => btn.style.display = 'flex');\r\n            // eslint-disable-next-line no-param-reassign, no-return-assign\r\n            hardBtns.forEach((btn) => btn.style.display = 'flex');\r\n            // this.handlePageAllDone(data);\r\n            (0, checkPageAllDone_1.checkPageAllDone)();\r\n            (0, checkEmptyUserBook_1.checkEmptyUserBook)();\r\n        }\r\n        this.words.forEach((word) => word.wordAudio?.pause());\r\n    }\r\n    updateCards(data) {\r\n        this.cardsWrapper.innerHTML = '';\r\n        this.renderCards(data);\r\n    }\r\n    // Listen level buttons and pagination\r\n    listenLevels(handler) {\r\n        this.level1Btns.forEach((button) => {\r\n            button.addEventListener('click', (e) => {\r\n                this.level1Btns.map((btn) => btn.classList.remove('btn-active'));\r\n                button.classList.add('btn-active');\r\n                this.currentPage = 0;\r\n                this.pageInput.value = String(this.currentPage + 1);\r\n                const target = Number(e.target.innerHTML);\r\n                const level = target - 1;\r\n                this.currentLevel = level;\r\n                this.handlePageButtons();\r\n                handler(String(level), '0');\r\n            });\r\n        });\r\n    }\r\n    listenPagination(handler) {\r\n        this.prevPageBtn.addEventListener('click', () => {\r\n            const level = this.handleLevelButtons();\r\n            this.currentPage -= 1;\r\n            this.pageInput.value = String(this.currentPage + 1);\r\n            this.handleInput(this.pageInput);\r\n            this.handlePageButtons();\r\n            handler(String(level), String(this.currentPage));\r\n        });\r\n        this.nextPageBtn.addEventListener('click', () => {\r\n            const level = this.handleLevelButtons();\r\n            this.currentPage += 1;\r\n            this.pageInput.value = String(this.currentPage + 1);\r\n            this.handleInput(this.pageInput);\r\n            this.handlePageButtons();\r\n            handler(String(level), String(this.currentPage));\r\n        });\r\n        this.pageInput.addEventListener('change', (e) => {\r\n            const level = this.handleLevelButtons();\r\n            const newPageNumber = Number(e.target.value);\r\n            this.currentPage = newPageNumber - 1;\r\n            this.handleInput(this.pageInput);\r\n            this.handlePageButtons();\r\n            handler(String(level), String(this.currentPage));\r\n        });\r\n    }\r\n    // Handle changes when switching pages (buttons and input) and levels\r\n    handlePageButtons() {\r\n        if (this.currentPage > 0) {\r\n            this.prevPageBtn.disabled = false;\r\n        }\r\n        else if (this.currentPage <= 0) {\r\n            this.prevPageBtn.disabled = true;\r\n        }\r\n        else {\r\n            this.prevPageBtn.disabled = false;\r\n        }\r\n        if (this.currentPage === 29) {\r\n            this.nextPageBtn.disabled = true;\r\n        }\r\n        else {\r\n            this.nextPageBtn.disabled = false;\r\n        }\r\n    }\r\n    handleLevelButtons() {\r\n        const levelBtn = this.level1Btns.filter((btn) => btn.classList.contains('btn-active'));\r\n        const level = levelBtn.length === 0 ? '0' : Number(levelBtn[0].innerHTML) - 1;\r\n        this.currentLevel = Number(level);\r\n        console.log(levelBtn[0].style.backgroundColor);\r\n        return level;\r\n    }\r\n    handleInput(input) {\r\n        const currInput = input;\r\n        if (Number(input.value) > constants_1.MAX_PAGE_NUMBER) {\r\n            currInput.value = '30';\r\n            this.currentPage = 29;\r\n        }\r\n        else if (Number(input.value) <= 0) {\r\n            currInput.value = '1';\r\n            this.currentPage = 0;\r\n        }\r\n        else {\r\n            currInput.value = String(this.currentPage + 1);\r\n        }\r\n        return currInput;\r\n    }\r\n    // Render TextBook and components\r\n    renderTextBook(data) {\r\n        const container = document.querySelector('.main');\r\n        container.innerHTML = '';\r\n        this.page.innerHTML = '';\r\n        const pageHead = this.renderTBHeader();\r\n        const sidebar = this.rendeSidebar();\r\n        this.renderCards(data);\r\n        this.page.append(pageHead, this.cardsWrapper);\r\n        this.handleLevelButtons();\r\n        if (this.currentLevel !== 6) {\r\n            const paginationWrapper = this.renderPagination();\r\n            paginationWrapper.append(this.prevPageBtn, this.pageInput, this.nextPageBtn);\r\n            this.page.append(paginationWrapper);\r\n        }\r\n        this.textBook.append(sidebar, this.page);\r\n        container.append(this.textBook);\r\n        this.changPageBG();\r\n        return container;\r\n    }\r\n    renderTBHeader() {\r\n        const pageHead = (0, createNode_1.default)({ tag: 'div', classes: ['text-book-page-head'] });\r\n        const pageHeadText = (0, createNode_1.default)({ tag: 'p', classes: ['page-head-wrapper'], inner: 'Играть с текущим набором слов:' });\r\n        pageHead.append(pageHeadText, this.audioCallBtn, this.sprintBtn);\r\n        return pageHead;\r\n    }\r\n    renderCards(cardsData) {\r\n        this.cardsWrapper.innerHTML = '';\r\n        if (typeof cardsData === 'string') {\r\n            this.cardsWrapper.innerHTML = cardsData;\r\n            this.audioCallBtn.classList.add('btn__disabled');\r\n            this.sprintBtn.classList.add('btn__disabled');\r\n        }\r\n        else {\r\n            cardsData.forEach((card) => {\r\n                const cardItem = new Word_1.WordUI(card, this.words);\r\n                this.cardsWrapper.append(cardItem.drawCard());\r\n                this.words.push(cardItem);\r\n            });\r\n        }\r\n        return this.cardsWrapper;\r\n    }\r\n    rendeSidebar() {\r\n        const sideBar = (0, createNode_1.default)({ tag: 'aside', classes: ['aside'] });\r\n        const sideBarContent = (0, createNode_1.default)({ tag: 'div', classes: ['sidebar-content'] });\r\n        const sidebarText = (0, createNode_1.default)({ tag: 'p', classes: ['sidebar-text'], inner: 'Уровни' });\r\n        sideBarContent.append(sidebarText);\r\n        this.level1Btns.forEach((btn) => sideBarContent.append(btn));\r\n        sideBar.append(sideBarContent);\r\n        this.level1Btns[6].classList.add('user-words-btn');\r\n        this.level1Btns[6].style.display = 'none';\r\n        return sideBar;\r\n    }\r\n    createLevelButtons(levelsNumber) {\r\n        const arr = [];\r\n        let i = 1;\r\n        while (levelsNumber) {\r\n            const btn = (0, createNode_1.default)({ tag: 'button', classes: ['btn-level'], inner: `${i}` });\r\n            btn.classList.add(`btn-level-${i}`);\r\n            arr.push(btn);\r\n            i += 1;\r\n            // eslint-disable-next-line no-param-reassign\r\n            levelsNumber -= 1;\r\n        }\r\n        return arr;\r\n    }\r\n    renderPagination() {\r\n        const paginationWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['pagination'] });\r\n        this.prevPageBtn.disabled = true;\r\n        this.nextPageBtn.disabled = false;\r\n        paginationWrapper.append(this.prevPageBtn, this.pageInput, this.nextPageBtn);\r\n        return paginationWrapper;\r\n    }\r\n    stopSoundByLink() {\r\n        this.removeLinksListeners();\r\n        this.words.forEach((word) => word.wordAudio?.pause());\r\n    }\r\n    removeLinksListeners() {\r\n        const links = document.querySelectorAll('a');\r\n        links.forEach((link) => link.removeEventListener('click', this.linksHandler));\r\n    }\r\n    addLinksHandler() {\r\n        const href = `${document.location.protocol}//${document.location.host}`;\r\n        const links = document.querySelectorAll('a');\r\n        links.forEach((link) => {\r\n            if (link.href !== `${href}/book`) {\r\n                link.addEventListener('click', this.linksHandler);\r\n            }\r\n        });\r\n    }\r\n    changPageBG() {\r\n        const btnActive = this.level1Btns.filter((btn) => btn.classList.contains('btn-active'))[0];\r\n        const btnColor = window.getComputedStyle(btnActive, null).getPropertyValue('background-color');\r\n        this.page.style.backgroundColor = btnColor;\r\n    }\r\n}\r\nexports.TextBook = TextBook;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVNLGVBQWU7UUFDcEIsTUFBTSxJQUFJLEdBQUcsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hFLE1BQU0sS0FBSyxHQUFrQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JCLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLElBQUksT0FBTyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuRDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFdBQVc7UUFDakIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQy9GLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBL1FELDRCQStRQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy90ZXh0Qm9vay9UZXh0Qm9vay50cz84YTM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdvcmRVSSB9IGZyb20gJy4vV29yZCc7XHJcbmltcG9ydCBjcmVhdGVOb2RlIGZyb20gJy4uL3V0aWxzL2NyZWF0ZU5vZGUnO1xyXG5pbXBvcnQgeyBVc2VyQWdncmVnYXRlZFdvcmQsIFdvcmQgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgQXBpIH0gZnJvbSAnLi4vTW9kZWwvYXBpJztcclxuaW1wb3J0IHsgTUFYX1BBR0VfTlVNQkVSIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgY2hlY2tFbXB0eVVzZXJCb29rIH0gZnJvbSAnLi4vdXRpbHMvY2hlY2tFbXB0eVVzZXJCb29rJztcclxuaW1wb3J0IHsgY2hlY2tQYWdlQWxsRG9uZSB9IGZyb20gJy4uL3V0aWxzL2NoZWNrUGFnZUFsbERvbmUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRleHRCb29rIHtcclxuICB0ZXh0Qm9vazogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gIGNhcmRzV3JhcHBlcjogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG4gIGxldmVsMUJ0bnM6IEhUTUxCdXR0b25FbGVtZW50W107XHJcblxyXG4gIGF1ZGlvQ2FsbEJ0bjogSFRNTEFuY2hvckVsZW1lbnQ7XHJcblxyXG4gIHNwcmludEJ0bjogSFRNTEFuY2hvckVsZW1lbnQ7XHJcblxyXG4gIGFwaTogQXBpID0gbmV3IEFwaSgpO1xyXG5cclxuICBjdXJyZW50UGFnZTogbnVtYmVyID0gMDtcclxuXHJcbiAgY3VycmVudExldmVsOiBudW1iZXIgPSAwO1xyXG5cclxuICBwcmV2UGFnZUJ0bjogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcblxyXG4gIG5leHRQYWdlQnRuOiBIVE1MQnV0dG9uRWxlbWVudDtcclxuXHJcbiAgcGFnZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICB3b3JkczogV29yZFVJW107XHJcblxyXG4gIHBhZ2U6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICBsaW5rc0hhbmRsZXI6IChlOiBFdmVudCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IobnVtYmVyT2ZMZXZlbHM6IG51bWJlcikge1xyXG4gICAgdGhpcy50ZXh0Qm9vayA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdzZWN0aW9uJywgY2xhc3NlczogWyd0ZXh0Ym9vayddIH0pIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgdGhpcy5jYXJkc1dyYXBwZXIgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydjYXJkcy13cmFwcGVyJ10gfSkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICB0aGlzLmxldmVsMUJ0bnMgPSB0aGlzLmNyZWF0ZUxldmVsQnV0dG9ucyhudW1iZXJPZkxldmVscyk7XHJcbiAgICB0aGlzLnBhZ2UgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWyd0ZXh0LWJvb2stcGFnZSddIH0pIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgdGhpcy5hdWRpb0NhbGxCdG4gPSBjcmVhdGVOb2RlKHtcclxuICAgICAgdGFnOiAnYScsIGNsYXNzZXM6IFsnYnRuJ10sIGlubmVyOiAn0JDRg9C00LjQvtCy0YvQt9C+0LInLCBhdHJpYnV0ZXNBZG5WYWx1ZXM6IFtbJ2lkJywgJ2F1ZGlvY2FsbC1idG4nXSwgWydocmVmJywgJy9ib29rL2F1ZGlvY2FsbCddLCBbJ2RhdGEtbmF2aWdvJywgJ3RydWUnXV0sXHJcbiAgICB9KSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcclxuICAgIHRoaXMuc3ByaW50QnRuID0gY3JlYXRlTm9kZSh7XHJcbiAgICAgIHRhZzogJ2EnLCBjbGFzc2VzOiBbJ2J0biddLCBpbm5lcjogJ9Ch0L/RgNC40L3RgicsIGF0cmlidXRlc0FkblZhbHVlczogW1snaWQnLCAnc3ByaW50LWJ0biddLCBbJ2hyZWYnLCAnL2Jvb2svc3ByaW50J10sIFsnZGF0YS1uYXZpZ28nLCAndHJ1ZSddXSxcclxuICAgIH0pIGFzIEhUTUxBbmNob3JFbGVtZW50O1xyXG4gICAgdGhpcy5wcmV2UGFnZUJ0biA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdidXR0b24nLCBjbGFzc2VzOiBbJ2J0biddLCBpbm5lcjogJ9Cf0YDQtdC00YvQtNGD0YnQsNGPJyB9KSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgIHRoaXMubmV4dFBhZ2VCdG4gPSBjcmVhdGVOb2RlKHsgdGFnOiAnYnV0dG9uJywgY2xhc3NlczogWydidG4nXSwgaW5uZXI6ICfQodC70LXQtNGD0Y7RidCw0Y8nIH0pIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgdGhpcy5wYWdlSW5wdXQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnaW5wdXQnLCBjbGFzc2VzOiBbJ3BhZ2UtaW5wdXQnXSwgYXRyaWJ1dGVzQWRuVmFsdWVzOiBbWyd0eXBlJywgJ251bWJlciddXSB9KSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgdGhpcy5wYWdlSW5wdXQudmFsdWUgPSBTdHJpbmcodGhpcy5jdXJyZW50UGFnZSArIDEpO1xyXG4gICAgdGhpcy53b3JkcyA9IFtdO1xyXG4gICAgdGhpcy5saW5rc0hhbmRsZXIgPSB0aGlzLnN0b3BTb3VuZEJ5TGluay5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLy8gVXBkYXRlIHRleHRCb29rIGFuZCBjYXJkcyBzZXBhcmF0ZWx5XHJcbiAgcHVibGljIHVwZGF0ZVRleHRib29rKFxyXG4gICAgZGF0YTogc3RyaW5nIHwgV29yZFtdIHwgVXNlckFnZ3JlZ2F0ZWRXb3JkW10sXHJcbiAgICBmbGFnOiBCb29sZWFuLFxyXG4gICAgZ3JvdXA6IG51bWJlcixcclxuICAgIHBhZ2U6IG51bWJlcixcclxuICApIHtcclxuICAgIHRoaXMudGV4dEJvb2suaW5uZXJIVE1MID0gJyc7XHJcbiAgICB0aGlzLmNhcmRzV3JhcHBlci5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XHJcbiAgICB0aGlzLnBhZ2VJbnB1dC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAndHJhbnNwYXJlbnQnO1xyXG4gICAgdGhpcy5sZXZlbDFCdG5zLm1hcCgoYnRuKSA9PiBidG4uY2xhc3NMaXN0LnJlbW92ZSgnYnRuLWFjdGl2ZScpKTtcclxuICAgIHRoaXMubGV2ZWwxQnRuc1tncm91cF0uY2xhc3NMaXN0LmFkZCgnYnRuLWFjdGl2ZScpO1xyXG4gICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBncm91cDtcclxuICAgIHRoaXMucmVuZGVyVGV4dEJvb2soZGF0YSk7XHJcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZSA/IHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlIDogdGhpcy5jdXJyZW50UGFnZSA9IDA7XHJcbiAgICB0aGlzLnBhZ2VJbnB1dC52YWx1ZSA9IFN0cmluZyhwYWdlICsgMSk7XHJcbiAgICB0aGlzLmhhbmRsZVBhZ2VCdXR0b25zKCk7XHJcbiAgICBpZiAoZmxhZyA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLmxldmVsMUJ0bnNbNl0uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcclxuICAgICAgY29uc3QgbGVhcm5CdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ0bi1sZWFybicpIGFzIE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+O1xyXG4gICAgICBjb25zdCBoYXJkQnRucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idG4tYWRkJykgYXMgTm9kZUxpc3RPZjxIVE1MRWxlbWVudD47XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgbm8tcmV0dXJuLWFzc2lnblxyXG4gICAgICBsZWFybkJ0bnMuZm9yRWFjaCgoYnRuKSA9PiBidG4uc3R5bGUuZGlzcGxheSA9ICdmbGV4Jyk7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgbm8tcmV0dXJuLWFzc2lnblxyXG4gICAgICBoYXJkQnRucy5mb3JFYWNoKChidG4pID0+IGJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnKTtcclxuICAgICAgLy8gdGhpcy5oYW5kbGVQYWdlQWxsRG9uZShkYXRhKTtcclxuICAgICAgY2hlY2tQYWdlQWxsRG9uZSgpO1xyXG4gICAgICBjaGVja0VtcHR5VXNlckJvb2soKTtcclxuICAgIH1cclxuICAgIHRoaXMud29yZHMuZm9yRWFjaCgod29yZCkgPT4gd29yZC53b3JkQXVkaW8/LnBhdXNlKCkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZUNhcmRzKGRhdGE6IFdvcmRbXSB8IFVzZXJBZ2dyZWdhdGVkV29yZFtdKSB7XHJcbiAgICB0aGlzLmNhcmRzV3JhcHBlci5pbm5lckhUTUwgPSAnJztcclxuICAgIHRoaXMucmVuZGVyQ2FyZHMoZGF0YSk7XHJcbiAgfVxyXG5cclxuICAvLyBMaXN0ZW4gbGV2ZWwgYnV0dG9ucyBhbmQgcGFnaW5hdGlvblxyXG5cclxuICBsaXN0ZW5MZXZlbHMoaGFuZGxlcjogKGdyb3VwOiBzdHJpbmcsIHBhZ2U6IHN0cmluZykgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5sZXZlbDFCdG5zLmZvckVhY2goKGJ1dHRvbikgPT4ge1xyXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogRXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxldmVsMUJ0bnMubWFwKChidG4pID0+IGJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdidG4tYWN0aXZlJykpO1xyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdidG4tYWN0aXZlJyk7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XHJcbiAgICAgICAgdGhpcy5wYWdlSW5wdXQudmFsdWUgPSBTdHJpbmcodGhpcy5jdXJyZW50UGFnZSArIDEpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldDogbnVtYmVyID0gTnVtYmVyKChlLnRhcmdldCBhcyBIVE1MQnV0dG9uRWxlbWVudCkuaW5uZXJIVE1MKTtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IHRhcmdldCAtIDE7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBsZXZlbDtcclxuICAgICAgICB0aGlzLmhhbmRsZVBhZ2VCdXR0b25zKCk7XHJcbiAgICAgICAgaGFuZGxlcihTdHJpbmcobGV2ZWwpLCAnMCcpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbGlzdGVuUGFnaW5hdGlvbihoYW5kbGVyOiAoZ3JvdXA6IHN0cmluZywgcGFnZTogc3RyaW5nKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLnByZXZQYWdlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBsZXZlbCA9IHRoaXMuaGFuZGxlTGV2ZWxCdXR0b25zKCk7XHJcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgLT0gMTtcclxuICAgICAgdGhpcy5wYWdlSW5wdXQudmFsdWUgPSBTdHJpbmcodGhpcy5jdXJyZW50UGFnZSArIDEpO1xyXG4gICAgICB0aGlzLmhhbmRsZUlucHV0KHRoaXMucGFnZUlucHV0KTtcclxuICAgICAgdGhpcy5oYW5kbGVQYWdlQnV0dG9ucygpO1xyXG4gICAgICBoYW5kbGVyKFN0cmluZyhsZXZlbCksIFN0cmluZyh0aGlzLmN1cnJlbnRQYWdlKSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMubmV4dFBhZ2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5oYW5kbGVMZXZlbEJ1dHRvbnMoKTtcclxuICAgICAgdGhpcy5jdXJyZW50UGFnZSArPSAxO1xyXG4gICAgICB0aGlzLnBhZ2VJbnB1dC52YWx1ZSA9IFN0cmluZyh0aGlzLmN1cnJlbnRQYWdlICsgMSk7XHJcbiAgICAgIHRoaXMuaGFuZGxlSW5wdXQodGhpcy5wYWdlSW5wdXQpO1xyXG4gICAgICB0aGlzLmhhbmRsZVBhZ2VCdXR0b25zKCk7XHJcbiAgICAgIGhhbmRsZXIoU3RyaW5nKGxldmVsKSwgU3RyaW5nKHRoaXMuY3VycmVudFBhZ2UpKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5wYWdlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGU6IEV2ZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IGxldmVsID0gdGhpcy5oYW5kbGVMZXZlbEJ1dHRvbnMoKTtcclxuICAgICAgY29uc3QgbmV3UGFnZU51bWJlcjogbnVtYmVyID0gTnVtYmVyKChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSk7XHJcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBuZXdQYWdlTnVtYmVyIC0gMTtcclxuICAgICAgdGhpcy5oYW5kbGVJbnB1dCh0aGlzLnBhZ2VJbnB1dCk7XHJcbiAgICAgIHRoaXMuaGFuZGxlUGFnZUJ1dHRvbnMoKTtcclxuICAgICAgaGFuZGxlcihTdHJpbmcobGV2ZWwpLCBTdHJpbmcodGhpcy5jdXJyZW50UGFnZSkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBIYW5kbGUgY2hhbmdlcyB3aGVuIHN3aXRjaGluZyBwYWdlcyAoYnV0dG9ucyBhbmQgaW5wdXQpIGFuZCBsZXZlbHNcclxuICBwcml2YXRlIGhhbmRsZVBhZ2VCdXR0b25zKCkge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPiAwKSB7XHJcbiAgICAgIHRoaXMucHJldlBhZ2VCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50UGFnZSA8PSAwKSB7XHJcbiAgICAgIHRoaXMucHJldlBhZ2VCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wcmV2UGFnZUJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPT09IDI5KSB7XHJcbiAgICAgIHRoaXMubmV4dFBhZ2VCdG4uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5uZXh0UGFnZUJ0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVMZXZlbEJ1dHRvbnMoKSB7XHJcbiAgICBjb25zdCBsZXZlbEJ0biA9IHRoaXMubGV2ZWwxQnRucy5maWx0ZXIoKGJ0bikgPT4gYnRuLmNsYXNzTGlzdC5jb250YWlucygnYnRuLWFjdGl2ZScpKTtcclxuICAgIGNvbnN0IGxldmVsID0gbGV2ZWxCdG4ubGVuZ3RoID09PSAwID8gJzAnIDogTnVtYmVyKGxldmVsQnRuWzBdLmlubmVySFRNTCkgLSAxO1xyXG4gICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBOdW1iZXIobGV2ZWwpO1xyXG4gICAgY29uc29sZS5sb2cobGV2ZWxCdG5bMF0uc3R5bGUuYmFja2dyb3VuZENvbG9yKTtcclxuICAgIHJldHVybiBsZXZlbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlSW5wdXQoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGN1cnJJbnB1dCA9IGlucHV0O1xyXG4gICAgaWYgKE51bWJlcihpbnB1dC52YWx1ZSkgPiBNQVhfUEFHRV9OVU1CRVIpIHtcclxuICAgICAgY3VycklucHV0LnZhbHVlID0gJzMwJztcclxuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDI5O1xyXG4gICAgfSBlbHNlIGlmIChOdW1iZXIoaW5wdXQudmFsdWUpIDw9IDApIHtcclxuICAgICAgY3VycklucHV0LnZhbHVlID0gJzEnO1xyXG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGN1cnJJbnB1dC52YWx1ZSA9IFN0cmluZyh0aGlzLmN1cnJlbnRQYWdlICsgMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3VycklucHV0O1xyXG4gIH1cclxuXHJcbiAgLy8gUmVuZGVyIFRleHRCb29rIGFuZCBjb21wb25lbnRzXHJcbiAgcHVibGljIHJlbmRlclRleHRCb29rKGRhdGE6IHN0cmluZyB8IFdvcmRbXSB8IFVzZXJBZ2dyZWdhdGVkV29yZFtdKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3QgY29udGFpbmVyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB0aGlzLnBhZ2UuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBjb25zdCBwYWdlSGVhZDogSFRNTERpdkVsZW1lbnQgPSB0aGlzLnJlbmRlclRCSGVhZGVyKCk7XHJcbiAgICBjb25zdCBzaWRlYmFyID0gdGhpcy5yZW5kZVNpZGViYXIoKTtcclxuICAgIHRoaXMucmVuZGVyQ2FyZHMoZGF0YSk7XHJcbiAgICB0aGlzLnBhZ2UuYXBwZW5kKHBhZ2VIZWFkLCB0aGlzLmNhcmRzV3JhcHBlcik7XHJcbiAgICB0aGlzLmhhbmRsZUxldmVsQnV0dG9ucygpO1xyXG4gICAgaWYgKHRoaXMuY3VycmVudExldmVsICE9PSA2KSB7XHJcbiAgICAgIGNvbnN0IHBhZ2luYXRpb25XcmFwcGVyOiBIVE1MRGl2RWxlbWVudCA9IHRoaXMucmVuZGVyUGFnaW5hdGlvbigpO1xyXG4gICAgICBwYWdpbmF0aW9uV3JhcHBlci5hcHBlbmQodGhpcy5wcmV2UGFnZUJ0biwgdGhpcy5wYWdlSW5wdXQsIHRoaXMubmV4dFBhZ2VCdG4pO1xyXG4gICAgICB0aGlzLnBhZ2UuYXBwZW5kKHBhZ2luYXRpb25XcmFwcGVyKTtcclxuICAgIH1cclxuICAgIHRoaXMudGV4dEJvb2suYXBwZW5kKHNpZGViYXIsIHRoaXMucGFnZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kKHRoaXMudGV4dEJvb2spO1xyXG4gICAgdGhpcy5jaGFuZ1BhZ2VCRygpO1xyXG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyVEJIZWFkZXIoKSB7XHJcbiAgICBjb25zdCBwYWdlSGVhZDogSFRNTERpdkVsZW1lbnQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWyd0ZXh0LWJvb2stcGFnZS1oZWFkJ10gfSkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICBjb25zdCBwYWdlSGVhZFRleHQ6IEhUTUxQYXJhZ3JhcGhFbGVtZW50ID0gY3JlYXRlTm9kZSh7IHRhZzogJ3AnLCBjbGFzc2VzOiBbJ3BhZ2UtaGVhZC13cmFwcGVyJ10sIGlubmVyOiAn0JjQs9GA0LDRgtGMINGBINGC0LXQutGD0YnQuNC8INC90LDQsdC+0YDQvtC8INGB0LvQvtCyOicgfSkgYXMgSFRNTFBhcmFncmFwaEVsZW1lbnQ7XHJcbiAgICBwYWdlSGVhZC5hcHBlbmQocGFnZUhlYWRUZXh0LCB0aGlzLmF1ZGlvQ2FsbEJ0biwgdGhpcy5zcHJpbnRCdG4pO1xyXG4gICAgcmV0dXJuIHBhZ2VIZWFkO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5kZXJDYXJkcyhjYXJkc0RhdGE6IHN0cmluZyB8IFdvcmRbXSB8IFVzZXJBZ2dyZWdhdGVkV29yZFtdKSB7XHJcbiAgICB0aGlzLmNhcmRzV3JhcHBlci5pbm5lckhUTUwgPSAnJztcclxuICAgIGlmICh0eXBlb2YgY2FyZHNEYXRhID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLmNhcmRzV3JhcHBlci5pbm5lckhUTUwgPSBjYXJkc0RhdGE7XHJcbiAgICAgIHRoaXMuYXVkaW9DYWxsQnRuLmNsYXNzTGlzdC5hZGQoJ2J0bl9fZGlzYWJsZWQnKTtcclxuICAgICAgdGhpcy5zcHJpbnRCdG4uY2xhc3NMaXN0LmFkZCgnYnRuX19kaXNhYmxlZCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2FyZHNEYXRhLmZvckVhY2goKGNhcmQpID0+IHtcclxuICAgICAgICBjb25zdCBjYXJkSXRlbSA9IG5ldyBXb3JkVUkoY2FyZCwgdGhpcy53b3Jkcyk7XHJcbiAgICAgICAgdGhpcy5jYXJkc1dyYXBwZXIuYXBwZW5kKGNhcmRJdGVtLmRyYXdDYXJkKCkpO1xyXG4gICAgICAgIHRoaXMud29yZHMucHVzaChjYXJkSXRlbSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuY2FyZHNXcmFwcGVyO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5kZVNpZGViYXIoKTogSFRNTEVsZW1lbnQge1xyXG4gICAgY29uc3Qgc2lkZUJhcjogSFRNTEVsZW1lbnQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnYXNpZGUnLCBjbGFzc2VzOiBbJ2FzaWRlJ10gfSk7XHJcbiAgICBjb25zdCBzaWRlQmFyQ29udGVudDogSFRNTEVsZW1lbnQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydzaWRlYmFyLWNvbnRlbnQnXSB9KTtcclxuICAgIGNvbnN0IHNpZGViYXJUZXh0OiBIVE1MUGFyYWdyYXBoRWxlbWVudCA9IGNyZWF0ZU5vZGUoeyB0YWc6ICdwJywgY2xhc3NlczogWydzaWRlYmFyLXRleHQnXSwgaW5uZXI6ICfQo9GA0L7QstC90LgnIH0pIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgc2lkZUJhckNvbnRlbnQuYXBwZW5kKHNpZGViYXJUZXh0KTtcclxuICAgIHRoaXMubGV2ZWwxQnRucy5mb3JFYWNoKChidG4pID0+IHNpZGVCYXJDb250ZW50LmFwcGVuZChidG4pKTtcclxuICAgIHNpZGVCYXIuYXBwZW5kKHNpZGVCYXJDb250ZW50KTtcclxuICAgIHRoaXMubGV2ZWwxQnRuc1s2XS5jbGFzc0xpc3QuYWRkKCd1c2VyLXdvcmRzLWJ0bicpO1xyXG4gICAgdGhpcy5sZXZlbDFCdG5zWzZdLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICByZXR1cm4gc2lkZUJhcjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlTGV2ZWxCdXR0b25zKGxldmVsc051bWJlcjogbnVtYmVyKSB7XHJcbiAgICBjb25zdCBhcnI6IEhUTUxCdXR0b25FbGVtZW50W10gPSBbXTtcclxuICAgIGxldCBpOiBudW1iZXIgPSAxO1xyXG4gICAgd2hpbGUgKGxldmVsc051bWJlcikge1xyXG4gICAgICBjb25zdCBidG4gPSBjcmVhdGVOb2RlKHsgdGFnOiAnYnV0dG9uJywgY2xhc3NlczogWydidG4tbGV2ZWwnXSwgaW5uZXI6IGAke2l9YCB9KSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcclxuICAgICAgYnRuLmNsYXNzTGlzdC5hZGQoYGJ0bi1sZXZlbC0ke2l9YCk7XHJcbiAgICAgIGFyci5wdXNoKGJ0bik7XHJcbiAgICAgIGkgKz0gMTtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXHJcbiAgICAgIGxldmVsc051bWJlciAtPSAxO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycjtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVuZGVyUGFnaW5hdGlvbigpOiBIVE1MRGl2RWxlbWVudCB7XHJcbiAgICBjb25zdCBwYWdpbmF0aW9uV3JhcHBlcjogSFRNTERpdkVsZW1lbnQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydwYWdpbmF0aW9uJ10gfSkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICB0aGlzLnByZXZQYWdlQnRuLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMubmV4dFBhZ2VCdG4uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIHBhZ2luYXRpb25XcmFwcGVyLmFwcGVuZCh0aGlzLnByZXZQYWdlQnRuLCB0aGlzLnBhZ2VJbnB1dCwgdGhpcy5uZXh0UGFnZUJ0bik7XHJcbiAgICByZXR1cm4gcGFnaW5hdGlvbldyYXBwZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0b3BTb3VuZEJ5TGluaygpIHtcclxuICAgIHRoaXMucmVtb3ZlTGlua3NMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMud29yZHMuZm9yRWFjaCgod29yZCkgPT4gd29yZC53b3JkQXVkaW8/LnBhdXNlKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVMaW5rc0xpc3RlbmVycygpIHtcclxuICAgIGNvbnN0IGxpbmtzID0gPE5vZGVMaXN0T2Y8SFRNTEFuY2hvckVsZW1lbnQ+PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2EnKTtcclxuICAgIGxpbmtzLmZvckVhY2goKGxpbmspID0+IGxpbmsucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmxpbmtzSGFuZGxlcikpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZExpbmtzSGFuZGxlcigpIHtcclxuICAgIGNvbnN0IGhyZWYgPSBgJHtkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbH0vLyR7ZG9jdW1lbnQubG9jYXRpb24uaG9zdH1gO1xyXG4gICAgY29uc3QgbGlua3MgPSA8Tm9kZUxpc3RPZjxIVE1MQW5jaG9yRWxlbWVudD4+ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYScpO1xyXG4gICAgbGlua3MuZm9yRWFjaCgobGluaykgPT4ge1xyXG4gICAgICBpZiAobGluay5ocmVmICE9PSBgJHtocmVmfS9ib29rYCkge1xyXG4gICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmxpbmtzSGFuZGxlcik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGFuZ1BhZ2VCRygpIHtcclxuICAgIGNvbnN0IGJ0bkFjdGl2ZSA9IHRoaXMubGV2ZWwxQnRucy5maWx0ZXIoKGJ0bikgPT4gYnRuLmNsYXNzTGlzdC5jb250YWlucygnYnRuLWFjdGl2ZScpKVswXTtcclxuICAgIGNvbnN0IGJ0bkNvbG9yID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoYnRuQWN0aXZlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdiYWNrZ3JvdW5kLWNvbG9yJyk7XHJcbiAgICB0aGlzLnBhZ2Uuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYnRuQ29sb3I7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8305\n")},6610:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.WordUI = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst constants_1 = __webpack_require__(5004);\r\nconst soundSVG_1 = __webpack_require__(5327);\r\nconst WordController_1 = __webpack_require__(3584);\r\nconst Storage_1 = __webpack_require__(7114);\r\nconst checkPageAllDone_1 = __webpack_require__(9103);\r\nconst checkEmptyUserBook_1 = __webpack_require__(6285);\r\nclass WordUI {\r\n    constructor(obj, TBWords) {\r\n        this.wordController = new WordController_1.WordController();\r\n        this.obj = obj;\r\n        if (obj?.id) {\r\n            this.id = obj.id;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line no-underscore-dangle\r\n            this.id = obj._id;\r\n        }\r\n        this.card = (0, createNode_1.default)({ tag: 'div', classes: ['card'] });\r\n        this.img = (0, createNode_1.default)({ tag: 'div', classes: ['card-img'] });\r\n        this.playBtn = (0, createNode_1.default)({ tag: 'button', classes: ['btn', 'btn-play'] });\r\n        this.word = (0, createNode_1.default)({\r\n            tag: 'p', classes: ['word'], inner: `${this.obj.word}`,\r\n        });\r\n        this.addToUserWordsBtn = (0, createNode_1.default)({\r\n            tag: 'button', classes: ['btn-add', 'btn-secondary'], atributesAdnValues: [['style', 'display: none']], inner: '<span class=\"material-icons-outlined btn-icon\">menu_book</span>',\r\n        });\r\n        this.learnWordBtn = (0, createNode_1.default)({\r\n            tag: 'button', classes: ['btn-learn', 'btn-secondary'], atributesAdnValues: [['style', 'display: none']], inner: '<span class=\"material-icons-outlined btn-icon\">spellcheck</span>',\r\n        });\r\n        this.correct = (0, createNode_1.default)({ tag: 'span', classes: ['correct-answers'], inner: '0' });\r\n        this.incorrect = (0, createNode_1.default)({ tag: 'span', classes: ['incorrect-answers'], inner: '0' });\r\n        this.transcription = (0, createNode_1.default)({ tag: 'p', classes: ['word-transcription'], inner: `${this.obj.transcription}` });\r\n        this.translate = (0, createNode_1.default)({ tag: 'p', classes: ['word-translate'], inner: `${this.obj.wordTranslate}` });\r\n        this.transcription = (0, createNode_1.default)({ tag: 'p', classes: ['word-transcription'], inner: `${this.obj.transcription}` });\r\n        this.playWord();\r\n        this.listenHardWordBtn();\r\n        this.listenLearnBtn();\r\n        this.storage = Storage_1.storage;\r\n        this.audioPointer = 0;\r\n        this.words = TBWords;\r\n    }\r\n    drawCard() {\r\n        const cardMainInfoWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['card-main-info-wrapper'] });\r\n        const cardWordInfo = (0, createNode_1.default)({ tag: 'div', classes: ['card-word-info'] });\r\n        const userBtns = (0, createNode_1.default)({ tag: 'div', classes: ['user-btns'] });\r\n        const wordExamplesWrapper = (0, createNode_1.default)({ tag: 'div', classes: ['card-examples-wrapper'] });\r\n        const wordMeaning = (0, createNode_1.default)({ tag: 'p', classes: ['word-mean'], inner: `${this.obj.textMeaning}` });\r\n        const wordMeaningTranslate = (0, createNode_1.default)({ tag: 'p', classes: ['word-mean-translate'], inner: `${this.obj.textMeaningTranslate}` });\r\n        const wordExample = (0, createNode_1.default)({ tag: 'p', classes: ['word-ex'], inner: `${this.obj.textExample}` });\r\n        const wordExampleTranslate = (0, createNode_1.default)({ tag: 'p', classes: ['word-ex-translate'], inner: `${this.obj.textExampleTranslate}` });\r\n        this.playBtn.innerHTML = soundSVG_1.soundIcon;\r\n        this.img.style.background = `center / cover no-repeat url(${constants_1.BASE_LINK}/${this.obj.image})`;\r\n        wordExamplesWrapper.append(wordMeaning, wordMeaningTranslate, wordExample, wordExampleTranslate);\r\n        cardWordInfo.append(this.word, this.transcription, this.translate);\r\n        cardMainInfoWrapper.append(this.img, this.playBtn, cardWordInfo);\r\n        userBtns.append(this.addToUserWordsBtn, this.learnWordBtn);\r\n        if (this.obj.userWord) {\r\n            const answers = (0, createNode_1.default)({ tag: 'div', classes: ['answers'] });\r\n            answers.append(this.correct, '/', this.incorrect);\r\n            userBtns.append(this.addToUserWordsBtn, this.learnWordBtn, answers);\r\n            this.checkUserWordUpdate(this.obj.userWord.difficulty, this.obj.userWord.optional.learned);\r\n            this.correct.innerHTML = String(this.obj.userWord.optional.correctAnswers);\r\n            this.incorrect.innerHTML = String(this.obj.userWord.optional.incorrectAnswers);\r\n        }\r\n        cardMainInfoWrapper.append(userBtns);\r\n        this.card.append(cardMainInfoWrapper, wordExamplesWrapper);\r\n        return this.card;\r\n    }\r\n    listenHardWordBtn() {\r\n        this.addToUserWordsBtn.addEventListener('click', () => {\r\n            const { group } = this.storage.getData('textBook');\r\n            let difficulty;\r\n            if (this.addToUserWordsBtn.classList.contains('hard-word-btn')) {\r\n                this.addToUserWordsBtn.classList.remove('hard-word-btn');\r\n                difficulty = 'easy';\r\n                this.wordController.updateHardWord(difficulty, this.id);\r\n            }\r\n            else {\r\n                this.addToUserWordsBtn.classList.add('hard-word-btn');\r\n                difficulty = 'hard';\r\n                this.wordController.updateHardWord(difficulty, this.id);\r\n            }\r\n            if (group === 6) {\r\n                this.card.style.display = 'none';\r\n                (0, checkEmptyUserBook_1.checkEmptyUserBook)();\r\n            }\r\n            else {\r\n                (0, checkPageAllDone_1.checkPageAllDone)();\r\n            }\r\n        });\r\n    }\r\n    listenLearnBtn() {\r\n        this.learnWordBtn.addEventListener('click', () => {\r\n            const { group } = this.storage.getData('textBook');\r\n            let isLearned;\r\n            if (this.learnWordBtn.classList.contains('learn-word-btn')) {\r\n                this.learnWordBtn.classList.remove('learn-word-btn');\r\n                this.addToUserWordsBtn.disabled = false;\r\n                isLearned = false;\r\n                this.wordController.updateLearnedWord(isLearned, this.id);\r\n            }\r\n            else {\r\n                this.learnWordBtn.classList.add('learn-word-btn');\r\n                this.addToUserWordsBtn.classList.remove('hard-word-btn');\r\n                this.addToUserWordsBtn.disabled = true;\r\n                isLearned = true;\r\n                this.wordController.updateLearnedWord(isLearned, this.id);\r\n            }\r\n            if (group === 6) {\r\n                this.card.style.display = 'none';\r\n                (0, checkEmptyUserBook_1.checkEmptyUserBook)();\r\n            }\r\n            else {\r\n                (0, checkPageAllDone_1.checkPageAllDone)();\r\n            }\r\n        });\r\n    }\r\n    async checkUserWordUpdate(difficulty, learned) {\r\n        if (learned === true && !this.learnWordBtn.classList.contains('learn-word-btn')) {\r\n            this.learnWordBtn.classList.add('learn-word-btn');\r\n            this.addToUserWordsBtn.disabled = true;\r\n        }\r\n        if (difficulty === 'hard' && !this.addToUserWordsBtn.classList.contains('hard-word-btn')) {\r\n            this.addToUserWordsBtn.classList.add('hard-word-btn');\r\n            this.addToUserWordsBtn.disabled = false;\r\n            this.learnWordBtn.classList.remove('learn-word-btn');\r\n        }\r\n    }\r\n    makeSoundURL() {\r\n        const wordSoundString = this.obj.audio;\r\n        const exampleSound = this.obj.audioExample;\r\n        const meaningSound = this.obj.audioMeaning;\r\n        const arr = [];\r\n        arr.push(`${constants_1.BASE_LINK}/${wordSoundString}`, `${constants_1.BASE_LINK}/${meaningSound}`, `${constants_1.BASE_LINK}/${exampleSound}`);\r\n        return arr;\r\n    }\r\n    playNext() {\r\n        this.audioPointer += 1;\r\n        if (this.audioPointer < this.makeSoundURL().length) {\r\n            this.wordAudio = new Audio(this.makeSoundURL()[this.audioPointer]);\r\n            this.wordAudio.addEventListener('ended', this.playNext.bind(this));\r\n            this.wordAudio.play();\r\n        }\r\n    }\r\n    play() {\r\n        this.audioPointer = 0;\r\n        this.wordAudio = new Audio(this.makeSoundURL()[this.audioPointer]);\r\n        this.wordAudio.addEventListener('ended', this.playNext.bind(this));\r\n        this.wordAudio.play();\r\n    }\r\n    playWord() {\r\n        this.playBtn.addEventListener('click', () => {\r\n            this.wordAudio?.pause();\r\n            this.words.forEach((word) => word.wordAudio?.pause());\r\n            this.play();\r\n        });\r\n    }\r\n}\r\nexports.WordUI = WordUI;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6610\n")},5327:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.soundIcon = void 0;\r\nexports.soundIcon = `<svg xmlns="http://www.w3.org/2000/svg" version="1.0"  width="50" height="50" viewBox="0 0 75 75">\r\n<path d="M39.389,13.769 L22.235,28.606 L6,28.606 L6,47.699 L21.989,47.699 L39.389,62.75 L39.389,13.769z"\r\nstyle="stroke-width:5;stroke-linejoin:round;"\r\n/>\r\n<path d="M48,27.6a19.5,19.5 0 0 1 0,21.4M55.1,20.5a30,30 0 0 1 0,35.6M61.6,14a38.8,38.8 0 0 1 0,48.6" style="fill:none;stroke-width:5;stroke-linecap:round"/>\r\n</svg>`;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMyNy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYSxpQkFBUyxHQUFHOzs7OztPQUtsQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL3RleHRCb29rL3NvdW5kU1ZHLnRzPzUyNTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHNvdW5kSWNvbiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2ZXJzaW9uPVwiMS4wXCIgIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCI1MFwiIHZpZXdCb3g9XCIwIDAgNzUgNzVcIj5cclxuPHBhdGggZD1cIk0zOS4zODksMTMuNzY5IEwyMi4yMzUsMjguNjA2IEw2LDI4LjYwNiBMNiw0Ny42OTkgTDIxLjk4OSw0Ny42OTkgTDM5LjM4OSw2Mi43NSBMMzkuMzg5LDEzLjc2OXpcIlxyXG5zdHlsZT1cInN0cm9rZS13aWR0aDo1O3N0cm9rZS1saW5lam9pbjpyb3VuZDtcIlxyXG4vPlxyXG48cGF0aCBkPVwiTTQ4LDI3LjZhMTkuNSwxOS41IDAgMCAxIDAsMjEuNE01NS4xLDIwLjVhMzAsMzAgMCAwIDEgMCwzNS42TTYxLjYsMTRhMzguOCwzOC44IDAgMCAxIDAsNDguNlwiIHN0eWxlPVwiZmlsbDpub25lO3N0cm9rZS13aWR0aDo1O3N0cm9rZS1saW5lY2FwOnJvdW5kXCIvPlxyXG48L3N2Zz5gO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5327\n')},8875:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.GAME = exports.HTTPMethod = exports.ContentType = exports.Endpoint = void 0;\r\nvar Endpoint;\r\n(function (Endpoint) {\r\n    Endpoint["words"] = "/words";\r\n    Endpoint["users"] = "/users";\r\n    Endpoint["signin"] = "/signin";\r\n    Endpoint["tokens"] = "/tokens";\r\n    Endpoint["aggregatedWords"] = "/aggregatedWords";\r\n    Endpoint["statistics"] = "/statistics";\r\n})(Endpoint = exports.Endpoint || (exports.Endpoint = {}));\r\nvar ContentType;\r\n(function (ContentType) {\r\n    ContentType["json"] = "application/json";\r\n})(ContentType = exports.ContentType || (exports.ContentType = {}));\r\nvar HTTPMethod;\r\n(function (HTTPMethod) {\r\n    HTTPMethod["GET"] = "GET";\r\n    HTTPMethod["POST"] = "POST";\r\n    HTTPMethod["PUT"] = "PUT";\r\n    HTTPMethod["DELETE"] = "DELETE";\r\n})(HTTPMethod = exports.HTTPMethod || (exports.HTTPMethod = {}));\r\nvar GAME;\r\n(function (GAME) {\r\n    GAME["AUDIOCALL"] = "audiocall";\r\n    GAME["SPRINT"] = "sprint";\r\n})(GAME = exports.GAME || (exports.GAME = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODg3NS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLFFBT1g7QUFQRCxXQUFZLFFBQVE7SUFDbEIsNEJBQWdCO0lBQ2hCLDRCQUFnQjtJQUNoQiw4QkFBa0I7SUFDbEIsOEJBQWtCO0lBQ2xCLGdEQUFvQztJQUNwQyxzQ0FBMEI7QUFDNUIsQ0FBQyxFQVBXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBT25CO0FBQ0QsSUFBWSxXQUVYO0FBRkQsV0FBWSxXQUFXO0lBQ3JCLHdDQUF5QjtBQUMzQixDQUFDLEVBRlcsV0FBVyxHQUFYLG1CQUFXLEtBQVgsbUJBQVcsUUFFdEI7QUFDRCxJQUFZLFVBS1g7QUFMRCxXQUFZLFVBQVU7SUFDcEIseUJBQVc7SUFDWCwyQkFBYTtJQUNiLHlCQUFXO0lBQ1gsK0JBQWlCO0FBQ25CLENBQUMsRUFMVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQUtyQjtBQUVELElBQVksSUFHWDtBQUhELFdBQVksSUFBSTtJQUNkLCtCQUF1QjtJQUN2Qix5QkFBaUI7QUFDbkIsQ0FBQyxFQUhXLElBQUksR0FBSixZQUFJLEtBQUosWUFBSSxRQUdmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL3R5cGVzL2VudW1zLnRzP2NhOWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gRW5kcG9pbnQge1xyXG4gIHdvcmRzID0gJy93b3JkcycsXHJcbiAgdXNlcnMgPSAnL3VzZXJzJyxcclxuICBzaWduaW4gPSAnL3NpZ25pbicsXHJcbiAgdG9rZW5zID0gJy90b2tlbnMnLFxyXG4gIGFnZ3JlZ2F0ZWRXb3JkcyA9ICcvYWdncmVnYXRlZFdvcmRzJyxcclxuICBzdGF0aXN0aWNzID0gJy9zdGF0aXN0aWNzJyxcclxufVxyXG5leHBvcnQgZW51bSBDb250ZW50VHlwZSB7XHJcbiAganNvbiA9ICdhcHBsaWNhdGlvbi9qc29uJyxcclxufVxyXG5leHBvcnQgZW51bSBIVFRQTWV0aG9kIHtcclxuICBHRVQgPSAnR0VUJyxcclxuICBQT1NUID0gJ1BPU1QnLFxyXG4gIFBVVCA9ICdQVVQnLFxyXG4gIERFTEVURSA9ICdERUxFVEUnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBHQU1FIHtcclxuICBBVURJT0NBTEwgPSAnYXVkaW9jYWxsJyxcclxuICBTUFJJTlQgPSAnc3ByaW50JyxcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8875\n')},3761:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserUI = void 0;\r\nconst StatisticUI_1 = __webpack_require__(5021);\r\nconst constants_1 = __webpack_require__(5004);\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nconst Charts_1 = __webpack_require__(1857);\r\nclass UserUI {\r\n    constructor() {\r\n        this.headerEnterBtn = (0, createNode_1.default)({\r\n            tag: 'a', classes: ['enter-cabinet-link'], atributesAdnValues: [['href', '/user'], ['data-navigo', 'true']], inner: '<span class=\"material-icons-outlined user-icon\">account_circle</span>',\r\n        });\r\n        this.userPage = (0, createNode_1.default)({ tag: 'div', classes: ['user-page'] });\r\n        this.name = (0, createNode_1.default)({ tag: 'h2', classes: ['user-name'] });\r\n        this.email = (0, createNode_1.default)({ tag: 'p', classes: ['user-name'] });\r\n        this.exitBtn = (0, createNode_1.default)({ tag: 'button', classes: ['btn', 'exit-cabinet-btn'], inner: 'Выйти из аккаунта' });\r\n        this.statisticPage = (0, createNode_1.default)({ tag: 'div', classes: ['statistic-block'] });\r\n        this.statUI = new StatisticUI_1.StatisticUI();\r\n        this.charts = new Charts_1.Charts();\r\n    }\r\n    authorise(res) {\r\n        this.name.innerHTML = res.name;\r\n        constants_1.REGISTER_BTN.style.display = 'none';\r\n        constants_1.LOGIN_BTN.style.display = 'none';\r\n        constants_1.USER_AUTH_WRAPPER.append(this.headerEnterBtn);\r\n        this.headerEnterBtn.style.display = 'flex';\r\n        return constants_1.USER_AUTH_WRAPPER;\r\n    }\r\n    unAuthorize(hanlder) {\r\n        this.exitBtn.addEventListener('click', () => {\r\n            constants_1.REGISTER_BTN.style.display = 'block';\r\n            constants_1.LOGIN_BTN.style.display = 'block';\r\n            this.headerEnterBtn.style.display = 'none';\r\n            hanlder();\r\n        });\r\n    }\r\n    async renderUserPage() {\r\n        const container = document.querySelector('.main');\r\n        container.innerHTML = '';\r\n        this.userPage.innerHTML = '';\r\n        console.log(this.userPage.innerHTML);\r\n        const userSection = (0, createNode_1.default)({ tag: 'section', classes: ['user-section'] });\r\n        const chartsSection = (0, createNode_1.default)({ tag: 'section', classes: ['charts-section'] });\r\n        const dailyStatSection = (0, createNode_1.default)({ tag: 'section', classes: ['daily-stat-section'] });\r\n        const userBlock = (0, createNode_1.default)({ tag: 'aside', classes: ['aside', 'user-sidebar'] });\r\n        userBlock.append(this.name, this.email, this.exitBtn);\r\n        const todayStatistic = await this.renderTodayStatisticBlock();\r\n        const dailyStatistic = await this.renderStatisticBlock();\r\n        const charts = this.renderChartsBlock();\r\n        userSection.append(userBlock, todayStatistic);\r\n        chartsSection.append(charts);\r\n        dailyStatSection.append(dailyStatistic);\r\n        this.userPage.append(userSection, chartsSection, dailyStatSection);\r\n        container.append(this.userPage);\r\n        const stat = await this.charts.getStatisticForCarts();\r\n        if (stat) {\r\n            this.charts.createChart('myChart-1', stat.dates, stat.newWords, 'Количество новых', 'bar');\r\n            this.charts.createChart('myChart-2', stat.dates, stat.learnedWords, 'Количество выученных', 'line');\r\n        }\r\n        return container;\r\n    }\r\n    async renderStatisticBlock() {\r\n        this.statisticPage.innerHTML = '';\r\n        const statisticData = await this.statUI.drawDailyStat();\r\n        this.statisticPage.append(statisticData);\r\n        return this.statisticPage;\r\n    }\r\n    async renderTodayStatisticBlock() {\r\n        const statisticData = await this.statUI.drawTodayStat();\r\n        return statisticData;\r\n    }\r\n    renderChartsBlock() {\r\n        const charts = (0, createNode_1.default)({ tag: 'section', classes: ['charts'] });\r\n        this.renderChartCanvas(charts, 'chart', 'myChart-1');\r\n        this.renderChartCanvas(charts, 'chart', 'myChart-2');\r\n        return charts;\r\n    }\r\n    renderChartCanvas(container, className, id) {\r\n        const chart = (0, createNode_1.default)({\r\n            tag: 'canvas',\r\n            classes: [className],\r\n            atributesAdnValues: [['id', id]],\r\n        });\r\n        container.append(chart);\r\n    }\r\n}\r\nexports.UserUI = UserUI;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3761\n")},7618:(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.BurgerMenu = void 0;\r\nclass BurgerMenu {\r\n    constructor() {\r\n        this.burgerMenu = document.querySelector('.burger-icon');\r\n        this.menu = document.querySelector('.header-menu');\r\n        this.menuLinks = document.querySelectorAll('.menu-item');\r\n    }\r\n    initBurgerMenu() {\r\n        // this.bindEvents.bind(this);\r\n        this.bindEvents();\r\n        console.log(this.menu);\r\n    }\r\n    openMenu() {\r\n        console.log('open');\r\n        this.burgerMenu.classList.add('clicked');\r\n        this.menu.classList.add('opened');\r\n        // overlay.classList.add('shadowed');\r\n        document.body.classList.add('hidden-overflow');\r\n    }\r\n    closeMenu() {\r\n        console.log('close');\r\n        this.burgerMenu.classList.remove('clicked');\r\n        this.menu.classList.remove('opened');\r\n        // overlay.classList.remove('shadowed');\r\n        document.body.classList.remove('hidden-overflow');\r\n    }\r\n    bindEvents() {\r\n        console.log('bind');\r\n        this.burgerMenu.addEventListener('click', () => {\r\n            if (this.burgerMenu.classList.contains('clicked')) {\r\n                this.closeMenu();\r\n            }\r\n            else {\r\n                this.openMenu();\r\n            }\r\n        });\r\n        this.menu.addEventListener('click', (e) => {\r\n            const target = e.target;\r\n            console.log(target);\r\n            if (target.classList.contains('menu-item') || target.closest('.menu-item')) {\r\n                // console.log('e.target');\r\n                this.closeMenu();\r\n            }\r\n        });\r\n    }\r\n}\r\nexports.BurgerMenu = BurgerMenu;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYxOC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFhLFVBQVU7SUFBdkI7UUFDRSxlQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQWdCLENBQUM7UUFFbkUsU0FBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFnQixDQUFDO1FBRTdELGNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQWMsWUFBWSxDQUFDLENBQUM7SUEwQ25FLENBQUM7SUF4Q0MsY0FBYztRQUNaLDhCQUE4QjtRQUM5QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMscUNBQXFDO1FBQ3JDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLHdDQUF3QztRQUN4QyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQzdDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNqRCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ2pCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQVEsRUFBRSxFQUFFO1lBQy9DLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFxQixDQUFDO1lBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDcEIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUMxRSwyQkFBMkI7Z0JBQzNCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNsQjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBL0NELGdDQStDQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy91dGlscy9CdXJnZXJNZW51LnRzPzkyMzUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEJ1cmdlck1lbnUge1xyXG4gIGJ1cmdlck1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYnVyZ2VyLWljb24nKSBhcyBIVE1MRWxlbWVudDtcclxuXHJcbiAgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItbWVudScpIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuICBtZW51TGlua3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PignLm1lbnUtaXRlbScpO1xyXG5cclxuICBpbml0QnVyZ2VyTWVudSgpIHtcclxuICAgIC8vIHRoaXMuYmluZEV2ZW50cy5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzLm1lbnUpO1xyXG4gIH1cclxuXHJcbiAgb3Blbk1lbnUoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnb3BlbicpO1xyXG4gICAgdGhpcy5idXJnZXJNZW51LmNsYXNzTGlzdC5hZGQoJ2NsaWNrZWQnKTtcclxuICAgIHRoaXMubWVudS5jbGFzc0xpc3QuYWRkKCdvcGVuZWQnKTtcclxuICAgIC8vIG92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnc2hhZG93ZWQnKTtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgnaGlkZGVuLW92ZXJmbG93Jyk7XHJcbiAgfVxyXG5cclxuICBjbG9zZU1lbnUoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnY2xvc2UnKTtcclxuICAgIHRoaXMuYnVyZ2VyTWVudS5jbGFzc0xpc3QucmVtb3ZlKCdjbGlja2VkJyk7XHJcbiAgICB0aGlzLm1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnb3BlbmVkJyk7XHJcbiAgICAvLyBvdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ3NoYWRvd2VkJyk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbi1vdmVyZmxvdycpO1xyXG4gIH1cclxuXHJcbiAgYmluZEV2ZW50cygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdiaW5kJyk7XHJcbiAgICB0aGlzLmJ1cmdlck1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLmJ1cmdlck1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbGlja2VkJykpIHtcclxuICAgICAgICB0aGlzLmNsb3NlTWVudSgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMub3Blbk1lbnUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLm1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZTogRXZlbnQpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGNvbnNvbGUubG9nKHRhcmdldCk7XHJcbiAgICAgIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtZW51LWl0ZW0nKSB8fCB0YXJnZXQuY2xvc2VzdCgnLm1lbnUtaXRlbScpKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2UudGFyZ2V0Jyk7XHJcbiAgICAgICAgdGhpcy5jbG9zZU1lbnUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7618\n")},9843:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Modal = void 0;\r\nconst createNode_1 = __importDefault(__webpack_require__(9856));\r\nclass Modal {\r\n    constructor() {\r\n        this.closeBtn = (0, createNode_1.default)({ tag: 'button', classes: ['btn', 'modal-close-btn'] });\r\n        this.modalContent = (0, createNode_1.default)({ tag: 'div', classes: ['modal-wrapper'] });\r\n        this.overLay = (0, createNode_1.default)({ tag: 'div', classes: ['modal-overlay'] });\r\n    }\r\n    renderModal(htmlNode) {\r\n        this.modalContent.innerHTML = '';\r\n        this.closeBtn.innerHTML = '<span class=\"material-icons-outlined material-modal-close-icon\">close</span>';\r\n        this.modalContent.append(htmlNode);\r\n        this.modalContent.prepend(this.closeBtn);\r\n        this.overLay.append(this.modalContent);\r\n        document.body.append(this.overLay);\r\n        document.body.classList.add('hidden-overflow');\r\n        this.bindEvents();\r\n    }\r\n    bindEvents() {\r\n        this.closeBtn.addEventListener('click', this.closeModal.bind(this));\r\n        this.overLay.addEventListener('click', this.closeModal.bind(this));\r\n    }\r\n    closeModal(e) {\r\n        const classes = e.target.classList;\r\n        if (classes.contains('modal-overlay') || classes.contains('modal-close-btn') || classes.contains('material-modal-close-icon')) {\r\n            this.overLay.remove();\r\n            document.body.classList.remove('hidden-overflow');\r\n        }\r\n    }\r\n    exitModal() {\r\n        this.overLay.remove();\r\n        document.body.classList.remove('hidden-overflow');\r\n    }\r\n    showMessage(data) {\r\n        console.log('Success');\r\n        this.modalContent.innerHTML = '';\r\n        const p = (0, createNode_1.default)({ tag: 'p', classes: ['modal-message'], inner: `${data}` });\r\n        this.modalContent.append(p);\r\n        return this.modalContent;\r\n    }\r\n    showLoginMessage() {\r\n        const errMessage = (0, createNode_1.default)({ tag: 'p', classes: ['modal-err-message'], inner: 'Такого пользователя не существует, проверьте данные' });\r\n        this.modalContent.prepend(errMessage);\r\n        return this.modalContent;\r\n    }\r\n}\r\nexports.Modal = Modal;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsTUFBTSxVQUFVLEdBQUcsd0JBQVUsRUFBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBRSxLQUFLLEVBQUUscURBQXFELEVBQUUsQ0FBQyxDQUFDO1FBQzFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUF2REQsc0JBdURDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL01vZGFsLnRzPzc3OTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyZWF0ZU5vZGUgZnJvbSAnLi9jcmVhdGVOb2RlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNb2RhbCB7XHJcbiAgY2xvc2VCdG46IEhUTUxCdXR0b25FbGVtZW50O1xyXG5cclxuICBtb2RhbENvbnRlbnQ6IEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICBvdmVyTGF5OiBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLmNsb3NlQnRuID0gY3JlYXRlTm9kZSh7IHRhZzogJ2J1dHRvbicsIGNsYXNzZXM6IFsnYnRuJywgJ21vZGFsLWNsb3NlLWJ0biddIH0pIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG4gICAgdGhpcy5tb2RhbENvbnRlbnQgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydtb2RhbC13cmFwcGVyJ10gfSkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICB0aGlzLm92ZXJMYXkgPSBjcmVhdGVOb2RlKHsgdGFnOiAnZGl2JywgY2xhc3NlczogWydtb2RhbC1vdmVybGF5J10gfSkgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZW5kZXJNb2RhbChodG1sTm9kZTogSFRNTEVsZW1lbnQpIHtcclxuICAgIHRoaXMubW9kYWxDb250ZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgdGhpcy5jbG9zZUJ0bi5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9XCJtYXRlcmlhbC1pY29ucy1vdXRsaW5lZCBtYXRlcmlhbC1tb2RhbC1jbG9zZS1pY29uXCI+Y2xvc2U8L3NwYW4+JztcclxuICAgIHRoaXMubW9kYWxDb250ZW50LmFwcGVuZChodG1sTm9kZSk7XHJcbiAgICB0aGlzLm1vZGFsQ29udGVudC5wcmVwZW5kKHRoaXMuY2xvc2VCdG4pO1xyXG4gICAgdGhpcy5vdmVyTGF5LmFwcGVuZCh0aGlzLm1vZGFsQ29udGVudCk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLm92ZXJMYXkpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4tb3ZlcmZsb3cnKTtcclxuICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gIH1cclxuXHJcbiAgYmluZEV2ZW50cygpIHtcclxuICAgIHRoaXMuY2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKSk7XHJcbiAgICB0aGlzLm92ZXJMYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZU1vZGFsKGU6IEV2ZW50KSB7XHJcbiAgICBjb25zdCBjbGFzc2VzID0gKGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5jbGFzc0xpc3Q7XHJcbiAgICBpZiAoY2xhc3Nlcy5jb250YWlucygnbW9kYWwtb3ZlcmxheScpIHx8IGNsYXNzZXMuY29udGFpbnMoJ21vZGFsLWNsb3NlLWJ0bicpIHx8IGNsYXNzZXMuY29udGFpbnMoJ21hdGVyaWFsLW1vZGFsLWNsb3NlLWljb24nKSkge1xyXG4gICAgICB0aGlzLm92ZXJMYXkucmVtb3ZlKCk7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuLW92ZXJmbG93Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBleGl0TW9kYWwoKSB7XHJcbiAgICB0aGlzLm92ZXJMYXkucmVtb3ZlKCk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbi1vdmVyZmxvdycpO1xyXG4gIH1cclxuXHJcbiAgc2hvd01lc3NhZ2UoZGF0YTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZygnU3VjY2VzcycpO1xyXG4gICAgdGhpcy5tb2RhbENvbnRlbnQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBjb25zdCBwID0gY3JlYXRlTm9kZSh7IHRhZzogJ3AnLCBjbGFzc2VzOiBbJ21vZGFsLW1lc3NhZ2UnXSwgaW5uZXI6IGAke2RhdGF9YCB9KTtcclxuICAgIHRoaXMubW9kYWxDb250ZW50LmFwcGVuZChwKTtcclxuICAgIHJldHVybiB0aGlzLm1vZGFsQ29udGVudDtcclxuICB9XHJcblxyXG4gIHNob3dMb2dpbk1lc3NhZ2UoKSB7XHJcbiAgICBjb25zdCBlcnJNZXNzYWdlID0gY3JlYXRlTm9kZSh7IHRhZzogJ3AnLCBjbGFzc2VzOiBbJ21vZGFsLWVyci1tZXNzYWdlJ10sIGlubmVyOiAn0KLQsNC60L7Qs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCLCDQv9GA0L7QstC10YDRjNGC0LUg0LTQsNC90L3Ri9C1JyB9KTtcclxuICAgIHRoaXMubW9kYWxDb250ZW50LnByZXBlbmQoZXJyTWVzc2FnZSk7XHJcbiAgICByZXR1cm4gdGhpcy5tb2RhbENvbnRlbnQ7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9843\n")},6285:(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.checkEmptyUserBook = void 0;\r\nfunction checkEmptyUserBook() {\r\n    const cards = [...document.querySelectorAll('.card')];\r\n    const audioCallBtn = document.getElementById('audiocall-btn');\r\n    const sprintBtn = document.getElementById('sprint-btn');\r\n    const isEmptyPage = cards.every((card) => card.style.display === 'none');\r\n    if (isEmptyPage) {\r\n        audioCallBtn.classList.add('btn__disabled');\r\n        sprintBtn.classList.add('btn__disabled');\r\n        const cardsWrapepr = document.querySelector('.cards-wrapper');\r\n        cardsWrapepr.innerHTML = 'В вашем учебнике нет Сложных слов';\r\n    }\r\n}\r\nexports.checkEmptyUserBook = checkEmptyUserBook;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI4NS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFnQixrQkFBa0I7SUFDaEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBYyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFnQixDQUFDO0lBQzdFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFnQixDQUFDO0lBQ3ZFLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLElBQUksV0FBVyxFQUFFO1FBQ2YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDNUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDekMsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBZ0IsQ0FBQztRQUM3RSxZQUFZLENBQUMsU0FBUyxHQUFHLG1DQUFtQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQztBQVhELGdEQVdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2NoZWNrRW1wdHlVc2VyQm9vay50cz9kYmY0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjaGVja0VtcHR5VXNlckJvb2soKSB7XHJcbiAgY29uc3QgY2FyZHMgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbDxIVE1MRWxlbWVudD4oJy5jYXJkJyldO1xyXG4gIGNvbnN0IGF1ZGlvQ2FsbEJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdWRpb2NhbGwtYnRuJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgY29uc3Qgc3ByaW50QnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NwcmludC1idG4nKSBhcyBIVE1MRWxlbWVudDtcclxuICBjb25zdCBpc0VtcHR5UGFnZSA9IGNhcmRzLmV2ZXJ5KChjYXJkKSA9PiBjYXJkLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyk7XHJcbiAgaWYgKGlzRW1wdHlQYWdlKSB7XHJcbiAgICBhdWRpb0NhbGxCdG4uY2xhc3NMaXN0LmFkZCgnYnRuX19kaXNhYmxlZCcpO1xyXG4gICAgc3ByaW50QnRuLmNsYXNzTGlzdC5hZGQoJ2J0bl9fZGlzYWJsZWQnKTtcclxuICAgIGNvbnN0IGNhcmRzV3JhcGVwciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkcy13cmFwcGVyJykgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICBjYXJkc1dyYXBlcHIuaW5uZXJIVE1MID0gJ9CSINCy0LDRiNC10Lwg0YPRh9C10LHQvdC40LrQtSDQvdC10YIg0KHQu9C+0LbQvdGL0YUg0YHQu9C+0LInO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6285\n")},9103:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.checkPageAllDone = void 0;\r\nconst constants_1 = __webpack_require__(5004);\r\nfunction checkPageAllDone() {\r\n    // const cards: HTMLElement[] = [...document.querySelectorAll('.card')] as HTMLElement[];\r\n    const pageWrapper = document.querySelector('.text-book-page');\r\n    const pageNumber = document.querySelector('.page-input');\r\n    const audioCallBtn = document.querySelector('[href=\"/book/audiocall\"]');\r\n    const sprintBtn = document.querySelector('[href=\"/book/sprint\"]');\r\n    const hardBtns = document.querySelectorAll('.hard-word-btn');\r\n    const learnBtns = document.querySelectorAll('.learn-word-btn');\r\n    const conditionEvery = ((learnBtns.length + hardBtns.length) === 20\r\n        && learnBtns.length > 0);\r\n    if ((learnBtns.length === constants_1.WORDS_PER_PAGE) || conditionEvery) {\r\n        pageWrapper.style.border = '3px solid #332a7c';\r\n        pageNumber.style.border = '3px solid #332a7c';\r\n        if (audioCallBtn)\r\n            audioCallBtn.classList.add('btn__disabled');\r\n        if (sprintBtn)\r\n            sprintBtn.classList.add('btn__disabled');\r\n    }\r\n    else {\r\n        pageWrapper.style.border = '3px solid #ffffff';\r\n        if (pageNumber) {\r\n            pageNumber.style.border = 'none';\r\n        }\r\n        if (audioCallBtn)\r\n            audioCallBtn.classList.remove('btn__disabled');\r\n        if (sprintBtn)\r\n            sprintBtn.classList.remove('btn__disabled');\r\n    }\r\n}\r\nexports.checkPageAllDone = checkPageAllDone;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEwMy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBNkM7QUFFN0MsU0FBZ0IsZ0JBQWdCO0lBQzlCLHlGQUF5RjtJQUN6RixNQUFNLFdBQVcsR0FBZ0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBZ0IsQ0FBQztJQUMxRixNQUFNLFVBQVUsR0FBcUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQXFCLENBQUM7SUFDL0YsTUFBTSxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUNsRSxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQWEsQ0FBQztJQUN6RSxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQWEsQ0FBQztJQUMzRSxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtXQUMvRCxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxLQUFLLDBCQUFjLENBQUMsSUFBSSxjQUFjLEVBQUU7UUFDM0QsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsbUJBQW1CLENBQUM7UUFDL0MsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsbUJBQW1CLENBQUM7UUFDOUMsSUFBSSxZQUFZO1lBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUQsSUFBSSxTQUFTO1lBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDekQ7U0FBTTtRQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDO1FBQy9DLElBQUksVUFBVSxFQUFFO1lBQ2QsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ2xDO1FBQ0QsSUFBSSxZQUFZO1lBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakUsSUFBSSxTQUFTO1lBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7S0FDNUQ7QUFDSCxDQUFDO0FBdkJELDRDQXVCQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy91dGlscy9jaGVja1BhZ2VBbGxEb25lLnRzPzZlYTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgV09SRFNfUEVSX1BBR0UgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tQYWdlQWxsRG9uZSgpIHtcclxuICAvLyBjb25zdCBjYXJkczogSFRNTEVsZW1lbnRbXSA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2FyZCcpXSBhcyBIVE1MRWxlbWVudFtdO1xyXG4gIGNvbnN0IHBhZ2VXcmFwcGVyOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0LWJvb2stcGFnZScpIGFzIEhUTUxFbGVtZW50O1xyXG4gIGNvbnN0IHBhZ2VOdW1iZXI6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZS1pbnB1dCcpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgY29uc3QgYXVkaW9DYWxsQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2hyZWY9XCIvYm9vay9hdWRpb2NhbGxcIl0nKTtcclxuICBjb25zdCBzcHJpbnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbaHJlZj1cIi9ib29rL3NwcmludFwiXScpO1xyXG4gIGNvbnN0IGhhcmRCdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhcmQtd29yZC1idG4nKSBhcyBOb2RlTGlzdDtcclxuICBjb25zdCBsZWFybkJ0bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGVhcm4td29yZC1idG4nKSBhcyBOb2RlTGlzdDtcclxuICBjb25zdCBjb25kaXRpb25FdmVyeSA9ICgobGVhcm5CdG5zLmxlbmd0aCArIGhhcmRCdG5zLmxlbmd0aCkgPT09IDIwXHJcbiAgICYmIGxlYXJuQnRucy5sZW5ndGggPiAwKTtcclxuICBpZiAoKGxlYXJuQnRucy5sZW5ndGggPT09IFdPUkRTX1BFUl9QQUdFKSB8fCBjb25kaXRpb25FdmVyeSkge1xyXG4gICAgcGFnZVdyYXBwZXIuc3R5bGUuYm9yZGVyID0gJzNweCBzb2xpZCAjMzMyYTdjJztcclxuICAgIHBhZ2VOdW1iZXIuc3R5bGUuYm9yZGVyID0gJzNweCBzb2xpZCAjMzMyYTdjJztcclxuICAgIGlmIChhdWRpb0NhbGxCdG4pIGF1ZGlvQ2FsbEJ0bi5jbGFzc0xpc3QuYWRkKCdidG5fX2Rpc2FibGVkJyk7XHJcbiAgICBpZiAoc3ByaW50QnRuKSBzcHJpbnRCdG4uY2xhc3NMaXN0LmFkZCgnYnRuX19kaXNhYmxlZCcpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwYWdlV3JhcHBlci5zdHlsZS5ib3JkZXIgPSAnM3B4IHNvbGlkICNmZmZmZmYnO1xyXG4gICAgaWYgKHBhZ2VOdW1iZXIpIHtcclxuICAgICAgcGFnZU51bWJlci5zdHlsZS5ib3JkZXIgPSAnbm9uZSc7XHJcbiAgICB9XHJcbiAgICBpZiAoYXVkaW9DYWxsQnRuKSBhdWRpb0NhbGxCdG4uY2xhc3NMaXN0LnJlbW92ZSgnYnRuX19kaXNhYmxlZCcpO1xyXG4gICAgaWYgKHNwcmludEJ0bikgc3ByaW50QnRuLmNsYXNzTGlzdC5yZW1vdmUoJ2J0bl9fZGlzYWJsZWQnKTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9103\n")},5004:(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.EMAIL_REGEX = exports.GAMES_DATA_TEXT = exports.WORDS_DATA_TEXT = exports.USER_AUTH_WRAPPER = exports.USER_ICON = exports.LOGIN_BTN = exports.REGISTER_BTN = exports.WORDS_PER_PAGE = exports.MAX_PAGE_NUMBER = exports.LEVELS_OF_TEXTBOOK = exports.REFRESHTOKEN_LIFETIME_IN_HOURS = exports.TOKEN_LIFETIME_IN_HOURS = exports.APP_LINK = exports.BASE_LINK = void 0;\r\nexports.BASE_LINK = 'https://rss-learnwords.herokuapp.com';\r\nexports.APP_LINK = 'http://localhost:8000';\r\nexports.TOKEN_LIFETIME_IN_HOURS = 3;\r\nexports.REFRESHTOKEN_LIFETIME_IN_HOURS = 4;\r\nexports.LEVELS_OF_TEXTBOOK = 7;\r\nexports.MAX_PAGE_NUMBER = 30;\r\nexports.WORDS_PER_PAGE = 20;\r\n// Header Auth buttons and div\r\nexports.REGISTER_BTN = document.getElementById('register-btn');\r\nexports.LOGIN_BTN = document.getElementById('login-btn');\r\nexports.USER_ICON = document.getElementById('user-icon');\r\nexports.USER_AUTH_WRAPPER = document.querySelector('.auth');\r\n// Statistic data\r\nexports.WORDS_DATA_TEXT = ['новые слова', 'изученные слова', 'правильные ответы'];\r\nexports.GAMES_DATA_TEXT = ['новые слова', 'правильные ответы', 'самая длинная серия'];\r\n// Forms validation\r\nexports.EMAIL_REGEX = /^[A-Za-z0-9_!#$%&'*+\\\\/=?`{|}~^.-]+@[A-Za-z0-9.-]+$/gm;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAwNC5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBYSxpQkFBUyxHQUFXLHNDQUFzQyxDQUFDO0FBQzNELGdCQUFRLEdBQVcsdUJBQXVCLENBQUM7QUFDM0MsK0JBQXVCLEdBQVcsQ0FBQyxDQUFDO0FBQ3BDLHNDQUE4QixHQUFXLENBQUMsQ0FBQztBQUMzQywwQkFBa0IsR0FBVyxDQUFDLENBQUM7QUFDL0IsdUJBQWUsR0FBVyxFQUFFLENBQUM7QUFDN0Isc0JBQWMsR0FBVyxFQUFFLENBQUM7QUFFekMsOEJBQThCO0FBQ2pCLG9CQUFZLEdBQXNCLFFBQVEsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFzQixDQUFDO0FBQy9GLGlCQUFTLEdBQXNCLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFzQixDQUFDO0FBQ3pGLGlCQUFTLEdBQWdCLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFnQixDQUFDO0FBQzdFLHlCQUFpQixHQUFnQixRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBZ0IsQ0FBQztBQUU3RixpQkFBaUI7QUFDSix1QkFBZSxHQUFhLENBQUMsYUFBYSxFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDcEYsdUJBQWUsR0FBYSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBRXJHLG1CQUFtQjtBQUNOLG1CQUFXLEdBQVcsdURBQXVELENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvdXRpbHMvY29uc3RhbnRzLnRzP2MzODkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEJBU0VfTElOSzogc3RyaW5nID0gJ2h0dHBzOi8vcnNzLWxlYXJud29yZHMuaGVyb2t1YXBwLmNvbSc7XHJcbmV4cG9ydCBjb25zdCBBUFBfTElOSzogc3RyaW5nID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCc7XHJcbmV4cG9ydCBjb25zdCBUT0tFTl9MSUZFVElNRV9JTl9IT1VSUzogbnVtYmVyID0gMztcclxuZXhwb3J0IGNvbnN0IFJFRlJFU0hUT0tFTl9MSUZFVElNRV9JTl9IT1VSUzogbnVtYmVyID0gNDtcclxuZXhwb3J0IGNvbnN0IExFVkVMU19PRl9URVhUQk9PSzogbnVtYmVyID0gNztcclxuZXhwb3J0IGNvbnN0IE1BWF9QQUdFX05VTUJFUjogbnVtYmVyID0gMzA7XHJcbmV4cG9ydCBjb25zdCBXT1JEU19QRVJfUEFHRTogbnVtYmVyID0gMjA7XHJcblxyXG4vLyBIZWFkZXIgQXV0aCBidXR0b25zIGFuZCBkaXZcclxuZXhwb3J0IGNvbnN0IFJFR0lTVEVSX0JUTjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVnaXN0ZXItYnRuJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbmV4cG9ydCBjb25zdCBMT0dJTl9CVE46IEhUTUxCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvZ2luLWJ0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xyXG5leHBvcnQgY29uc3QgVVNFUl9JQ09OOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VyLWljb24nKSBhcyBIVE1MRWxlbWVudDtcclxuZXhwb3J0IGNvbnN0IFVTRVJfQVVUSF9XUkFQUEVSOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdXRoJykgYXMgSFRNTEVsZW1lbnQ7XHJcblxyXG4vLyBTdGF0aXN0aWMgZGF0YVxyXG5leHBvcnQgY29uc3QgV09SRFNfREFUQV9URVhUOiBzdHJpbmdbXSA9IFsn0L3QvtCy0YvQtSDRgdC70L7QstCwJywgJ9C40LfRg9GH0LXQvdC90YvQtSDRgdC70L7QstCwJywgJ9C/0YDQsNCy0LjQu9GM0L3Ri9C1INC+0YLQstC10YLRiyddO1xyXG5leHBvcnQgY29uc3QgR0FNRVNfREFUQV9URVhUOiBzdHJpbmdbXSA9IFsn0L3QvtCy0YvQtSDRgdC70L7QstCwJywgJ9C/0YDQsNCy0LjQu9GM0L3Ri9C1INC+0YLQstC10YLRiycsICfRgdCw0LzQsNGPINC00LvQuNC90L3QsNGPINGB0LXRgNC40Y8nXTtcclxuXHJcbi8vIEZvcm1zIHZhbGlkYXRpb25cclxuZXhwb3J0IGNvbnN0IEVNQUlMX1JFR0VYOiBSZWdFeHAgPSAvXltBLVphLXowLTlfISMkJSYnKitcXFxcLz0/YHt8fX5eLi1dK0BbQS1aYS16MC05Li1dKyQvZ207XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5004\n")},1682:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.convertAggregatedWordToWord = void 0;\r\nconst convertAggregatedWordToWord = (aggrWord) => ({\r\n    id: aggrWord._id,\r\n    group: aggrWord.group,\r\n    page: aggrWord.page,\r\n    word: aggrWord.word,\r\n    image: aggrWord.image,\r\n    audio: aggrWord.audio,\r\n    audioMeaning: aggrWord.audioMeaning,\r\n    audioExample: aggrWord.audioExample,\r\n    textMeaning: aggrWord.textMeaning,\r\n    textExample: aggrWord.textExample,\r\n    transcription: aggrWord.transcription,\r\n    wordTranslate: aggrWord.wordTranslate,\r\n    textMeaningTranslate: aggrWord.textMeaningTranslate,\r\n    textExampleTranslate: aggrWord.textExampleTranslate,\r\n});\r\nexports.convertAggregatedWordToWord = convertAggregatedWordToWord;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4Mi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFHTyxNQUFNLDJCQUEyQixHQUFHLENBQUMsUUFBNEIsRUFBUSxFQUFFLENBQUMsQ0FBQztJQUNsRixFQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUc7SUFDaEIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO0lBQ3JCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtJQUNuQixJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUk7SUFDbkIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLO0lBQ3JCLEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSztJQUNyQixZQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVk7SUFDbkMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxZQUFZO0lBQ25DLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVztJQUNqQyxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVc7SUFDakMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxhQUFhO0lBQ3JDLGFBQWEsRUFBRSxRQUFRLENBQUMsYUFBYTtJQUNyQyxvQkFBb0IsRUFBRSxRQUFRLENBQUMsb0JBQW9CO0lBQ25ELG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxvQkFBb0I7Q0FDcEQsQ0FBQyxDQUFDO0FBZlUsbUNBQTJCLCtCQWVyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy91dGlscy9jb252ZXJ0QWdncmVnYXRlZFdvcmRUb1dvcmQudHM/NWE0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xyXG5pbXBvcnQgeyBVc2VyQWdncmVnYXRlZFdvcmQsIFdvcmQgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcclxuXHJcbmV4cG9ydCBjb25zdCBjb252ZXJ0QWdncmVnYXRlZFdvcmRUb1dvcmQgPSAoYWdncldvcmQ6IFVzZXJBZ2dyZWdhdGVkV29yZCk6IFdvcmQgPT4gKHtcclxuICBpZDogYWdncldvcmQuX2lkLFxyXG4gIGdyb3VwOiBhZ2dyV29yZC5ncm91cCxcclxuICBwYWdlOiBhZ2dyV29yZC5wYWdlLFxyXG4gIHdvcmQ6IGFnZ3JXb3JkLndvcmQsXHJcbiAgaW1hZ2U6IGFnZ3JXb3JkLmltYWdlLFxyXG4gIGF1ZGlvOiBhZ2dyV29yZC5hdWRpbyxcclxuICBhdWRpb01lYW5pbmc6IGFnZ3JXb3JkLmF1ZGlvTWVhbmluZyxcclxuICBhdWRpb0V4YW1wbGU6IGFnZ3JXb3JkLmF1ZGlvRXhhbXBsZSxcclxuICB0ZXh0TWVhbmluZzogYWdncldvcmQudGV4dE1lYW5pbmcsXHJcbiAgdGV4dEV4YW1wbGU6IGFnZ3JXb3JkLnRleHRFeGFtcGxlLFxyXG4gIHRyYW5zY3JpcHRpb246IGFnZ3JXb3JkLnRyYW5zY3JpcHRpb24sXHJcbiAgd29yZFRyYW5zbGF0ZTogYWdncldvcmQud29yZFRyYW5zbGF0ZSxcclxuICB0ZXh0TWVhbmluZ1RyYW5zbGF0ZTogYWdncldvcmQudGV4dE1lYW5pbmdUcmFuc2xhdGUsXHJcbiAgdGV4dEV4YW1wbGVUcmFuc2xhdGU6IGFnZ3JXb3JkLnRleHRFeGFtcGxlVHJhbnNsYXRlLFxyXG59KTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1682\n')},9856:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports["default"] = (obj) => {\r\n    const node = document.createElement(obj.tag);\r\n    if (obj.classes) {\r\n        node.classList.add(...obj.classes);\r\n    }\r\n    if (obj.atributesAdnValues) {\r\n        obj.atributesAdnValues\r\n            .forEach((atributeAndValue) => node.setAttribute(atributeAndValue[0], atributeAndValue[1]));\r\n    }\r\n    if (obj.inner) {\r\n        node.innerHTML = obj.inner;\r\n    }\r\n    return node;\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg1Ni5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLHFCQUFlLENBQXdDLEdBS3RELEVBQWUsRUFBRTtJQUNoQixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU3QyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNwQztJQUNELElBQUksR0FBRyxDQUFDLGtCQUFrQixFQUFFO1FBQzFCLEdBQUcsQ0FBQyxrQkFBa0I7YUFDbkIsT0FBTyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9GO0lBQ0QsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0tBQzVCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvdXRpbHMvY3JlYXRlTm9kZS50cz9iZWUwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IDxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPihvYmo6IHtcclxuICB0YWc6IEs7XHJcbiAgY2xhc3Nlcz86IHN0cmluZ1tdO1xyXG4gIGF0cmlidXRlc0FkblZhbHVlcz86IFtzdHJpbmcsIHN0cmluZ11bXTtcclxuICBpbm5lcj86IHN0cmluZztcclxufSk6IEhUTUxFbGVtZW50ID0+IHtcclxuICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChvYmoudGFnKTtcclxuXHJcbiAgaWYgKG9iai5jbGFzc2VzKSB7XHJcbiAgICBub2RlLmNsYXNzTGlzdC5hZGQoLi4ub2JqLmNsYXNzZXMpO1xyXG4gIH1cclxuICBpZiAob2JqLmF0cmlidXRlc0FkblZhbHVlcykge1xyXG4gICAgb2JqLmF0cmlidXRlc0FkblZhbHVlc1xyXG4gICAgICAuZm9yRWFjaCgoYXRyaWJ1dGVBbmRWYWx1ZSkgPT4gbm9kZS5zZXRBdHRyaWJ1dGUoYXRyaWJ1dGVBbmRWYWx1ZVswXSwgYXRyaWJ1dGVBbmRWYWx1ZVsxXSkpO1xyXG4gIH1cclxuICBpZiAob2JqLmlubmVyKSB7XHJcbiAgICBub2RlLmlubmVySFRNTCA9IG9iai5pbm5lcjtcclxuICB9XHJcbiAgcmV0dXJuIG5vZGU7XHJcbn07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9856\n')},8346:(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.findCorrectAnswPercent = void 0;\r\nfunction findCorrectAnswPercent(corr, incorr) {\r\n    if (corr || incorr) {\r\n        const answers = Math.round((corr / (corr + incorr)) * 100);\r\n        return `${answers}%`;\r\n    }\r\n    return '0';\r\n}\r\nexports.findCorrectAnswPercent = findCorrectAnswPercent;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM0Ni5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFnQixzQkFBc0IsQ0FBQyxJQUFZLEVBQUUsTUFBYztJQUNqRSxJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7UUFDbEIsTUFBTSxPQUFPLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sR0FBRyxPQUFPLEdBQUcsQ0FBQztLQUN0QjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQU5ELHdEQU1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2ZpbmRDb3JyZWN0QW5zd2Vyc1BlcmNlbnQudHM/YWFmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZmluZENvcnJlY3RBbnN3UGVyY2VudChjb3JyOiBudW1iZXIsIGluY29ycjogbnVtYmVyKTogc3RyaW5nIHtcclxuICBpZiAoY29yciB8fCBpbmNvcnIpIHtcclxuICAgIGNvbnN0IGFuc3dlcnM6IG51bWJlciA9IE1hdGgucm91bmQoKGNvcnIgLyAoY29yciArIGluY29ycikpICogMTAwKTtcclxuICAgIHJldHVybiBgJHthbnN3ZXJzfSVgO1xyXG4gIH1cclxuICByZXR1cm4gJzAnO1xyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8346\n")},9593:(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.makeFirslLetterUpperCase = exports.getRandomIntInclusive = exports.createHTMLElement = exports.makeUrl = exports.generateQueryString = void 0;\r\nconst generateQueryString = (queryParam) => `?${Object.keys(queryParam)\r\n    .map((key) => `${key}=${queryParam[key]}`)\r\n    .join('&')}`;\r\nexports.generateQueryString = generateQueryString;\r\nconst makeUrl = (base, endpoint, queryParam) => {\r\n    const paramString = queryParam ? (0, exports.generateQueryString)(queryParam) : '';\r\n    return new URL(`${endpoint}${paramString}`, base);\r\n};\r\nexports.makeUrl = makeUrl;\r\nfunction createHTMLElement(tag, classes, atributesAdnValues, content) {\r\n    const node = document.createElement(tag);\r\n    if (classes) {\r\n        node.classList.add(...classes);\r\n    }\r\n    if (atributesAdnValues) {\r\n        atributesAdnValues.forEach((atributeAndValue) => {\r\n            node.setAttribute(atributeAndValue[0], atributeAndValue[1]);\r\n        });\r\n    }\r\n    if (content) {\r\n        node.innerHTML = content;\r\n    }\r\n    return node;\r\n}\r\nexports.createHTMLElement = createHTMLElement;\r\nfunction getRandomIntInclusive(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\nexports.getRandomIntInclusive = getRandomIntInclusive;\r\nfunction makeFirslLetterUpperCase(string) {\r\n    const firstLetter = string[0].toUpperCase();\r\n    const rest = string.slice(1).toLowerCase();\r\n    const res = firstLetter + rest;\r\n    return res;\r\n}\r\nexports.makeFirslLetterUpperCase = makeFirslLetterUpperCase;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTU5My5qcyIsIm1hcHBpbmdzIjoiOzs7QUFFTyxNQUFNLG1CQUFtQixHQUFHLENBQUMsVUFBa0MsRUFBVSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztLQUMzRyxHQUFHLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0tBQ2pELElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0FBRkYsMkJBQW1CLHVCQUVqQjtBQUVSLE1BQU0sT0FBTyxHQUFHLENBQ3JCLElBQVksRUFDWixRQUFrQixFQUNsQixVQUFtQyxFQUM5QixFQUFFO0lBQ1AsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQywrQkFBbUIsRUFBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3RFLE9BQU8sSUFBSSxHQUFHLENBQUMsR0FBRyxRQUFRLEdBQUcsV0FBVyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBUFcsZUFBTyxXQU9sQjtBQUVGLFNBQWdCLGlCQUFpQixDQUMvQixHQUFXLEVBQ1gsT0FBa0IsRUFDbEIsa0JBQXVDLEVBQ3ZDLE9BQWdCO0lBRWhCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsSUFBSSxPQUFPLEVBQUU7UUFDWCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0tBQ2hDO0lBQ0QsSUFBSSxrQkFBa0IsRUFBRTtRQUN0QixrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQzlDLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsSUFBSSxPQUFPLEVBQUU7UUFDWCxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztLQUMxQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQW5CRCw4Q0FtQkM7QUFFRCxTQUFnQixxQkFBcUIsQ0FBQyxHQUFXLEVBQUUsR0FBVztJQUM1RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztBQUMzRCxDQUFDO0FBRkQsc0RBRUM7QUFFRCxTQUFnQix3QkFBd0IsQ0FBQyxNQUFjO0lBQ3JELE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzNDLE1BQU0sR0FBRyxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDL0IsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBTEQsNERBS0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvdXRpbHMvZnVuY3Rpb25zLnRzPzMyZjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW5kcG9pbnQgfSBmcm9tICcuLi90eXBlcy9lbnVtcyc7XHJcblxyXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVRdWVyeVN0cmluZyA9IChxdWVyeVBhcmFtOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogc3RyaW5nID0+IGA/JHtPYmplY3Qua2V5cyhxdWVyeVBhcmFtKVxyXG4gIC5tYXAoKGtleTogc3RyaW5nKSA9PiBgJHtrZXl9PSR7cXVlcnlQYXJhbVtrZXldfWApXHJcbiAgLmpvaW4oJyYnKX1gO1xyXG5cclxuZXhwb3J0IGNvbnN0IG1ha2VVcmwgPSAoXHJcbiAgYmFzZTogc3RyaW5nLFxyXG4gIGVuZHBvaW50OiBFbmRwb2ludCxcclxuICBxdWVyeVBhcmFtPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcclxuKTogVVJMID0+IHtcclxuICBjb25zdCBwYXJhbVN0cmluZyA9IHF1ZXJ5UGFyYW0gPyBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHF1ZXJ5UGFyYW0pIDogJyc7XHJcbiAgcmV0dXJuIG5ldyBVUkwoYCR7ZW5kcG9pbnR9JHtwYXJhbVN0cmluZ31gLCBiYXNlKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIVE1MRWxlbWVudChcclxuICB0YWc6IHN0cmluZyxcclxuICBjbGFzc2VzPzogc3RyaW5nW10sXHJcbiAgYXRyaWJ1dGVzQWRuVmFsdWVzPzogW3N0cmluZywgc3RyaW5nXVtdLFxyXG4gIGNvbnRlbnQ/OiBzdHJpbmcsXHJcbik6IEhUTUxFbGVtZW50IHtcclxuICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xyXG4gIGlmIChjbGFzc2VzKSB7XHJcbiAgICBub2RlLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlcyk7XHJcbiAgfVxyXG4gIGlmIChhdHJpYnV0ZXNBZG5WYWx1ZXMpIHtcclxuICAgIGF0cmlidXRlc0FkblZhbHVlcy5mb3JFYWNoKChhdHJpYnV0ZUFuZFZhbHVlKSA9PiB7XHJcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0cmlidXRlQW5kVmFsdWVbMF0sIGF0cmlidXRlQW5kVmFsdWVbMV0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGlmIChjb250ZW50KSB7XHJcbiAgICBub2RlLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcbiAgfVxyXG4gIHJldHVybiBub2RlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmFuZG9tSW50SW5jbHVzaXZlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlRmlyc2xMZXR0ZXJVcHBlckNhc2Uoc3RyaW5nOiBzdHJpbmcpIHtcclxuICBjb25zdCBmaXJzdExldHRlciA9IHN0cmluZ1swXS50b1VwcGVyQ2FzZSgpO1xyXG4gIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcclxuICBjb25zdCByZXMgPSBmaXJzdExldHRlciArIHJlc3Q7XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9593\n")},127:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.randomInteger = void 0;\r\nfunction randomInteger(min, max) {\r\n    return Math.round(min - 0.5 + Math.random() * (max - min + 1));\r\n}\r\nexports.randomInteger = randomInteger;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLFNBQWdCLGFBQWEsQ0FBQyxHQUFXLEVBQUUsR0FBVztJQUNwRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakUsQ0FBQztBQUZELHNDQUVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcnMtbGFuZy8uL3NyYy9jb21wb25lbnRzL3V0aWxzL2dldFJhbmRvbUludGVnZXIudHM/Y2ZiZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gcmFuZG9tSW50ZWdlcihtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcclxuICByZXR1cm4gTWF0aC5yb3VuZChtaW4gLSAwLjUgKyBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///127\n')},9721:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.getRandomWordByGroup = exports.getRandomWordsByGroup = void 0;\r\nconst api_1 = __webpack_require__(1341);\r\nconst getRandomInteger_1 = __webpack_require__(127);\r\nconst shuffleArray_1 = __webpack_require__(4879);\r\nconst MAX_PAGE_NUMBER = 29;\r\nasync function getRandomWordsByGroup(group, count) {\r\n    const randomPageNumber = (0, getRandomInteger_1.randomInteger)(1, MAX_PAGE_NUMBER);\r\n    const words = await api_1.api.getWords({ group, page: String(randomPageNumber) });\r\n    const randomWords = (0, shuffleArray_1.shuffleArray)(words).slice(0, count);\r\n    return randomWords;\r\n}\r\nexports.getRandomWordsByGroup = getRandomWordsByGroup;\r\nasync function getRandomWordByGroup(group) {\r\n    return (await getRandomWordsByGroup(group, 1))[0];\r\n}\r\nexports.getRandomWordByGroup = getRandomWordByGroup;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcyMS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSx3Q0FBbUM7QUFDbkMsb0RBQW1EO0FBQ25ELGlEQUE4QztBQUU5QyxNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFFcEIsS0FBSyxVQUFVLHFCQUFxQixDQUFDLEtBQWEsRUFBRSxLQUFhO0lBQ3RFLE1BQU0sZ0JBQWdCLEdBQUcsb0NBQWEsRUFBQyxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDM0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxTQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUUsTUFBTSxXQUFXLEdBQUcsK0JBQVksRUFBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hELE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFMRCxzREFLQztBQUVNLEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxLQUFhO0lBQ3RELE9BQU8sQ0FBQyxNQUFNLHFCQUFxQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFGRCxvREFFQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvY29tcG9uZW50cy91dGlscy9nZXRSYW5kb21Xb3Jkcy50cz81NTJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSB9IGZyb20gJy4uL01vZGVsL2FwaSc7XHJcbmltcG9ydCB7IHJhbmRvbUludGVnZXIgfSBmcm9tICcuL2dldFJhbmRvbUludGVnZXInO1xyXG5pbXBvcnQgeyBzaHVmZmxlQXJyYXkgfSBmcm9tICcuL3NodWZmbGVBcnJheSc7XHJcblxyXG5jb25zdCBNQVhfUEFHRV9OVU1CRVIgPSAyOTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSYW5kb21Xb3Jkc0J5R3JvdXAoZ3JvdXA6IHN0cmluZywgY291bnQ6IG51bWJlcikge1xyXG4gIGNvbnN0IHJhbmRvbVBhZ2VOdW1iZXIgPSByYW5kb21JbnRlZ2VyKDEsIE1BWF9QQUdFX05VTUJFUik7XHJcbiAgY29uc3Qgd29yZHMgPSBhd2FpdCBhcGkuZ2V0V29yZHMoeyBncm91cCwgcGFnZTogU3RyaW5nKHJhbmRvbVBhZ2VOdW1iZXIpIH0pO1xyXG4gIGNvbnN0IHJhbmRvbVdvcmRzID0gc2h1ZmZsZUFycmF5KHdvcmRzKS5zbGljZSgwLCBjb3VudCk7XHJcbiAgcmV0dXJuIHJhbmRvbVdvcmRzO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmFuZG9tV29yZEJ5R3JvdXAoZ3JvdXA6IHN0cmluZykge1xyXG4gIHJldHVybiAoYXdhaXQgZ2V0UmFuZG9tV29yZHNCeUdyb3VwKGdyb3VwLCAxKSlbMF07XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9721\n')},8105:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.makeDailyStat = void 0;\r\nfunction makeDailyStat(stat) {\r\n    const dates = Object.keys(stat.optional.words);\r\n    const obj = dates.reduce((acc, currentDate) => {\r\n        acc[currentDate] = {};\r\n        acc[currentDate].games = { audiocall: {}, sprint: {} };\r\n        acc[currentDate].words = stat.optional.words[currentDate];\r\n        acc[currentDate].games.audiocall = stat.optional.games.audiocall[currentDate];\r\n        acc[currentDate].games.sprint = stat.optional.games.sprint[currentDate];\r\n        return acc;\r\n    }, {});\r\n    const res = Object.entries(obj);\r\n    return res.reverse();\r\n}\r\nexports.makeDailyStat = makeDailyStat;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEwNS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFJQSxTQUFnQixhQUFhLENBQUMsSUFBZTtJQUMzQyxNQUFNLEtBQUssR0FBYSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekQsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxXQUFtQixFQUFFLEVBQUU7UUFDcEQsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQWtCLENBQUM7UUFDdEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFtQixFQUFFLE1BQU0sRUFBRSxFQUFtQixFQUFFLENBQUM7UUFDekYsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRCxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDOUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hFLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLEVBQWUsQ0FBQyxDQUFDO0lBQ3BCLE1BQU0sR0FBRyxHQUE2QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQWdCLENBQUMsQ0FBQztJQUN2RSxPQUFPLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN2QixDQUFDO0FBWkQsc0NBWUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvdXRpbHMvbWFrZURhaWx5U3RhdE9iamVjdC50cz9iYzg2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgU3RhdGlzdGljLCBEYWlseVN0YXQsIERhaWx5U3RhdE9iaiwgR2FtZVN0YXRpc3RpYyxcclxufSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlRGFpbHlTdGF0KHN0YXQ6IFN0YXRpc3RpYykge1xyXG4gIGNvbnN0IGRhdGVzOiBzdHJpbmdbXSA9IE9iamVjdC5rZXlzKHN0YXQub3B0aW9uYWwud29yZHMpO1xyXG4gIGNvbnN0IG9iaiA9IGRhdGVzLnJlZHVjZSgoYWNjLCBjdXJyZW50RGF0ZTogc3RyaW5nKSA9PiB7XHJcbiAgICBhY2NbY3VycmVudERhdGVdID0ge30gYXMgRGFpbHlTdGF0T2JqO1xyXG4gICAgYWNjW2N1cnJlbnREYXRlXS5nYW1lcyA9IHsgYXVkaW9jYWxsOiB7fSBhcyBHYW1lU3RhdGlzdGljLCBzcHJpbnQ6IHt9IGFzIEdhbWVTdGF0aXN0aWMgfTtcclxuICAgIGFjY1tjdXJyZW50RGF0ZV0ud29yZHMgPSBzdGF0Lm9wdGlvbmFsLndvcmRzW2N1cnJlbnREYXRlXTtcclxuICAgIGFjY1tjdXJyZW50RGF0ZV0uZ2FtZXMuYXVkaW9jYWxsID0gc3RhdC5vcHRpb25hbC5nYW1lcy5hdWRpb2NhbGxbY3VycmVudERhdGVdO1xyXG4gICAgYWNjW2N1cnJlbnREYXRlXS5nYW1lcy5zcHJpbnQgPSBzdGF0Lm9wdGlvbmFsLmdhbWVzLnNwcmludFtjdXJyZW50RGF0ZV07XHJcbiAgICByZXR1cm4gYWNjO1xyXG4gIH0sIHt9IGFzIERhaWx5U3RhdCk7XHJcbiAgY29uc3QgcmVzOiBbc3RyaW5nLCBEYWlseVN0YXRPYmpdW10gPSBPYmplY3QuZW50cmllcyhvYmogYXMgRGFpbHlTdGF0KTtcclxuICByZXR1cm4gcmVzLnJldmVyc2UoKTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8105\n')},4879:(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.shuffleArray = void 0;\r\nfunction shuffleArray(array) {\r\n    const shuffledArray = [...array].sort(() => Math.random() - 0.5);\r\n    return shuffledArray;\r\n}\r\nexports.shuffleArray = shuffleArray;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg3OS5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxTQUFnQixZQUFZLENBQUksS0FBVTtJQUN4QyxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNqRSxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDO0FBSEQsb0NBR0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ycy1sYW5nLy4vc3JjL2NvbXBvbmVudHMvdXRpbHMvc2h1ZmZsZUFycmF5LnRzPzgwNDkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHNodWZmbGVBcnJheTxUPihhcnJheTogVFtdKSB7XHJcbiAgY29uc3Qgc2h1ZmZsZWRBcnJheSA9IFsuLi5hcnJheV0uc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuICByZXR1cm4gc2h1ZmZsZWRBcnJheTtcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4879\n')},3607:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("var __webpack_unused_export__;\n\r\n__webpack_unused_export__ = ({ value: true });\r\nconst Controller_1 = __webpack_require__(2962);\r\n__webpack_require__(3690);\r\nconsole.log('Lets go');\r\nconst controller = new Controller_1.Controller();\r\ncontroller.initRouter();\r\ncontroller.initApp();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYwNy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBZ0U7QUFDaEUsMEJBQXVCO0FBRXZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFdkIsTUFBTSxVQUFVLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7QUFFcEMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ3hCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JzLWxhbmcvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi9jb21wb25lbnRzL2NvbnRyb2xsZXIvQ29udHJvbGxlcic7XHJcbmltcG9ydCAnLi9nbG9iYWwuc2Nzcyc7XHJcblxyXG5jb25zb2xlLmxvZygnTGV0cyBnbycpO1xyXG5cclxuY29uc3QgY29udHJvbGxlciA9IG5ldyBDb250cm9sbGVyKCk7XHJcblxyXG5jb250cm9sbGVyLmluaXRSb3V0ZXIoKTtcclxuY29udHJvbGxlci5pbml0QXBwKCk7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3607\n")},7933:t=>{"use strict";t.exports="data:image/svg+xml,%3Csvg width=%2750px%27 height=%2750px%27 viewBox=%270 0 1024 1024%27 xmlns=%27http://www.w3.org/2000/svg%27 class=%27icon-git%27%3E%3Cpath d=%27M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9a127.5 127.5 0 0 1 38.1 91v112.5c.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z%27%3E%3C/path%3E%3C/svg%3E"},4902:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/info-section2.jpg"},2182:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/main-bg1.jpg"},7193:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/branch.svg"},7769:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/circle-empty.svg"},5331:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/sound-default.svg"},8198:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/sound-mute.svg"},1340:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/sprint-bg-bottom.svg"},4e3:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/sprint-bg-left.svg"},8385:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/sprint-bg-right.svg"},1733:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/true-series.svg"},5680:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/voice-grey.svg"},8752:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/voice-hover.svg"},6096:(t,n,Q)=>{"use strict";t.exports=Q.p+"./assets/voice.svg"},8597:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"default\": () => (/* binding */ auto)\n});\n\n;// CONCATENATED MODULE: ./node_modules/chart.js/dist/chunks/helpers.segment.mjs\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\nfunction noop() {}\nconst uid = (function() {\n  let id = 0;\n  return function() {\n    return id++;\n  };\n}());\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\nconst isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : value / dimension;\nconst toDimension = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction clone$1(source) {\n  if (isArray(source)) {\n    return source.map(clone$1);\n  }\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone$1(source[keys[k]]);\n    }\n    return target;\n  }\n  return source;\n}\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone$1(sval);\n  }\n}\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n  if (!isObject(target)) {\n    return target;\n  }\n  options = options || {};\n  const merger = options.merger || _merger;\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n    if (!isObject(source)) {\n      continue;\n    }\n    const keys = Object.keys(source);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n  return target;\n}\nfunction mergeIf(target, source) {\n  return merge(target, source, {merger: _mergerIf});\n}\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone$1(sval);\n  }\n}\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\nconst keyResolvers = {\n  '': v => v,\n  x: o => o.x,\n  y: o => o.y\n};\nfunction resolveObjectKey(obj, key) {\n  const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n  return resolver(obj);\n}\nfunction _getKeyResolver(key) {\n  const keys = _splitKey(key);\n  return obj => {\n    for (const k of keys) {\n      if (k === '') {\n        break;\n      }\n      obj = obj && obj[k];\n    }\n    return obj;\n  };\n}\nfunction _splitKey(key) {\n  const parts = key.split('.');\n  const keys = [];\n  let tmp = '';\n  for (const part of parts) {\n    tmp += part;\n    if (tmp.endsWith('\\\\')) {\n      tmp = tmp.slice(0, -1) + '.';\n    } else {\n      keys.push(tmp);\n      tmp = '';\n    }\n  }\n  return keys;\n}\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value) => typeof value !== 'undefined';\nconst isFunction = (value) => typeof value === 'function';\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n};\nfunction _isClickEvent(e) {\n  return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n  if (angle < (-0.5 * PI)) {\n    angle += TAU;\n  }\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\nfunction _isBetween(value, start, end, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  return {lo, hi};\n}\nconst _lookupByKey = (table, key, value, last) =>\n  _lookup(table, value, last\n    ? index => table[index][key] <= value\n    : index => table[index][key] < value);\nconst _rlookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] >= value);\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n        return res;\n      }\n    });\n  });\n}\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n  if (listeners.length > 0) {\n    return;\n  }\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n  if (set.size === ilen) {\n    return items;\n  }\n  return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\nconst requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n  let ticking = false;\n  let args = [];\n  return function(...rest) {\n    args = updateArgs(rest);\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\nfunction debounce(fn, delay) {\n  let timeout;\n  return function(...args) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\nconst _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\nfunction _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        _lookupByKey(_parsed, iScale.axis, min).lo,\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        _lookupByKey(_parsed, iScale.axis, max, true).hi + 1,\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n  return {start, count};\n}\nfunction _scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nconst atEdge = (t) => t === 0 || t === 1;\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack(t) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n  easeInOutBounce: t => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n};\n\n/*!\n * @kurkle/color v0.2.1\n * https://github.com/kurkle/color#readme\n * (c) 2022 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nfunction isPatternOrGradient(value) {\n  if (value && typeof value === 'object') {\n    const type = value.toString();\n    return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n  }\n  return false;\n}\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n  return merge(getScope$1(root, ''), scope);\n}\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true,\n      includeInvisible: false\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.drawActiveElementsOnTop = true;\n    this.describe(_descriptors);\n  }\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n}\nvar defaults = new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n});\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n  ctx.restore();\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n  drawPointLegend(ctx, options, x, y, null);\n}\nfunction drawPointLegend(ctx, options, x, y, w) {\n  let type, xOffset, yOffset, size, cornerRadius, width;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n  ctx.beginPath();\n  switch (style) {\n  default:\n    if (w) {\n      ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n    } else {\n      ctx.arc(x, y, radius, 0, TAU);\n    }\n    ctx.closePath();\n    break;\n  case 'triangle':\n    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    ctx.closePath();\n    break;\n  case 'rectRounded':\n    cornerRadius = radius * 0.516;\n    size = radius - cornerRadius;\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\n    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n    ctx.closePath();\n    break;\n  case 'rect':\n    if (!rotation) {\n      size = Math.SQRT1_2 * radius;\n      width = w ? w / 2 : size;\n      ctx.rect(x - width, y - size, 2 * width, 2 * size);\n      break;\n    }\n    rad += QUARTER_PI;\n  case 'rectRot':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    ctx.closePath();\n    break;\n  case 'crossRot':\n    rad += QUARTER_PI;\n  case 'cross':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'star':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    rad += QUARTER_PI;\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'line':\n    xOffset = w ? w / 2 : Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    break;\n  case 'dash':\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n    break;\n  }\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n  ctx.restore();\n}\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\nfunction addRoundedRectPath(ctx, rect) {\n  const {x, y, w, h, radius} = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n  value = +matches[2];\n  switch (matches[3]) {\n  case 'px':\n    return value;\n  case '%':\n    value /= 100;\n    break;\n  }\n  return size * value;\n}\nconst numberOrZero = v => +v || 0;\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\nfunction toTRBL(value) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\nfunction _addGrace(minmax, grace, beginAtZero) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\nfunction createContext(parentContext, context) {\n  return Object.assign(Object.create(parentContext), context);\n}\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get(target, prop) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value;\n      delete target._keys;\n      return true;\n    }\n  });\n}\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get(target, prop, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\nfunction _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n  const value = resolve();\n  target[prop] = value;\n  return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop];\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  value = value(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, value);\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n  return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n  if (key === null) {\n    return false;\n  }\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key, value);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback, item);\n  }\n  return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n  return target;\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (defined(value)) {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n  const {iScale} = meta;\n  const {key = 'r'} = this._parsing;\n  const parsed = new Array(count);\n  let i, ilen, index, item;\n  for (i = 0, ilen = count; i < ilen; ++i) {\n    index = i + start;\n    item = data[index];\n    parsed[i] = {\n      r: iScale.parse(resolveObjectKey(item, key), index)\n    };\n  }\n  return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n      : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n  return parent;\n}\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n  return valueInPixels;\n}\nconst getComputedStyle = (element) => window.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\nfunction getCanvasPosition(e, canvas) {\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {offsetX, offsetY} = source;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\nfunction getRelativePosition(evt, chart) {\n  if ('native' in evt) {\n    return evt;\n  }\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\nconst round1 = v => Math.round(v * 10) / 10;\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n  return {\n    width,\n    height\n  };\n}\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\nconst supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n  }\n  return passiveSupported;\n}());\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n    : mode === 'after' ? t < 1 ? p1.y : p2.y\n    : t > 0 ? p2.y : p1.y\n  };\n}\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\nconst getLeftToRightAdapter = function() {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) {\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) {\n      return x;\n    },\n  };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  let {start, end, loop} = segment;\n  let i, ilen;\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n    if (point.skip) {\n      continue;\n    }\n    value = normalize(point[property]);\n    if (value === prevValue) {\n      continue;\n    }\n    inside = between(value, startBound, endBound);\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n  return result;\n}\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n  while (start < count && points[start].skip) {\n    start++;\n  }\n  start %= count;\n  if (loop) {\n    end += start;\n  }\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n  end %= count;\n  return {start, end};\n}\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n  return result;\n}\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n  if (!count) {\n    return [];\n  }\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n  return result;\n}\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/chart.js/dist/chart.mjs\n/*!\n * Chart.js v3.9.1\n * https://www.chartjs.org\n * (c) 2022 Chart.js Contributors\n * Released under the MIT License\n */\n\n\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || (elapsed < duration));\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndex.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign: tickTextAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {chart, ctx, options: {grid}} = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass ScatterController extends DatasetController {\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      const {dataset: line, _dataset} = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {showLine} = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction chart_abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  init(chartOptions) {}\n  formats() {\n    return chart_abstract();\n  }\n  parse(value, format) {\n    return chart_abstract();\n  }\n  format(timestamp, format) {\n    return chart_abstract();\n  }\n  add(timestamp, amount, unit) {\n    return chart_abstract();\n  }\n  diff(a, b, unit) {\n    return chart_abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return chart_abstract();\n  }\n  endOf(timestamp, unit) {\n    return chart_abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {plugins, localIds};\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.9.1\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {mode});\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle, circular) {\n  const {options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (this.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle, circular);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || (this.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar chart_elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n\nfunction _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n\nfunction _getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {options, ctx} = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst chart_map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    chart_map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart_map.get(chart));\n    chart_map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart_map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart || config._chart;\n    this._chart = this.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : (labelColors.borderWidth || 1);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const extra = getTickBackdropHeight(opts) / 2;\n  const outerDistance = scale.drawingArea;\n  const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      const backdropLeft = left - padding.left;\n      const backdropTop = top - padding.top;\n      const backdropWidth = right - left + padding.width;\n      const backdropHeight = bottom - top + padding.height;\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: backdropLeft,\n          y: backdropTop,\n          w: backdropWidth,\n          h: backdropHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n      }\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid} = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], this) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return (this._cache.data = this.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction chart_interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = chart_interpolate(table, this.min);\n    this._tableRange = chart_interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (chart_interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return chart_interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n  controllers,\n  chart_elements,\n  plugins,\n  scales,\n];\n\n\n\n;// CONCATENATED MODULE: ./node_modules/chart.js/auto/auto.mjs\n\n\nChart.register(...registerables);\n\n/* harmony default export */ const auto = (Chart);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8597\n")}},__webpack_module_cache__={};function __webpack_require__(t){var n=__webpack_module_cache__[t];if(void 0!==n)return n.exports;var Q=__webpack_module_cache__[t]={id:t,exports:{}};return __webpack_modules__[t].call(Q.exports,Q,Q.exports,__webpack_require__),Q.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(t,n)=>{for(var Q in n)__webpack_require__.o(n,Q)&&!__webpack_require__.o(t,Q)&&Object.defineProperty(t,Q,{enumerable:!0,get:n[Q]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;__webpack_require__.g.importScripts&&(t=__webpack_require__.g.location+"");var n=__webpack_require__.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var Q=n.getElementsByTagName("script");Q.length&&(t=Q[Q.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=t})(),__webpack_require__.b=document.baseURI||self.location.href,__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(3607)})();